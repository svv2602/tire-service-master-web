const axios = require('axios');

const API_BASE_URL = 'http://localhost:8000';

// –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–æ–≤ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
const AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyLCJleHAiOjE3NDgyNDg2OTEsInRva2VuX3R5cGUiOiJhY2Nlc3MifQ.xmBuOjj2jM7RpboyWt23SqpkbjROk_tVkQnEdu7fX8k';

async function testBookingsWithNewToken() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
    const healthResponse = await axios.get(`${API_BASE_URL}/api/v1/health`);
    console.log('‚úÖ Health check:', healthResponse.data);
    console.log('');

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
    try {
      const bookingsResponse = await axios.get(`${API_BASE_URL}/api/v1/bookings?page=1&per_page=10`, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('–°—Ç–∞—Ç—É—Å:', bookingsResponse.status);
      console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(bookingsResponse.data));
      
      if (bookingsResponse.data.data && bookingsResponse.data.data.length > 0) {
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookingsResponse.data.data.length);
        console.log('–ü–∞–≥–∏–Ω–∞—Ü–∏—è:', bookingsResponse.data.pagination);
        console.log('–ü—Ä–∏–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(JSON.stringify(bookingsResponse.data.data[0], null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const booking = bookingsResponse.data.data[0];
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
        console.log('- ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.id);
        console.log('- –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.booking_date);
        console.log('- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', booking.start_time);
        console.log('- –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:', booking.end_time);
        console.log('- ID —Å—Ç–∞—Ç—É—Å–∞:', booking.status_id);
        console.log('- –°—Ç–∞—Ç—É—Å (–æ–±—ä–µ–∫—Ç):', booking.status);
        console.log('- ID –∫–ª–∏–µ–Ω—Ç–∞:', booking.client_id);
        console.log('- –ö–ª–∏–µ–Ω—Ç (–æ–±—ä–µ–∫—Ç):', booking.client);
        console.log('- ID —Ç–æ—á–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:', booking.service_point_id);
        console.log('- –¢–æ—á–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–æ–±—ä–µ–∫—Ç):', booking.service_point);
        console.log('- ID —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', booking.car_type_id);
        console.log('- –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–±—ä–µ–∫—Ç):', booking.car_type);
      } else {
        console.log('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error.response?.status, error.response?.data);
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    try {
      const singleBookingResponse = await axios.get(`${API_BASE_URL}/api/v1/bookings/5`, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ –û—Ç–¥–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log(JSON.stringify(singleBookingResponse.data, null, 2));
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.status, error.response?.data);
    }

  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testBookingsWithNewToken(); 