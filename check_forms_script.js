/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –û—à–∏–±–∫–∏ 401 Unauthorized (–∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã)
 * 2. –û—à–∏–±–∫–∏ 400 Bad Request (–ø—Ä–æ–±–ª–µ–º—ã —Å FormData)
 * 3. Undefined –∑–Ω–∞—á–µ–Ω–∏—è –≤ URL
 * 4. –ü—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ä–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞)
const FORMS_TO_CHECK = [
    // –ü–∞—Ä—Ç–Ω–µ—Ä—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', url: '/partners/new', hasFormData: false, api: '/partners' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', url: '/partners/1/edit', hasFormData: false, api: '/partners/1' },
    
    // –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏ (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏', url: '/partners/1/service-points/new', hasFormData: true, api: '/partners/1/service_points' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏', url: '/partners/1/service-points/1/edit', hasFormData: true, api: '/partners/1/service_points/1' },
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url: '/users/new', hasFormData: false, api: '/users' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url: '/users/1/edit', hasFormData: false, api: '/users/1' },
    
    // –£—Å–ª—É–≥–∏ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥', url: '/services/new', hasFormData: false, api: '/service_categories' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥', url: '/services/1/edit', hasFormData: false, api: '/service_categories/1' },
    
    // –†–µ–≥–∏–æ–Ω—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', url: '/regions/new', hasFormData: false, api: '/regions' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', url: '/regions/1/edit', hasFormData: false, api: '/regions/1' },
    
    // –ì–æ—Ä–æ–¥–∞ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', url: '/cities/new', hasFormData: false, api: '/cities' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', url: '/cities/1/edit', hasFormData: false, api: '/cities/1' },
    
    // –ö–ª–∏–µ–Ω—Ç—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', url: '/clients/new', hasFormData: false, api: '/clients' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', url: '/clients/1/edit', hasFormData: false, api: '/clients/1' },
    
    // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (JSON)
    { name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', url: '/clients/1/cars/new', hasFormData: false, api: '/clients/1/cars' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', url: '/clients/1/cars/1/edit', hasFormData: false, api: '/clients/1/cars/1' },
    
    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', url: '/bookings/new', hasFormData: false, api: '/bookings' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', url: '/bookings/1/edit', hasFormData: false, api: '/bookings/1' },
    
    // –û—Ç–∑—ã–≤—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', url: '/reviews/new', hasFormData: false, api: '/reviews' },
    { name: '–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤', url: '/reviews/1/reply', hasFormData: false, api: '/reviews/1/reply' },
    
    // –°—Ç–∞—Ç—å–∏ (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏', url: '/articles/new', hasFormData: true, api: '/articles' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏', url: '/articles/1/edit', hasFormData: true, api: '/articles/1' },
    
    // –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (–≤–æ–∑–º–æ–∂–Ω–æ FormData)
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', url: '/page-content/1/edit', hasFormData: true, api: '/page_contents/1' },
    
    // –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ', url: '/car-brands/new', hasFormData: true, api: '/car_brands' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ', url: '/car-brands/1/edit', hasFormData: true, api: '/car_brands/1' },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthStatus() {
    console.log('üîê === –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
    
    const token = localStorage.getItem('tvoya_shina_token');
    const user = localStorage.getItem('tvoya_shina_user');
    const refreshToken = localStorage.getItem('tvoya_shina_refresh_token');
    
    console.log('–¢–æ–∫–µ–Ω –µ—Å—Ç—å:', !!token);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å:', !!user);
    console.log('Refresh —Ç–æ–∫–µ–Ω –µ—Å—Ç—å:', !!refreshToken);
    
    if (token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            console.log('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.role);
            console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.user_id);
            console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:', new Date(payload.exp * 1000));
            console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:', Date.now() > payload.exp * 1000);
            
            if (Date.now() > payload.exp * 1000) {
                console.log('‚ö†Ô∏è –¢–û–ö–ï–ù –ò–°–¢–ï–ö! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.');
                return false;
            }
            return true;
        } catch (e) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', e);
            return false;
        }
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function refreshAuthToken() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    
    try {
        localStorage.clear();
        sessionStorage.clear();
        
        const response = await fetch('http://localhost:8000/api/v1/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                auth: { login: 'admin@test.com', password: 'admin123' }
            })
        });
        
        const data = await response.json();
        
        if (data.tokens?.access) {
            localStorage.setItem('tvoya_shina_token', data.tokens.access);
            localStorage.setItem('tvoya_shina_refresh_token', data.tokens.refresh);
            localStorage.setItem('tvoya_shina_user', JSON.stringify(data.user));
            console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            return true;
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function checkApiEndpoint(endpoint, method = 'GET', data = null) {
    const token = localStorage.getItem('tvoya_shina_token');
    const url = `http://localhost:8000/api/v1${endpoint}`;
    
    const options = {
        method,
        headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/json',
        }
    };
    
    if (data && method !== 'GET') {
        if (data instanceof FormData) {
            // –î–ª—è FormData –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            options.body = data;
        } else {
            options.headers['Content-Type'] = 'application/json';
            options.body = JSON.stringify(data);
        }
    }
    
    try {
        const response = await fetch(url, options);
        return {
            status: response.status,
            ok: response.ok,
            statusText: response.statusText,
            url: url
        };
    } catch (error) {
        return {
            status: 0,
            ok: false,
            statusText: error.message,
            url: url,
            error: error
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function createTestData(form, isUpdate = false) {
    const baseData = {
        name: isUpdate ? 'Updated Test' : 'Test',
        description: 'Test description'
    };
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º
    if (form.api.includes('partners')) {
        return {
            ...baseData,
            company_name: baseData.name,
            contact_person: 'Test Contact',
            legal_address: 'Test Address',
            region_id: 1,
            city_id: 1,
            is_active: true
        };
    }
    
    if (form.api.includes('service_points')) {
        return {
            ...baseData,
            address: 'Test Address',
            city_id: 1,
            partner_id: 1,
            contact_phone: '+380123456789',
            is_active: true,
            work_status: 'working',
            latitude: 50.4501,
            longitude: 30.5234
        };
    }
    
    if (form.api.includes('users')) {
        return {
            ...baseData,
            email: 'test@example.com',
            first_name: 'Test',
            last_name: 'User',
            phone: '+380123456789',
            role_id: 1
        };
    }
    
    return baseData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
async function checkForm(form) {
    console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: ${form.name}`);
    console.log(`URL: ${form.url}`);
    console.log(`API: ${form.api}`);
    console.log(`FormData: ${form.hasFormData ? '–î–∞' : '–ù–µ—Ç'}`);
    
    const results = {
        name: form.name,
        url: form.url,
        api: form.api,
        hasFormData: form.hasFormData,
        tests: []
    };
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if (form.url.includes('/edit')) {
        const getResult = await checkApiEndpoint(form.api);
        results.tests.push({
            test: 'GET –∑–∞–ø—Ä–æ—Å (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö)',
            status: getResult.status,
            ok: getResult.ok,
            message: getResult.statusText
        });
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST/PATCH –∑–∞–ø—Ä–æ—Å–∞
    const isUpdate = form.url.includes('/edit');
    const method = isUpdate ? 'PATCH' : 'POST';
    const endpoint = isUpdate ? form.api : form.api;
    
    let testData = createTestData(form, isUpdate);
    
    // –°–æ–∑–¥–∞–µ–º FormData –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
    if (form.hasFormData) {
        const formData = new FormData();
        
        // –î–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (form.api.includes('service_points')) {
            Object.entries(testData).forEach(([key, value]) => {
                formData.append(`service_point[${key}]`, value.toString());
            });
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            Object.entries(testData).forEach(([key, value]) => {
                formData.append(key, value.toString());
            });
        }
        
        testData = formData;
    }
    
    const postResult = await checkApiEndpoint(endpoint, method, testData);
    results.tests.push({
        test: `${method} –∑–∞–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã)`,
        status: postResult.status,
        ok: postResult.ok,
        message: postResult.statusText
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const hasAuthError = results.tests.some(t => t.status === 401);
    const hasFormDataError = results.tests.some(t => t.status === 400 && form.hasFormData);
    const hasServerError = results.tests.some(t => t.status >= 500);
    
    if (hasAuthError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)');
    }
    if (hasFormDataError) {
        console.log('‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ FormData (400)');
    }
    if (hasServerError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5xx)');
    }
    
    // 422 - –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const allOk = results.tests.every(t => t.ok || t.status === 422 || t.status === 404);
    if (allOk) {
        console.log('‚úÖ –§–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º
async function checkAllForms() {
    console.log('üöÄ === –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –í–°–ï–• –§–û–†–ú ===\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const isAuthValid = checkAuthStatus();
    
    if (!isAuthValid) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...');
        const tokenRefreshed = await refreshAuthToken();
        if (!tokenRefreshed) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.');
            return;
        }
    }
    
    const results = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É
    for (const form of FORMS_TO_CHECK) {
        try {
            const result = await checkForm(form);
            results.push(result);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${form.name}:`, error);
            results.push({
                name: form.name,
                url: form.url,
                error: error.message
            });
        }
    }
    
    // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
    
    const authErrors = results.filter(r => r.tests?.some(t => t.status === 401));
    const formDataErrors = results.filter(r => r.hasFormData && r.tests?.some(t => t.status === 400));
    const serverErrors = results.filter(r => r.tests?.some(t => t.status >= 500));
    const workingForms = results.filter(r => r.tests?.every(t => t.ok || t.status === 422 || t.status === 404));
    
    console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ —Ñ–æ—Ä–º—ã: ${workingForms.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401): ${authErrors.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ FormData (400): ${formDataErrors.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (5xx): ${serverErrors.length}`);
    
    if (authErrors.length > 0) {
        console.log('\nüîê –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
        authErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    if (formDataErrors.length > 0) {
        console.log('\nüìã –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ FormData:');
        formDataErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    if (serverErrors.length > 0) {
        console.log('\nüî• –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
        serverErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    console.log('\nüèÅ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º
async function checkCriticalForms() {
    const criticalForms = FORMS_TO_CHECK.filter(form => 
        form.name.includes('–ø–∞—Ä—Ç–Ω–µ—Ä') || 
        form.name.includes('—Å–µ—Ä–≤–∏—Å–Ω') ||
        form.name.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª')
    );
    
    console.log('‚ö° === –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ù–´–• –§–û–†–ú ===\n');
    
    const results = [];
    for (const form of criticalForms) {
        const result = await checkForm(form);
        results.push(result);
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ FormData —Ñ–æ—Ä–º
async function checkFormDataForms() {
    const formDataForms = FORMS_TO_CHECK.filter(form => form.hasFormData);
    
    console.log('üìã === –ü–†–û–í–ï–†–ö–ê –§–û–†–ú –° FORMDATA ===\n');
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${formDataForms.length} —Ñ–æ—Ä–º —Å FormData:`);
    formDataForms.forEach(form => console.log(`  - ${form.name}`));
    console.log('');
    
    const results = [];
    for (const form of formDataForms) {
        const result = await checkForm(form);
        results.push(result);
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.checkAllForms = checkAllForms;
window.checkCriticalForms = checkCriticalForms;
window.checkFormDataForms = checkFormDataForms;
window.checkAuthStatus = checkAuthStatus;
window.refreshAuthToken = refreshAuthToken;

console.log('üìã –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('  checkAllForms() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—ã');
console.log('  checkCriticalForms() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã');
console.log('  checkFormDataForms() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ FormData —Ñ–æ—Ä–º—ã');
console.log('  checkAuthStatus() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
console.log('  refreshAuthToken() - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');