#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ServiceFormPage.tsx
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ i18n
 */

const fs = require('fs');
const path = require('path');

const SERVICE_FORM_PATH = 'src/pages/services/ServiceFormPage.tsx';

// –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ServiceFormPage
const TRANSLATIONS_MAP = [
  // –ò–º–ø–æ—Ä—Ç useTranslation
  {
    search: "} from '@mui/icons-material';",
    replace: "} from '@mui/icons-material';\nimport { useTranslation } from 'react-i18next';"
  },
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—É–∫–∞ useTranslation
  {
    search: "export const ServiceFormPage: React.FC = () => {",
    replace: "export const ServiceFormPage: React.FC = () => {\n  const { t } = useTranslation();"
  },
  
  // –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º t
  {
    search: "const validationSchema = Yup.object({",
    replace: "const createValidationSchema = (t: any) => Yup.object({"
  },
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
  {
    search: ".required('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')",
    replace: ".required(t('forms.service.validation.nameRequired'))"
  },
  {
    search: ".min(2, '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')",
    replace: ".min(2, t('forms.service.validation.nameMin'))"
  },
  {
    search: ".max(100, '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤')",
    replace: ".max(100, t('forms.service.validation.nameMax'))"
  },
  {
    search: ".max(500, '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤')",
    replace: ".max(500, t('forms.service.validation.descriptionMax'))"
  },
  {
    search: ".min(0, '–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')",
    replace: ".min(0, t('forms.service.validation.sortOrderMin'))"
  },
  {
    search: ".max(9999, '–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 9999')",
    replace: ".max(9999, t('forms.service.validation.sortOrderMax'))"
  },
  
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  {
    search: "validationSchema,",
    replace: "validationSchema: React.useMemo(() => createValidationSchema(t), [t]),"
  },
  
  // –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞ –∏ –æ—à–∏–±–æ–∫
  {
    search: "setSuccessMessage('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');",
    replace: "setSuccessMessage(t('forms.service.messages.updateSuccess'));"
  },
  {
    search: "setSuccessMessage('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');",
    replace: "setSuccessMessage(t('forms.service.messages.createSuccess'));"
  },
  {
    search: "setSubmitError(error?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');",
    replace: "setSubmitError(error?.data?.message || t('forms.service.messages.saveError'));"
  },
  
  // –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  {
    search: "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...",
    replace: "{t('forms.service.messages.loading')}"
  },
  
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
  {
    search: ">\n          –ù–∞–∑–∞–¥\n        </Button>",
    replace: ">\n          {t('forms.service.buttons.back')}\n        </Button>"
  },
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  {
    search: "{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥' : '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥'}",
    replace: "{isEditing ? t('forms.service.title.edit') : t('forms.service.title.create')}"
  },
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
  {
    search: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    replace: "{t('forms.service.sections.categoryInfo')}"
  },
  
  // –õ–µ–π–±–ª—ã –ø–æ–ª–µ–π
  {
    search: 'label="–ù–∞–∑–≤–∞–Ω–∏–µ"',
    replace: 'label={t("forms.service.fields.name")}'
  },
  {
    search: 'label="–û–ø–∏—Å–∞–Ω–∏–µ"',
    replace: 'label={t("forms.service.fields.description")}'
  },
  {
    search: 'label="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"',
    replace: 'label={t("forms.service.fields.sortOrder")}'
  },
  {
    search: 'label="–ê–∫—Ç–∏–≤–Ω–∞"',
    replace: 'label={t("forms.service.fields.isActive")}'
  },
  
  // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  {
    search: "{isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}",
    replace: "{isEditing ? t('forms.service.buttons.save') : t('forms.service.buttons.create')}"
  }
];

function localizeServiceForm() {
  try {
    console.log('üåê –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é ServiceFormPage.tsx...');
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const filePath = path.join(process.cwd(), SERVICE_FORM_PATH);
    if (!fs.existsSync(filePath)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    let replacementCount = 0;
    let failedReplacements = [];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    TRANSLATIONS_MAP.forEach((replacement, index) => {
      const beforeContent = content;
      content = content.replace(replacement.search, replacement.replace);
      
      if (beforeContent !== content) {
        replacementCount++;
        console.log(`‚úÖ –ó–∞–º–µ–Ω–∞ ${index + 1}: ${replacement.search.substring(0, 50)}...`);
      } else {
        failedReplacements.push(index + 1);
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É ${index + 1}: ${replacement.search.substring(0, 50)}...`);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç React –¥–ª—è useMemo
    if (!content.includes('import React,')) {
      content = content.replace(
        "import React, { useState } from 'react';",
        "import React, { useState, useMemo } from 'react';"
      );
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç useMemo');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, content, 'utf8');
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò ServiceFormPage.tsx:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–º–µ–Ω: ${replacementCount}/${TRANSLATIONS_MAP.length}`);
    if (failedReplacements.length > 0) {
      console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–º–µ–Ω: ${failedReplacements.join(', ')}`);
    }
    console.log(`üìÅ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${SERVICE_FORM_PATH}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ServiceFormPage:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
localizeServiceForm(); 