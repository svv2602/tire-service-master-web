#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ @mui/material –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node migrate-mui-imports.js <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É-–∏–ª–∏-–ø–∞–ø–∫–µ>
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   node migrate-mui-imports.js src/pages/dashboard/DashboardPage.tsx
 *   node migrate-mui-imports.js src/pages/users/
 */

const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π UI –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
const AVAILABLE_UI_COMPONENTS = new Set([
  'Alert',
  'Avatar',
  'Backdrop',
  'Badge',
  'Box',
  'Breadcrumbs',
  'Button',
  'Card',
  'CardActions',
  'CardContent',
  'CardMedia',
  'Checkbox',
  'Chip',
  'CircularProgress',
  'Container',
  'DatePicker',
  'Dialog',
  'DialogActions',
  'DialogContent',
  'DialogTitle',
  'Divider',
  'Drawer',
  'Dropdown',
  'FileUpload',
  'Filter',
  'Grid',
  'IconButton',
  'List',
  'ListItem',
  'ListItemButton',
  'ListItemIcon',
  'ListItemText',
  'Menu',
  'MenuItem',
  'Modal',
  'Pagination',
  'Paper',
  'Radio',
  'RadioGroup',
  'Rating',
  'Select',
  'Skeleton',
  'Slider',
  'Snackbar',
  'Stack',
  'Stepper',
  'Step',
  'StepLabel',
  'Switch',
  'Table',
  'TableBody',
  'TableCell',
  'TableContainer',
  'TableHead',
  'TableRow',
  'Tabs',
  'Tab',
  'TextField',
  'Tooltip',
  'Typography',
]);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∏–∑ MUI (–Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ UI –±–∏–±–ª–∏–æ—Ç–µ–∫–µ)
const MUI_ONLY_COMPONENTS = new Set([
  'Autocomplete',
  'FormControl',
  'FormControlLabel',
  'FormGroup',
  'FormHelperText',
  'FormLabel',
  'InputAdornment',
  'InputLabel',
  'LinearProgress',
  'Link',
  'ListSubheader',
  'TablePagination', // –°—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Pagination
  'Toolbar',
  'useTheme', // —Ö—É–∫
  'useMediaQuery', // —Ö—É–∫
  'styled', // —Ñ—É–Ω–∫—Ü–∏—è
  'alpha', // —Ñ—É–Ω–∫—Ü–∏—è
]);

/**
 * –ü–∞—Ä—Å–∏—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
 */
function parseImports(content) {
  const importRegex = /import\s+{([^}]+)}\s+from\s+['"]@mui\/material['"]/g;
  const imports = [];
  let match;

  while ((match = importRegex.exec(content)) !== null) {
    const importedItems = match[1]
      .split(',')
      .map(item => item.trim())
      .filter(Boolean);
    
    imports.push({
      fullMatch: match[0],
      items: importedItems,
      startIndex: match.index,
      endIndex: match.index + match[0].length,
    });
  }

  return imports;
}

/**
 * –†–∞–∑–¥–µ–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ MUI-only –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
function categorizeImports(importedItems) {
  const uiComponents = [];
  const muiOnlyComponents = [];
  const unknown = [];

  importedItems.forEach(item => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∏–∞—Å–æ–≤ (as xxx)
    const cleanItem = item.split(' as ')[0].trim();
    
    if (AVAILABLE_UI_COMPONENTS.has(cleanItem)) {
      uiComponents.push(item);
    } else if (MUI_ONLY_COMPONENTS.has(cleanItem)) {
      muiOnlyComponents.push(item);
    } else {
      unknown.push(item);
    }
  });

  return { uiComponents, muiOnlyComponents, unknown };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ UI –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
 */
function getRelativeUIPath(filePath) {
  const fileDir = path.dirname(filePath);
  const uiPath = path.join(process.cwd(), 'src', 'components', 'ui');
  const relativePath = path.relative(fileDir, uiPath);
  return relativePath.replace(/\\/g, '/');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
 */
function generateNewImports(categorized, relativeUIPath) {
  const newImports = [];

  if (categorized.uiComponents.length > 0) {
    const uiImport = `import { ${categorized.uiComponents.join(', ')} } from '${relativeUIPath}';`;
    newImports.push(uiImport);
  }

  if (categorized.muiOnlyComponents.length > 0) {
    const muiImport = `import { ${categorized.muiOnlyComponents.join(', ')} } from '@mui/material';`;
    newImports.push(muiImport);
  }

  if (categorized.unknown.length > 0) {
    const unknownImport = `import { ${categorized.unknown.join(', ')} } from '@mui/material'; // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ UI –±–∏–±–ª–∏–æ—Ç–µ–∫–µ`;
    newImports.push(unknownImport);
  }

  return newImports.join('\n');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ
 */
function migrateFile(filePath, dryRun = false) {
  console.log(`\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  
  const content = fs.readFileSync(filePath, 'utf8');
  const imports = parseImports(content);

  if (imports.length === 0) {
    console.log('  ‚ÑπÔ∏è  MUI –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return { migrated: false, changes: [] };
  }

  let newContent = content;
  const changes = [];
  const relativeUIPath = getRelativeUIPath(filePath);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å
  for (let i = imports.length - 1; i >= 0; i--) {
    const importBlock = imports[i];
    const categorized = categorizeImports(importBlock.items);
    
    console.log(`  üì¶ –ù–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${importBlock.items.length}`);
    console.log(`    ‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${categorized.uiComponents.length}`);
    console.log(`    ‚ö†Ô∏è  MUI-only: ${categorized.muiOnlyComponents.length}`);
    console.log(`    ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ: ${categorized.unknown.length}`);

    if (categorized.uiComponents.length > 0) {
      const newImportsText = generateNewImports(categorized, relativeUIPath);
      
      newContent = 
        newContent.substring(0, importBlock.startIndex) +
        newImportsText +
        newContent.substring(importBlock.endIndex);

      changes.push({
        old: importBlock.fullMatch,
        new: newImportsText,
        uiComponents: categorized.uiComponents,
        muiOnlyComponents: categorized.muiOnlyComponents,
      });
    }
  }

  if (changes.length > 0 && !dryRun) {
    fs.writeFileSync(filePath, newContent, 'utf8');
    console.log('  ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } else if (changes.length > 0 && dryRun) {
    console.log('  üîç Dry-run —Ä–µ–∂–∏–º: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }

  return { migrated: changes.length > 0, changes };
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
 */
function migrateDirectory(dirPath, dryRun = false) {
  const stats = { total: 0, migrated: 0, errors: 0 };

  function processDir(dir) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if (!['node_modules', '.git', 'build', 'dist'].includes(entry.name)) {
          processDir(fullPath);
        }
      } else if (entry.isFile() && /\.(tsx|ts|jsx|js)$/.test(entry.name)) {
        stats.total++;
        try {
          const result = migrateFile(fullPath, dryRun);
          if (result.migrated) {
            stats.migrated++;
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
          stats.errors++;
        }
      }
    }
  }

  processDir(dirPath);
  return stats;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
üìö –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ MUI –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node migrate-mui-imports.js <–ø—É—Ç—å> [--dry-run]

–û–ø—Ü–∏–∏:
  --dry-run    –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö

–ü—Ä–∏–º–µ—Ä—ã:
  node migrate-mui-imports.js src/pages/dashboard/DashboardPage.tsx
  node migrate-mui-imports.js src/pages/users/ --dry-run
  node migrate-mui-imports.js src/pages/ --dry-run
    `);
    process.exit(0);
  }

  const targetPath = args[0];
  const dryRun = args.includes('--dry-run');
  const fullPath = path.resolve(process.cwd(), targetPath);

  console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é MUI –∏–º–ø–æ—Ä—Ç–æ–≤`);
  console.log(`üìÇ –ü—É—Ç—å: ${fullPath}`);
  console.log(`üîç –†–µ–∂–∏–º: ${dryRun ? 'Dry-run (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' : '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n`);

  if (!fs.existsSync(fullPath)) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fullPath}`);
    process.exit(1);
  }

  const stats = fs.statSync(fullPath);

  if (stats.isFile()) {
    const result = migrateFile(fullPath, dryRun);
    console.log(`\nüìä –ò—Ç–æ–≥–æ: ${result.migrated ? '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ' : '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}`);
  } else if (stats.isDirectory()) {
    const results = migrateDirectory(fullPath, dryRun);
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.total}`);
    console.log(`  ‚úÖ –§–∞–π–ª–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${results.migrated}`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);
    console.log(`  ‚ú® –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${results.total - results.migrated - results.errors}`);
  }

  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();

