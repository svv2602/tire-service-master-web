const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
const clientPagesPath = path.join(__dirname, '../../src/pages/client');

function fixComplexTranslationErrors() {
  try {
    let totalFixes = 0;
    let processedFiles = 0;
    
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .tsx –≤ –ø–∞–ø–∫–µ client
    const files = fs.readdirSync(clientPagesPath).filter(file => file.endsWith('.tsx'));
    
    for (const fileName of files) {
      const filePath = path.join(clientPagesPath, fileName);
      let content = fs.readFileSync(filePath, 'utf8');
      let fileFixes = 0;
      
      // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t(): t(t('key')) -> t('key')
      const doubleTPattern = /t\(t\('([^']+)'\)\)/g;
      const doubleMatches = content.match(doubleTPattern);
      if (doubleMatches) {
        content = content.replace(doubleTPattern, "t('$1')");
        fileFixes += doubleMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${doubleMatches.length} –¥–≤–æ–π–Ω—ã—Ö t() –≤ ${fileName}`);
      }
      
      // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: '{t('key')}' -> t('key')
      const wrongQuotesPattern = /'\{t\('([^']+)'\)\}'/g;
      const wrongMatches = content.match(wrongQuotesPattern);
      if (wrongMatches) {
        content = content.replace(wrongQuotesPattern, "t('$1')");
        fileFixes += wrongMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${wrongMatches.length} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ ${fileName}`);
      }
      
      // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: "{t('key')}" -> t('key')
      const doubleQuotesPattern = /"\{t\('([^']+)'\)\}"/g;
      const doubleQuotesMatches = content.match(doubleQuotesPattern);
      if (doubleQuotesMatches) {
        content = content.replace(doubleQuotesPattern, "t('$1')");
        fileFixes += doubleQuotesMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${doubleQuotesMatches.length} –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ ${fileName}`);
      }
      
      // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏: {t('{t('key')} —Ç–µ–∫—Å—Ç')} -> {t('key')} —Ç–µ–∫—Å—Ç
      const complexPattern1 = /\{t\('\{t\('([^']+)'\)\}([^']*?)'\)\}/g;
      const complex1Matches = content.match(complexPattern1);
      if (complex1Matches) {
        content = content.replace(complexPattern1, "{t('$1')}$2");
        fileFixes += complex1Matches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${complex1Matches.length} —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ 1 –≤ ${fileName}`);
      }
      
      // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSX –∞—Ç—Ä–∏–±—É—Ç—ã –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫: prop=t('key') -> prop={t('key')}
      const jsxNoBracesPattern = /(\w+)=t\('([^']+)'\)/g;
      const noBracesMatches = content.match(jsxNoBracesPattern);
      if (noBracesMatches) {
        content = content.replace(jsxNoBracesPattern, "$1={t('$2')}");
        fileFixes += noBracesMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${noBracesMatches.length} JSX –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –±–µ–∑ —Å–∫–æ–±–æ–∫ –≤ ${fileName}`);
      }
      
      // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: '{t("key")}' -> t('key')
      const mixedQuotesPattern = /'\{t\("([^"]+)"\)\}'/g;
      const mixedMatches = content.match(mixedQuotesPattern);
      if (mixedMatches) {
        content = content.replace(mixedQuotesPattern, "t('$1')");
        fileFixes += mixedMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${mixedMatches.length} —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ ${fileName}`);
      }
      
      // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: `{t('key')}` -> t('key')
      const backticksPattern = /`\{t\('([^']+)'\)\}`/g;
      const backticksMatches = content.match(backticksPattern);
      if (backticksMatches) {
        content = content.replace(backticksPattern, "t('$1')");
        fileFixes += backticksMatches.length;
        console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${backticksMatches.length} –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ ${fileName}`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      if (fileFixes > 0) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ ${fileName}: ${fileFixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
        totalFixes += fileFixes;
        processedFiles++;
      } else {
        console.log(`‚ûñ ${fileName}: –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
    
    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}/${files.length}`);
    console.log(`üîß –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`);
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixComplexTranslationErrors(); 