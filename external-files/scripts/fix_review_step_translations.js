#!/usr/bin/env node
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π bookingSteps –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è ReviewStep

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const ruFilePath = path.join(__dirname, '../../src/i18n/locales/ru.json');
const ukFilePath = path.join(__dirname, '../../src/i18n/locales/uk.json');

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ReviewStep
const reviewStepTranslations = {
  ru: {
    "loadingCity": "–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–∞...",
    "cityLoadError": "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–∞",
    "loadingService": "–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥–∏...",
    "currency": "–≥—Ä–Ω"
  },
  uk: {
    "loadingCity": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞...",
    "cityLoadError": "–ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞", 
    "loadingService": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏...",
    "currency": "–≥—Ä–Ω"
  }
};

function fixDuplicateBookingSteps(filePath, lang) {
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è bookingSteps –≤ ${lang.toUpperCase()} —Ñ–∞–π–ª–µ...`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    const data = JSON.parse(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    let bookingStepsCount = 0;
    let firstBookingSteps = null;
    let secondBookingSteps = null;
    
    // –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è bookingSteps
    function findBookingSteps(obj, path = '') {
      for (const [key, value] of Object.entries(obj)) {
        if (key === 'bookingSteps') {
          bookingStepsCount++;
          if (bookingStepsCount === 1) {
            firstBookingSteps = { path, data: value };
          } else if (bookingStepsCount === 2) {
            secondBookingSteps = { path, data: value };
          }
        } else if (typeof value === 'object' && value !== null) {
          findBookingSteps(value, path ? `${path}.${key}` : key);
        }
      }
    }
    
    findBookingSteps(data);
    
    if (bookingStepsCount < 2) {
      console.log(`‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ ${lang} —Ñ–∞–π–ª–µ`);
      return data;
    }
    
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${bookingStepsCount} —Å–µ–∫—Ü–∏–π bookingSteps –≤ ${lang} —Ñ–∞–π–ª–µ`);
    console.log(`üìç –ü–µ—Ä–≤–∞—è —Å–µ–∫—Ü–∏—è: ${firstBookingSteps.path || '–∫–æ—Ä–µ–Ω—å'}`);
    console.log(`üìç –í—Ç–æ—Ä–∞—è —Å–µ–∫—Ü–∏—è: ${secondBookingSteps.path || '–∫–æ—Ä–µ–Ω—å'}`);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–∫—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –≤—Ç–æ—Ä–æ–π —Å–µ–∫—Ü–∏–∏)
    const mergedBookingSteps = {
      ...firstBookingSteps.data,
      ...secondBookingSteps.data
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è review
    if (mergedBookingSteps.review) {
      mergedBookingSteps.review = {
        ...mergedBookingSteps.review,
        ...reviewStepTranslations[lang]
      };
    } else {
      mergedBookingSteps.review = reviewStepTranslations[lang];
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–∫—Ü–∏–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É
    function removeBookingSteps(obj) {
      for (const [key, value] of Object.entries(obj)) {
        if (key === 'bookingSteps') {
          delete obj[key];
        } else if (typeof value === 'object' && value !== null) {
          removeBookingSteps(value);
        }
      }
    }
    
    removeBookingSteps(data);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ –∫–æ—Ä–µ–Ω—å
    data.bookingSteps = mergedBookingSteps;
    
    console.log(`‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${lang} —Ñ–∞–π–ª–µ`);
    console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ReviewStep`);
    
    return data;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${lang} —Ñ–∞–π–ª–∞:`, error.message);
    throw error;
  }
}

function main() {
  console.log('üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–í–û–î–û–í –î–õ–Ø REVIEWSTEP');
  console.log('==========================================');
  
  try {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª
    const ruData = fixDuplicateBookingSteps(ruFilePath, 'ru');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª  
    const ukData = fixDuplicateBookingSteps(ukFilePath, 'uk');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    fs.writeFileSync(
      ruFilePath.replace('.json', `_backup_${timestamp}.json`),
      fs.readFileSync(ruFilePath, 'utf8')
    );
    fs.writeFileSync(
      ukFilePath.replace('.json', `_backup_${timestamp}.json`),
      fs.readFileSync(ukFilePath, 'utf8')
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.writeFileSync(ruFilePath, JSON.stringify(ruData, null, 2), 'utf8');
    fs.writeFileSync(ukFilePath, JSON.stringify(ukData, null, 2), 'utf8');
    
    console.log('\nüéâ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π bookingSteps –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ReviewStep');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤');
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`- –†—É—Å—Å–∫–∏–π —Ñ–∞–π–ª: ${Object.keys(reviewStepTranslations.ru).length} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π`);
    console.log(`- –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª: ${Object.keys(reviewStepTranslations.uk).length} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π`);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { fixDuplicateBookingSteps, reviewStepTranslations }; 