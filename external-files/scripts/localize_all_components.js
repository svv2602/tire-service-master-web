#!/usr/bin/env node

/**
 * –û–±—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const { localizePageTable } = require('./localize_pagetable_component.js');
const { localizeActionsMenu } = require('./localize_actions_menu_component.js');
const { localizeSearchAndFilters } = require('./localize_search_filters_component.js');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function localizeAllComponents() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n');
  
  const results = [];
  let totalReplacements = 0;
  
  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const components = [
    { name: 'PageTable', func: localizePageTable },
    { name: 'ActionsMenu', func: localizeActionsMenu },
    { name: 'SearchAndFilters', func: localizeSearchAndFilters }
  ];
  
  for (const component of components) {
    try {
      console.log(`\nüì¶ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ${component.name}...`);
      console.log('='.repeat(50));
      
      const result = component.func();
      results.push({
        component: component.name,
        ...result
      });
      
      totalReplacements += result.replacements;
      
      console.log(`‚úÖ ${component.name} –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω: ${result.replacements} –∑–∞–º–µ–Ω`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ${component.name}:`, error.message);
      results.push({
        component: component.name,
        success: false,
        error: error.message,
        replacements: 0
      });
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(70));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
  console.log('='.repeat(70));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${successful.length}/${results.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  console.log(`üìù –í—Å–µ–≥–æ –∑–∞–º–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤: ${totalReplacements}`);
  
  if (failed.length > 0) {
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    failed.forEach(result => {
      console.log(`   - ${result.component}: ${result.error}`);
    });
  }
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const replacements = result.success ? `${result.replacements} –∑–∞–º–µ–Ω` : '–æ—à–∏–±–∫–∞';
    console.log(`${status} ${result.component}: ${replacements}`);
  });
  
  return {
    total: results.length,
    successful: successful.length,
    failed: failed.length,
    totalReplacements,
    results
  };
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  localizeAllComponents()
    .then(summary => {
      console.log('\nüéâ –ú–∞—Å—Å–æ–≤–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      
      if (summary.failed === 0) {
        console.log('üèÜ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
        process.exit(0);
      } else {
        console.log(`‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏: ${summary.failed}/${summary.total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { localizeAllComponents }; 