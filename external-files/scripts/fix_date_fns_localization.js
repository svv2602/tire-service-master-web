const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å date-fns –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
const findFilesWithDateFnsLocale = () => {
  try {
    // –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç ru –ª–æ–∫–∞–ª—å –∏–∑ date-fns
    const output = execSync('grep -r "import.*ru.*date-fns/locale" src/', { 
      cwd: path.join(__dirname, '../..'),
      encoding: 'utf8' 
    });
    
    const files = output.trim().split('\n').map(line => {
      const [filePath] = line.split(':');
      return filePath;
    }).filter(Boolean);
    
    return [...new Set(files)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  } catch (error) {
    console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å date-fns –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π...');
    return [];
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è hook —É—Ç–∏–ª–∏—Ç—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const createDateLocaleHook = () => {
  const hookPath = path.join(__dirname, '../../src/hooks/useDateLocale.ts');
  
  const hookContent = `import { ru, uk } from 'date-fns/locale';
import { useTranslation } from 'react-i18next';

// Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞–ª–∏ date-fns –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export const useDateLocale = () => {
  const { i18n } = useTranslation();
  
  // –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –ª–æ–∫–∞–ª–∏ date-fns
  const localeMap = {
    'ru': ru,
    'uk': uk,
    'ru-RU': ru,
    'uk-UA': uk
  };
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞–ª—å –∏–ª–∏ —Ä—É—Å—Å–∫—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return localeMap[i18n.language] || ru;
};

export default useDateLocale;
`;

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é hooks –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  const hooksDir = path.dirname(hookPath);
  if (!fs.existsSync(hooksDir)) {
    fs.mkdirSync(hooksDir, { recursive: true });
  }

  fs.writeFileSync(hookPath, hookContent);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω hook useDateLocale.ts');
  return hookPath;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const fixComponentLocalization = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª
    if (!content.includes("import { ru } from 'date-fns/locale'")) {
      console.log(`‚è≠Ô∏è ${filePath} - —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
      return false;
    }
    
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é ${filePath}...`);
    
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    const backupPath = filePath + '.backup.' + Date.now();
    fs.writeFileSync(backupPath, content);
    
    let newContent = content;
    
    // 1. –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç ru –ª–æ–∫–∞–ª–∏ –Ω–∞ hook
    newContent = newContent.replace(
      /import { ru } from 'date-fns\/locale';?/g,
      ''
    );
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç hook –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ react-i18next
    if (newContent.includes("from 'react-i18next'")) {
      newContent = newContent.replace(
        /(import.*from 'react-i18next';)/,
        '$1\nimport { useDateLocale } from \'../../hooks/useDateLocale\';'
      );
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç react-i18next –∏–º–ø–æ—Ä—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
      const importIndex = newContent.indexOf('import React');
      if (importIndex !== -1) {
        const lineEnd = newContent.indexOf('\n', importIndex);
        newContent = newContent.slice(0, lineEnd + 1) + 
                    "import { useDateLocale } from '../../hooks/useDateLocale';\n" +
                    newContent.slice(lineEnd + 1);
      }
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ hook –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    const componentMatch = newContent.match(/const\s+(\w+):\s*React\.FC/);
    if (componentMatch) {
      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const componentStart = newContent.indexOf('{', newContent.indexOf(componentMatch[0]));
      if (componentStart !== -1) {
        const insertPoint = newContent.indexOf('\n', componentStart) + 1;
        newContent = newContent.slice(0, insertPoint) +
                    '  const dateLocale = useDateLocale();\n' +
                    newContent.slice(insertPoint);
      }
    }
    
    // 4. –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è { locale: ru } –Ω–∞ { locale: dateLocale }
    newContent = newContent.replace(/{\s*locale:\s*ru\s*}/g, '{ locale: dateLocale }');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, newContent);
    
    console.log(`‚úÖ ${filePath} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üì¶ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ uk –ª–æ–∫–∞–ª–∏
const ensureUkrainianLocaleImport = () => {
  const hookPath = path.join(__dirname, '../../src/hooks/useDateLocale.ts');
  
  if (!fs.existsSync(hookPath)) {
    console.log('‚ùå Hook useDateLocale.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  const content = fs.readFileSync(hookPath, 'utf8');
  
  if (!content.includes('uk') || !content.includes("'uk'")) {
    console.log('‚ö†Ô∏è –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ª–æ–∫–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ hook');
    return false;
  }
  
  console.log('‚úÖ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ª–æ–∫–∞–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ hook');
  return true;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const fixDateFnsLocalization = () => {
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ date-fns...\n');
  
  // 1. –°–æ–∑–¥–∞–µ–º hook –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  const hookPath = createDateLocaleHook();
  
  // 2. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–æ–π
  const filesToFix = findFilesWithDateFnsLocale();
  
  if (filesToFix.length === 0) {
    console.log('‚úÖ –§–∞–π–ª—ã —Å –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${filesToFix.length}`);
  filesToFix.forEach((file, index) => {
    console.log(`   ${index + 1}. ${file}`);
  });
  console.log('');
  
  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  let fixedCount = 0;
  filesToFix.forEach(file => {
    const absolutePath = path.join(__dirname, '../..', file);
    if (fixComponentLocalization(absolutePath)) {
      fixedCount++;
    }
  });
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
  ensureUkrainianLocaleImport();
  
  console.log(`\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${filesToFix.length}`);
  console.log(`   - –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
  console.log(`   - –°–æ–∑–¥–∞–Ω hook: ${hookPath}`);
  console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
  console.log(`   - –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ª–æ–∫–∞–ª—å`);
  console.log(`   - –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
  console.log(`   - –†—É—Å—Å–∫–∏–π –∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è`);
  console.log(`\n‚ö° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!`);
};

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
fixDateFnsLocalization(); 