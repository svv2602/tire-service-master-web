#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const mainFilesPath = 'src/i18n/locales/';

// –°–µ–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—É–∂–µ –µ—Å—Ç—å –≤ –º–æ–¥—É–ª—å–Ω—ã—Ö)
const sectionsToRemove = [
  'forms.carBrand',
  'forms.city'
];

/**
 * –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 */
function removeSections(translations, sectionsToRemove) {
  const result = JSON.parse(JSON.stringify(translations)); // deep clone
  
  sectionsToRemove.forEach(sectionPath => {
    const parts = sectionPath.split('.');
    let current = result;
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–±—ä–µ–∫—Ç—É
    for (let i = 0; i < parts.length - 1; i++) {
      if (current[parts[i]]) {
        current = current[parts[i]];
      } else {
        return; // –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏
    const lastPart = parts[parts.length - 1];
    if (current[lastPart]) {
      delete current[lastPart];
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: ${sectionPath}`);
    }
  });
  
  return result;
}

/**
 * –û—á–∏—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 */
function cleanupMainFile(filePath, language) {
  console.log(`\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    const translations = JSON.parse(content);
    
    // –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    const cleanedTranslations = removeSections(translations, sectionsToRemove);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const cleanedContent = JSON.stringify(cleanedTranslations, null, 2);
    fs.writeFileSync(filePath, cleanedContent, 'utf8');
    
    console.log(`‚úÖ –§–∞–π–ª ${language} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  const files = [
    { path: path.join(mainFilesPath, 'ru.json'), lang: '—Ä—É—Å—Å–∫–∏–π' },
    { path: path.join(mainFilesPath, 'uk.json'), lang: '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π' }
  ];
  
  files.forEach(file => {
    if (fs.existsSync(file.path)) {
      // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
      cleanupMainFile(file.path, file.lang);
    } else {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
    }
  });
  
  console.log('\n‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
} 