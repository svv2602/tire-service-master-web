const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —à–∞–≥–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const stepsPath = path.join(__dirname, '../../src/pages/bookings/components');

function fixFinalTranslationErrors() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
    
    const files = fs.readdirSync(stepsPath).filter(file => file.endsWith('.tsx'));
    let totalFixes = 0;
    
    files.forEach(fileName => {
      const filePath = path.join(stepsPath, fileName);
      let content = fs.readFileSync(filePath, 'utf8');
      let fileFixes = 0;
      
      // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 't('key') –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      const wrongStringTranslations = [
        {
          from: /'t\('([^']+)'\)([^']*?)'/g,
          to: "`${t('$1')}$2`",
          name: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö"
        }
      ];
      
      wrongStringTranslations.forEach(pattern => {
        const matches = content.match(pattern.from);
        if (matches) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches.length} ${pattern.name}`);
          fileFixes += matches.length;
        }
      });
      
      // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ JSX –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
      const jsxTranslations = [
        {
          from: /(\s+)t\('([^']+)'\)/g,
          to: "$1{t('$2')}",
          name: "–ø–µ—Ä–µ–≤–æ–¥—ã –≤ JSX –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫"
        }
      ];
      
      jsxTranslations.forEach(pattern => {
        const matches = content.match(pattern.from);
        if (matches) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches.length} ${pattern.name}`);
          fileFixes += matches.length;
        }
      });
      
      // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ label –∏ –¥—Ä—É–≥–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
      const attributeTranslations = [
        {
          from: /(\w+)="t\('([^']+)'\)"/g,
          to: "$1={t('$2')}",
          name: "–ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö"
        }
      ];
      
      attributeTranslations.forEach(pattern => {
        const matches = content.match(pattern.from);
        if (matches) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches.length} ${pattern.name}`);
          fileFixes += matches.length;
        }
      });
      
      // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ placeholder
      const placeholderTranslations = [
        {
          from: /placeholder="t\('([^']+)'\)"/g,
          to: "placeholder={t('$1')}",
          name: "–ø–µ—Ä–µ–≤–æ–¥—ã –≤ placeholder"
        }
      ];
      
      placeholderTranslations.forEach(pattern => {
        const matches = content.match(pattern.from);
        if (matches) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches.length} ${pattern.name}`);
          fileFixes += matches.length;
        }
      });
      
      // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –º–∞—Å—Å–∏–≤–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['t('key')', 'text'])
      const arrayTranslations = [
        {
          from: /'t\('([^']+)'\)'/g,
          to: "t('$1')",
          name: "–ø–µ—Ä–µ–≤–æ–¥—ã –≤ –º–∞—Å—Å–∏–≤–∞—Ö"
        }
      ];
      
      arrayTranslations.forEach(pattern => {
        const matches = content.match(pattern.from);
        if (matches) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches.length} ${pattern.name}`);
          fileFixes += matches.length;
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (fileFixes > 0) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`üìù ${fileName}: ${fileFixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n`);
        totalFixes += fileFixes;
      } else {
        console.log(`‚ûñ ${fileName}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n`);
      }
    });
    
    console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`üîß –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`);
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixFinalTranslationErrors(); 