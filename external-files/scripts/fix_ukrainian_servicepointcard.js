const fs = require('fs');
const path = require('path');

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const fixUkrainianServicePointCard = () => {
  const ukFilePath = path.join(__dirname, '../../src/i18n/locales/components/uk.json');
  const ruFilePath = path.join(__dirname, '../../src/i18n/locales/components/ru.json');
  
  try {
    // –ß–∏—Ç–∞–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
    const ukContent = fs.readFileSync(ukFilePath, 'utf8');
    const ruContent = fs.readFileSync(ruFilePath, 'utf8');
    
    const ukData = JSON.parse(ukContent);
    const ruData = JSON.parse(ruContent);
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
    const hasClientSearchPageCard = ukData.clientSearchPage && ukData.clientSearchPage.servicePointCard;
    const hasGlobalCard = ukData.servicePointCard;
    
    if (hasClientSearchPageCard && !hasGlobalCard) {
      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
      const backupPath = ukFilePath + '.backup.' + Date.now();
      fs.writeFileSync(backupPath, ukContent);
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);
      
      // –ö–æ–ø–∏—Ä—É–µ–º servicePointCard –∏–∑ clientSearchPage –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
      ukData.servicePointCard = ukData.clientSearchPage.servicePointCard;
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é —Å–µ–∫—Ü–∏—é –∏–∑ clientSearchPage
      delete ukData.clientSearchPage.servicePointCard;
      
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞:');
      console.log('   - –°–æ–∑–¥–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è servicePointCard');
      console.log('   - –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Å–µ–∫—Ü–∏—è –∏–∑ clientSearchPage');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const newContent = JSON.stringify(ukData, null, 2);
      fs.writeFileSync(ukFilePath, newContent);
      
      console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return true;
      
    } else if (hasGlobalCard) {
      console.log('‚úÖ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
      return false;
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è servicePointCard –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —Ñ–∞–π–ª–µ');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error.message);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const checkTranslationSync = () => {
  const ukFilePath = path.join(__dirname, '../../src/i18n/locales/components/uk.json');
  const ruFilePath = path.join(__dirname, '../../src/i18n/locales/components/ru.json');
  
  try {
    const ukContent = fs.readFileSync(ukFilePath, 'utf8');
    const ruContent = fs.readFileSync(ruFilePath, 'utf8');
    
    const ukData = JSON.parse(ukContent);
    const ruData = JSON.parse(ruContent);
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
    
    const ukKeys = Object.keys(ukData.servicePointCard || {});
    const ruKeys = Object.keys(ruData.servicePointCard || {});
    
    const missingInUk = ruKeys.filter(key => !ukKeys.includes(key));
    const missingInRu = ukKeys.filter(key => !ruKeys.includes(key));
    
    if (missingInUk.length === 0 && missingInRu.length === 0) {
      console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö:');
      if (missingInUk.length > 0) {
        console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ UK:', missingInUk);
      }
      if (missingInRu.length > 0) {
        console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ RU:', missingInRu);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
};

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');

const fixed = fixUkrainianServicePointCard();
checkTranslationSync();

if (fixed) {
  console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
  console.log('   1. –°–æ–∑–¥–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è servicePointCard –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —Ñ–∞–π–ª–µ');
  console.log('   2. –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Å–µ–∫—Ü–∏—è –∏–∑ clientSearchPage');
  console.log('   3. –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
  console.log('\n‚ö° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö!');
} else {
  console.log('\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
} 