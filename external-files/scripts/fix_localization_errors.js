#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã
 */

const fs = require('fs');
const path = require('path');

// –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
const FILES_TO_FIX = [
  'src/pages/articles/ArticlesPage.tsx',
  'src/pages/services/ServicesPage.tsx',
  'src/pages/regions/RegionsPage.tsx',
  'src/pages/service-points/ServicePointsPage.tsx'
];

function fixJSXAttributes(content) {
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º title=t('...') -> title={t('...')}
  content = content.replace(/title=t\(/g, 'title={t(');
  content = content.replace(/label=t\(/g, 'label={t(');
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
  content = content.replace(/title=\{t\('([^']+)'\)\}>/g, 'title={t(\'$1\')}>');
  content = content.replace(/label=\{t\('([^']+)'\)\}>/g, 'label={t(\'$1\')}>');
  
  return content;
}

function addMissingImports(content) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç useTranslation
  if (!content.includes('import { useTranslation }')) {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç –∏–∑ @mui/material
    const muiImportMatch = content.match(/} from '@mui\/material';/);
    if (muiImportMatch) {
      content = content.replace(
        /} from '@mui\/material';/,
        `} from '@mui/material';\nimport { useTranslation } from 'react-i18next';`
      );
    }
  }
  
  return content;
}

function addUseTranslationHook(content) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö—É–∫ useTranslation
  if (!content.includes('const { t } = useTranslation();')) {
    // –ò—â–µ–º const navigate = useNavigate();
    const navigateMatch = content.match(/const navigate = useNavigate\(\);/);
    if (navigateMatch) {
      content = content.replace(
        /const navigate = useNavigate\(\);/,
        `const navigate = useNavigate();\n  const { t } = useTranslation();`
      );
    }
  }
  
  return content;
}

function fixUseMemoHooks(content) {
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ useMemo, –¥–æ–±–∞–≤–ª—è—è 't' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  content = content.replace(
    /\], \[([^\]]*)\]\);/g,
    (match, deps) => {
      if (!deps.includes('t') && deps.trim() !== '') {
        return `], [${deps}, t]);`;
      } else if (deps.trim() === '') {
        return `], [t]);`;
      }
      return match;
    }
  );
  
  return content;
}

function fixSpecificErrors(content, filePath) {
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  
  if (filePath.includes('ArticlesPage.tsx')) {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å ArticlesPage
    content = content.replace(
      /const ArticlesPage: React\.FC = \(\) => \{/,
      'const ArticlesPage: React.FC = () => {'
    );
  }
  
  if (filePath.includes('ServicesPage.tsx')) {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å ServicesPage
    content = content.replace(
      /const ServicesPage: React\.FC = \(\) => \{/,
      'const ServicesPage: React.FC = () => {'
    );
  }
  
  return content;
}

function fixFile(filePath) {
  try {
    const fullPath = path.join(__dirname, '../..', filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }
    
    let content = fs.readFileSync(fullPath, 'utf8');
    
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é: ${filePath}`);
    
    // 1. –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç useTranslation –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    content = addMissingImports(content);
    
    // 2. –î–æ–±–∞–≤–∏—Ç—å —Ö—É–∫ useTranslation –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    content = addUseTranslationHook(content);
    
    // 3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å JSX –∞—Ç—Ä–∏–±—É—Ç—ã
    content = fixJSXAttributes(content);
    
    // 4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ useMemo
    content = fixUseMemoHooks(content);
    
    // 5. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    content = fixSpecificErrors(content, filePath);
    
    // –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(fullPath, content, 'utf8');
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');
  
  let successCount = 0;
  let totalCount = FILES_TO_FIX.length;
  
  for (const filePath of FILES_TO_FIX) {
    if (fixFile(filePath)) {
      successCount++;
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã`);
  
  if (successCount === totalCount) {
    console.log('üéâ –í—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  fixFile,
  FILES_TO_FIX
}; 