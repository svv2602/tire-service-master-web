#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/pages/bookings/BookingFormPage.tsx',
  'src/pages/bookings/BookingFormPageWithAvailability.tsx',
  'src/pages/regions/RegionFormPage.tsx',
  'src/pages/clients/ClientFormPage.tsx',
  'src/pages/clients/ClientCarFormPage.tsx',
  'src/pages/service-points/ServicePointFormPage.tsx',
  'src/pages/car-brands/CarBrandFormPage.tsx'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function fixValidationSchema(content) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å t() —Ñ—É–Ω–∫—Ü–∏—è–º–∏
  const validationSchemaPattern = /const validationSchema = yup\.object\(\{[\s\S]*?\}\);/g;
  
  let fixedContent = content;
  let fixCount = 0;
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const matches = content.match(validationSchemaPattern);
  
  if (matches) {
    matches.forEach(match => {
      // –ï—Å–ª–∏ –≤ —Å—Ö–µ–º–µ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã t(), –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
      if (match.includes("t('")) {
        // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç t –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—É
        const functionSchema = match.replace(
          'const validationSchema = yup.object({',
          'const createValidationSchema = (t: any) => yup.object({'
        ).replace(/\}\);$/, '});');
        
        fixedContent = fixedContent.replace(match, functionSchema);
        fixCount++;
      }
    });
  }
  
  // –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –≤ formik
  if (fixCount > 0) {
    // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validationSchema –≤ formik
    fixedContent = fixedContent.replace(
      /validationSchema={validationSchema}/g,
      'validationSchema={createValidationSchema(t)}'
    );
    
    // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    fixedContent = fixedContent.replace(
      /validationSchema\./g,
      'createValidationSchema(t).'
    );
  }
  
  return { content: fixedContent, count: fixCount };
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
let totalFiles = 0;
let fixedFiles = 0;
let totalFixes = 0;

filesToFix.forEach(filePath => {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }
  
  totalFiles++;
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${filePath}...`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  const result = fixValidationSchema(content);
  
  if (result.count > 0) {
    fs.writeFileSync(filePath, result.content, 'utf8');
    fixedFiles++;
    totalFixes += result.count;
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.count}`);
  } else {
    console.log(`‚ÑπÔ∏è  –ù–µ—Ç —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
  }
});

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
console.log(`üîÑ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`); 