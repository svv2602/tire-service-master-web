const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —à–∞–≥–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const stepsPath = path.join(__dirname, '../../src/pages/bookings/components');

function fixAllImportErrors() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —à–∞–≥–æ–≤...\n');
    
    const files = fs.readdirSync(stepsPath).filter(file => file.endsWith('.tsx'));
    let totalFixes = 0;
    
    files.forEach(fileName => {
      const filePath = path.join(stepsPath, fileName);
      let content = fs.readFileSync(filePath, 'utf8');
      let fileFixes = 0;
      
      // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã React (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
      const patterns = [
        // –ü–∞—Ç—Ç–µ—Ä–Ω 1: import React\nimport { useTranslation } from 'react-i18next'; from 'react';
        {
          from: /import React\nimport { useTranslation } from 'react-i18next'; from 'react';/g,
          to: "import React from 'react';\nimport { useTranslation } from 'react-i18next';",
          name: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç React (—Ç–∏–ø 1)"
        },
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω 2: import React\nimport { useTranslation } from 'react-i18next';, { ... } from 'react';
        {
          from: /import React\nimport { useTranslation } from 'react-i18next';, { ([^}]+) } from 'react';/g,
          to: "import React, { $1 } from 'react';\nimport { useTranslation } from 'react-i18next';",
          name: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç React (—Ç–∏–ø 2)"
        },
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω 3: import React, { ... }\nimport { useTranslation } from 'react-i18next'; from 'react';
        {
          from: /import React, { ([^}]+) }\nimport { useTranslation } from 'react-i18next'; from 'react';/g,
          to: "import React, { $1 } from 'react';\nimport { useTranslation } from 'react-i18next';",
          name: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç React (—Ç–∏–ø 3)"
        }
      ];
      
      patterns.forEach(pattern => {
        if (pattern.from.test(content)) {
          content = content.replace(pattern.from, pattern.to);
          console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${pattern.name}`);
          fileFixes++;
        }
      });
      
      // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã useTranslation
      const duplicatePattern = /import { useTranslation } from 'react-i18next';\s*import { useTranslation } from 'react-i18next';/g;
      if (duplicatePattern.test(content)) {
        content = content.replace(duplicatePattern, "import { useTranslation } from 'react-i18next';");
        console.log(`‚úÖ ${fileName}: –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç useTranslation`);
        fileFixes++;
      }
      
      // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ 'from' –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
      const missingFromPattern = /import React\s*$/gm;
      if (missingFromPattern.test(content)) {
        content = content.replace(missingFromPattern, "import React from 'react';");
        console.log(`‚úÖ ${fileName}: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π 'from' –≤ –∏–º–ø–æ—Ä—Ç–µ React`);
        fileFixes++;
      }
      
      // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ JSX
      const wrongTranslationPattern = /\{t\('([^']+)'\)\}/g;
      const wrongMatches = content.match(wrongTranslationPattern);
      if (wrongMatches) {
        content = content.replace(wrongTranslationPattern, "t('$1')");
        console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${wrongMatches.length} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ JSX`);
        fileFixes += wrongMatches.length;
      }
      
      // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSX –∞—Ç—Ä–∏–±—É—Ç—ã –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
      const jsxAttributePattern = /(\w+)=t\('([^']+)'\)(?!\})/g;
      const jsxMatches = content.match(jsxAttributePattern);
      if (jsxMatches) {
        content = content.replace(jsxAttributePattern, "$1={t('$2')}");
        console.log(`‚úÖ ${fileName}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${jsxMatches.length} JSX –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
        fileFixes += jsxMatches.length;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (fileFixes > 0) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`üìù ${fileName}: ${fileFixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n`);
        totalFixes += fileFixes;
      } else {
        console.log(`‚ûñ ${fileName}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n`);
      }
    });
    
    console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`üîß –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`);
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixAllImportErrors(); 