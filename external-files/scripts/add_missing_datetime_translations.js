const fs = require('fs');
const path = require('path');

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è forms.booking.dateTime
const dateTimeTranslations = {
  ru: {
    forms: {
      booking: {
        dateTime: {
          title: "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
          selectServicePointFirst: "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ",
          serviceUserMode: "–†–µ–∂–∏–º —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          loadingServicePoint: "–ó–∞–≥—Ä—É–∑–∫–∞...",
          servicePoint: "–°–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞",
          city: "–≥.",
          selectDate: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
          proceedToTimeSelection: "–î–∞–ª–µ–µ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏",
          selectTime: "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è",
          fillRequiredFields: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"
        }
      }
    }
  },
  uk: {
    forms: {
      booking: {
        dateTime: {
          title: "–î–∞—Ç–∞ —ñ —á–∞—Å",
          selectServicePointFirst: "–°–ø–æ—á–∞—Ç–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å–Ω—É —Ç–æ—á–∫—É –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫—Ä–æ—Ü—ñ",
          serviceUserMode: "–†–µ–∂–∏–º —Å–ª—É–∂–±–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
          loadingServicePoint: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
          servicePoint: "–°–µ—Ä–≤—ñ—Å–Ω–∞ —Ç–æ—á–∫–∞",
          city: "–º.",
          selectDate: "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É",
          proceedToTimeSelection: "–î–∞–ª—ñ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É",
          selectTime: "–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å",
          fillRequiredFields: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è"
        }
      }
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
function deepMerge(target, source) {
  const result = { ...target };
  
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      result[key] = deepMerge(result[key] || {}, source[key]);
    } else {
      result[key] = source[key];
    }
  }
  
  return result;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function addMissingDateTimeTranslations() {
  console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã forms.booking.dateTime...');

  const localesDir = path.join(__dirname, '../../src/i18n/locales');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª
  const ruFilePath = path.join(localesDir, 'ru.json');
  const ukFilePath = path.join(localesDir, 'uk.json');

  try {
    // –†—É—Å—Å–∫–∏–π —Ñ–∞–π–ª
    console.log('üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª...');
    const ruData = JSON.parse(fs.readFileSync(ruFilePath, 'utf8'));
    const updatedRuData = deepMerge(ruData, dateTimeTranslations.ru);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupRuPath = path.join(localesDir, `ru.json.backup.${timestamp}`);
    fs.writeFileSync(backupRuPath, JSON.stringify(ruData, null, 2), 'utf8');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fs.writeFileSync(ruFilePath, JSON.stringify(updatedRuData, null, 2), 'utf8');
    console.log('‚úÖ –†—É—Å—Å–∫–∏–π —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');

    // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª
    console.log('üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª...');
    const ukData = JSON.parse(fs.readFileSync(ukFilePath, 'utf8'));
    const updatedUkData = deepMerge(ukData, dateTimeTranslations.uk);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupUkPath = path.join(localesDir, `uk.json.backup.${timestamp}`);
    fs.writeFileSync(backupUkPath, JSON.stringify(ukData, null, 2), 'utf8');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fs.writeFileSync(ukFilePath, JSON.stringify(updatedUkData, null, 2), 'utf8');
    console.log('‚úÖ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');

    console.log('‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã forms.booking.dateTime —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å timestamp:', timestamp);
    
    // –í—ã–≤–æ–¥–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:');
    const addedKeys = [
      'forms.booking.dateTime.title',
      'forms.booking.dateTime.selectServicePointFirst',
      'forms.booking.dateTime.serviceUserMode',
      'forms.booking.dateTime.loadingServicePoint',
      'forms.booking.dateTime.servicePoint',
      'forms.booking.dateTime.city',
      'forms.booking.dateTime.selectDate',
      'forms.booking.dateTime.proceedToTimeSelection',
      'forms.booking.dateTime.selectTime',
      'forms.booking.dateTime.fillRequiredFields'
    ];
    
    addedKeys.forEach(key => {
      console.log(`  - ${key}`);
    });

    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
    console.log(`  RU: forms.booking.dateTime.title = "${updatedRuData.forms?.booking?.dateTime?.title}"`);
    console.log(`  UK: forms.booking.dateTime.title = "${updatedUkData.forms?.booking?.dateTime?.title}"`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
addMissingDateTimeTranslations(); 