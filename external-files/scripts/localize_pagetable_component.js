#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ PageTable –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç useTranslation –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã
 */

const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ PageTable –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
const PAGETABLE_PATH = 'src/components/common/PageTable/PageTable.tsx';

// –ó–∞–º–µ–Ω—ã –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const REPLACEMENTS = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
  {
    search: "'–î–µ–π—Å—Ç–≤–∏—è'",
    replace: "t('components.pageTable.actions')",
    description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π'
  },
  {
    search: '"–î–µ–π—Å—Ç–≤–∏—è"',
    replace: "t('components.pageTable.actions')",
    description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)'
  }
];

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ useTranslation –≤ —Ñ–∞–π–ª–µ
 */
function hasUseTranslation(content) {
  return content.includes('useTranslation') && content.includes("from 'react-i18next'");
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç useTranslation
 */
function addUseTranslationImport(content) {
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç React
  const reactImportRegex = /import React[^;]*;/;
  const match = content.match(reactImportRegex);
  
  if (match) {
    const importStatement = "\nimport { useTranslation } from 'react-i18next';";
    return content.replace(match[0], match[0] + importStatement);
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–º–ø–æ—Ä—Ç React, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
  return "import { useTranslation } from 'react-i18next';\n" + content;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ö—É–∫ useTranslation –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 */
function addUseTranslationHook(content) {
  // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ PageTable
  const componentRegex = /export const PageTable = <T,>\(\{[^}]*\}: PageTableProps<T>\) => \{/;
  const match = content.match(componentRegex);
  
  if (match) {
    const hookStatement = "\n  const { t } = useTranslation();";
    return content.replace(match[0], match[0] + hookStatement);
  }
  
  return content;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤
 */
function applyReplacements(content) {
  let modifiedContent = content;
  let totalReplacements = 0;
  
  REPLACEMENTS.forEach(replacement => {
    const regex = new RegExp(replacement.search.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    const matches = modifiedContent.match(regex);
    const count = matches ? matches.length : 0;
    
    if (count > 0) {
      modifiedContent = modifiedContent.replace(regex, replacement.replace);
      console.log(`‚úÖ ${replacement.description}: ${count} –∑–∞–º–µ–Ω`);
      totalReplacements += count;
    } else {
      console.log(`‚ö†Ô∏è  ${replacement.description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
  });
  
  return { content: modifiedContent, totalReplacements };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç useMemo dependencies
 */
function updateUseMemo(content) {
  // –ò—â–µ–º useMemo —Å columns –∏ actions
  const useMemoRegex = /const enhancedColumns = useMemo\(\(\) => \{[\s\S]*?\}, \[columns, actions\]\);/;
  const match = content.match(useMemoRegex);
  
  if (match) {
    const updatedUseMemo = match[0].replace('[columns, actions]', '[columns, actions, t]');
    return content.replace(match[0], updatedUseMemo);
  }
  
  return content;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
function localizePageTable() {
  const filePath = path.join(process.cwd(), PAGETABLE_PATH);
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é PageTable –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...');
  console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    process.exit(1);
  }
  
  // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  let content = fs.readFileSync(filePath, 'utf8');
  console.log(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
  if (hasUseTranslation(content)) {
    console.log('‚ÑπÔ∏è  useTranslation —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
  } else {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç useTranslation...');
    content = addUseTranslationImport(content);
    
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ useTranslation...');
    content = addUseTranslationHook(content);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
  console.log('\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤:');
  const { content: modifiedContent, totalReplacements } = applyReplacements(content);
  content = modifiedContent;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º useMemo
  console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º useMemo dependencies...');
  content = updateUseMemo(content);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  fs.writeFileSync(filePath, content);
  
  console.log('\n‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è PageTable –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: ${totalReplacements}`);
  console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
  
  return {
    file: PAGETABLE_PATH,
    replacements: totalReplacements,
    success: true
  };
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  try {
    const result = localizePageTable();
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(JSON.stringify(result, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
    process.exit(1);
  }
}

module.exports = { localizePageTable }; 