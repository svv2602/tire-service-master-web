const fs = require('fs');
const path = require('path');

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ServicePointDetail
const servicePointDetailTranslations = {
  ru: {
    client: {
      servicePointDetail: {
        bookNow: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        photos: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        services: "–£—Å–ª—É–≥–∏",
        phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
        address: "–ê–¥—Ä–µ—Å",
        workingHours: "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ",
        rating: "–†–µ–π—Ç–∏–Ω–≥",
        reviews: "–æ—Ç–∑—ã–≤–æ–≤",
        categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥",
        selectCategory: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        viewAll: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
        collapse: "–°–≤–µ—Ä–Ω—É—Ç—å",
        noServices: "–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        contactForServices: "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        partner: "–ü–∞—Ä—Ç–Ω–µ—Ä",
        city: "–ì–æ—Ä–æ–¥"
      }
    },
    forms: {
      clientPages: {
        servicePointDetail: {
          notFound: "–°–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          backButton: "–ù–∞–∑–∞–¥",
          breadcrumbHome: "–ì–ª–∞–≤–Ω–∞—è",
          breadcrumbSearch: "–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤",
          loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
          error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          tryAgain: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
        }
      }
    }
  },
  uk: {
    client: {
      servicePointDetail: {
        bookNow: "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è",
        photos: "–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó",
        services: "–ü–æ—Å–ª—É–≥–∏",
        phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
        address: "–ê–¥—Ä–µ—Å–∞",
        workingHours: "–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏",
        description: "–û–ø–∏—Å",
        rating: "–†–µ–π—Ç–∏–Ω–≥",
        reviews: "–≤—ñ–¥–≥—É–∫—ñ–≤",
        categories: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥",
        selectCategory: "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        viewAll: "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ",
        collapse: "–ó–≥–æ—Ä–Ω—É—Ç–∏",
        noServices: "–ü–æ—Å–ª—É–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ",
        contactForServices: "–ü–æ—Å–ª—É–≥–∏ –≤ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —É—Ç–æ—á–Ω—é–π—Ç–µ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º",
        partner: "–ü–∞—Ä—Ç–Ω–µ—Ä",
        city: "–ú—ñ—Å—Ç–æ"
      }
    },
    forms: {
      clientPages: {
        servicePointDetail: {
          notFound: "–°–µ—Ä–≤—ñ—Å–Ω—É —Ç–æ—á–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
          backButton: "–ù–∞–∑–∞–¥",
          breadcrumbHome: "–ì–æ–ª–æ–≤–Ω–∞",
          breadcrumbSearch: "–ü–æ—à—É–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤",
          loading: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
          error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
          tryAgain: "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É"
        }
      }
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
const deepMerge = (target, source) => {
  const result = { ...target };
  
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      result[key] = deepMerge(result[key] || {}, source[key]);
    } else {
      result[key] = source[key];
    }
  }
  
  return result;
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª
const addTranslationsToFile = (language) => {
  const filePath = path.join(__dirname, `../../src/i18n/locales/${language}.json`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    const data = JSON.parse(content);
    
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ ${language}.json...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∫—Ü–∏–∏
    const hasClientSection = data.client && data.client.servicePointDetail;
    const hasFormsSection = data.forms && data.forms.clientPages && data.forms.clientPages.servicePointDetail;
    
    if (hasClientSection && hasFormsSection) {
      console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ${language} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç`);
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    const backupPath = filePath + '.backup.' + Date.now();
    fs.writeFileSync(backupPath, content);
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    const newData = deepMerge(data, servicePointDetailTranslations[language]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const newContent = JSON.stringify(newData, null, 2);
    fs.writeFileSync(filePath, newContent);
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ${language}:`);
    if (!hasClientSection) {
      console.log('   - client.servicePointDetail —Å–µ–∫—Ü–∏—è');
    }
    if (!hasFormsSection) {
      console.log('   - forms.clientPages.servicePointDetail —Å–µ–∫—Ü–∏—è');
    }
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${language}.json:`, error.message);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const checkExistingTranslations = () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  ['ru', 'uk'].forEach(lang => {
    const filePath = path.join(__dirname, `../../src/i18n/locales/${lang}.json`);
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(content);
      
      console.log(`üìÑ –§–∞–π–ª ${lang}.json:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º client.servicePointDetail
      if (data.client && data.client.servicePointDetail) {
        console.log('   ‚úÖ client.servicePointDetail —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('   ‚ùå client.servicePointDetail –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º forms.clientPages.servicePointDetail
      if (data.forms && data.forms.clientPages && data.forms.clientPages.servicePointDetail) {
        console.log('   ‚úÖ forms.clientPages.servicePointDetail —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('   ‚ùå forms.clientPages.servicePointDetail –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
      
      console.log('');
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${lang}.json:`, error.message);
    }
  });
};

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
console.log('üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è ServicePointDetail —Å—Ç—Ä–∞–Ω–∏—Ü—ã...\n');

checkExistingTranslations();

const ruFixed = addTranslationsToFile('ru');
const ukFixed = addTranslationsToFile('uk');

if (ruFixed || ukFixed) {
  console.log('\n‚úÖ –ü–ï–†–ï–í–û–î–´ –î–û–ë–ê–í–õ–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
  if (ruFixed) console.log('   - –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è client.servicePointDetail –∏ forms.clientPages.servicePointDetail');
  if (ukFixed) console.log('   - –î–æ–±–∞–≤–ª–µ–Ω—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è client.servicePointDetail –∏ forms.clientPages.servicePointDetail');
  console.log('   - –°–æ–∑–¥–∞–Ω—ã –±—ç–∫–∞–ø—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
  console.log('\n‚ö° –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /client/service-point/* –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã!');
} else {
  console.log('\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
} 