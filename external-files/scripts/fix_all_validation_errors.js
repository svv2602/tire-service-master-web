#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/pages/bookings/BookingFormPage.tsx',
  'src/pages/bookings/BookingFormPageWithAvailability.tsx',
  'src/pages/regions/RegionFormPage.tsx',
  'src/pages/clients/ClientFormPage.tsx',
  'src/pages/clients/ClientCarFormPage.tsx',
  'src/pages/service-points/ServicePointFormPage.tsx',
  'src/pages/car-brands/CarBrandFormPage.tsx'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function fixValidationIssues(content) {
  let fixedContent = content;
  let fixCount = 0;
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å t() —Ñ—É–Ω–∫—Ü–∏—è–º–∏
  const validationSchemaPattern = /const validationSchema = (Yup|yup)\.object\(\{[\s\S]*?\}\);/g;
  const matches = fixedContent.match(validationSchemaPattern);
  
  if (matches) {
    matches.forEach(match => {
      if (match.includes("t('")) {
        // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç t –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—É
        const functionSchema = match.replace(
          /const validationSchema = (Yup|yup)\.object\(\{/,
          'const createValidationSchema = (t: any) => $1.object({'
        ).replace(/\}\);$/, '});');
        
        fixedContent = fixedContent.replace(match, functionSchema);
        fixCount++;
        console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å t() —Ñ—É–Ω–∫—Ü–∏—è–º–∏`);
      }
    });
  }
  
  // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validationSchema –≤ formik
  if (fixCount > 0) {
    // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validationSchema –≤ formik
    fixedContent = fixedContent.replace(
      /validationSchema,(\s*)/g,
      'validationSchema: createValidationSchema(t),$1'
    );
    
    // –ò—â–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    fixedContent = fixedContent.replace(
      /validationSchema\./g,
      'createValidationSchema(t).'
    );
  }
  
  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã t() –≤ —Å—Ö–µ–º–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
  const tCallReplacements = [
    [/t\('forms\.common\.required'\)/g, "'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'"],
    [/t\('forms\.client\.validation\.firstNameRequired'\)/g, "'–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'"],
    [/t\('forms\.region\.validation\.nameRequired'\)/g, "'–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'"],
    [/t\('forms\.carBrand\.validation\.nameRequired'\)/g, "'–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'"],
    [/t\('forms\.booking\.validation\.servicePointRequired'\)/g, "'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'"],
    [/t\('forms\.booking\.validation\.carTypeRequired'\)/g, "'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è'"],
    [/t\('forms\.booking\.validation\.categoryRequired'\)/g, "'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥'"],
    [/t\('forms\.booking\.validation\.dateRequired'\)/g, "'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'"],
    [/t\('forms\.booking\.validation\.startTimeRequired'\)/g, "'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'"],
    [/t\('forms\.servicePoint\.validation\.nameRequired'\)/g, "'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'"],
    [/t\('forms\.servicePoint\.validation\.partnerRequired'\)/g, "'–ü–∞—Ä—Ç–Ω–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'"],
    [/t\('forms\.servicePoint\.validation\.regionRequired'\)/g, "'–†–µ–≥–∏–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'"],
    [/t\('forms\.servicePoint\.validation\.cityRequired'\)/g, "'–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'"]
  ];
  
  tCallReplacements.forEach(([regex, replacement]) => {
    const beforeReplace = fixedContent;
    fixedContent = fixedContent.replace(regex, replacement);
    if (beforeReplace !== fixedContent) {
      fixCount++;
      console.log(`  ‚úÖ –ó–∞–º–µ–Ω–µ–Ω –≤—ã–∑–æ–≤ t() –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É`);
    }
  });
  
  return { content: fixedContent, count: fixCount };
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
let totalFiles = 0;
let fixedFiles = 0;
let totalFixes = 0;

filesToFix.forEach(filePath => {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }
  
  totalFiles++;
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${filePath}...`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  const result = fixValidationIssues(content);
  
  if (result.count > 0) {
    fs.writeFileSync(filePath, result.content, 'utf8');
    fixedFiles++;
    totalFixes += result.count;
    console.log(`‚úÖ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${result.count}`);
  } else {
    console.log(`‚ÑπÔ∏è  –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
  }
});

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
console.log(`üîÑ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`); 