#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ client –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * –¢–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
 */

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const ruFilePath = path.join(__dirname, '../../src/i18n/locales/ru.json');
const ukFilePath = path.join(__dirname, '../../src/i18n/locales/uk.json');

function removeClientSection(filePath, language) {
  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${language}...`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ client
    const clientSectionStart = content.indexOf('    },\n    "client": {');
    if (clientSectionStart === -1) {
      console.log(`‚ùå –°–µ–∫—Ü–∏—è client –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${language} —Ñ–∞–π–ª–µ`);
      return;
    }
    
    // –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ client (—Å–ª–µ–¥—É—é—â–∞—è —Å–µ–∫—Ü–∏—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ)
    let clientSectionEnd = -1;
    let braceCount = 0;
    let inClientSection = false;
    
    for (let i = clientSectionStart; i < content.length; i++) {
      const char = content[i];
      
      if (char === '{') {
        braceCount++;
        if (!inClientSection) {
          inClientSection = true;
        }
      } else if (char === '}') {
        braceCount--;
        if (braceCount === 0 && inClientSection) {
          // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
          let endOfLine = i + 1;
          while (endOfLine < content.length && content[endOfLine] !== '\n') {
            endOfLine++;
          }
          clientSectionEnd = endOfLine + 1; // +1 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è \n
          break;
        }
      }
    }
    
    if (clientSectionEnd === -1) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ client –≤ ${language} —Ñ–∞–π–ª–µ`);
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é client
    const beforeClient = content.substring(0, clientSectionStart);
    const afterClient = content.substring(clientSectionEnd);
    const newContent = beforeClient + afterClient;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, newContent, 'utf8');
    
    const removedLines = (content.match(/\n/g) || []).length - (newContent.match(/\n/g) || []).length;
    console.log(`‚úÖ –°–µ–∫—Ü–∏—è client —É–¥–∞–ª–µ–Ω–∞ –∏–∑ ${language} —Ñ–∞–π–ª–∞ (—É–¥–∞–ª–µ–Ω–æ ${removedLines} —Å—Ç—Ä–æ–∫)`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${language} —Ñ–∞–π–ª–∞:`, error.message);
  }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
removeClientSection(ruFilePath, 'RU');
removeClientSection(ukFilePath, 'UK');

console.log('\nüéØ –°–µ–∫—Ü–∏–∏ client —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤!');
console.log('üìÅ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:');
console.log('   - client-ru.json');
console.log('   - client-uk.json'); 