#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/pages/bookings/BookingFormPage.tsx',
  'src/pages/clients/ClientFormPage.tsx',
  'src/pages/service-points/ServicePointFormPage.tsx'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
function fixSyntaxErrors(content) {
  let fixedContent = content;
  let fixCount = 0;
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π validationSchema: validationSchema:
  const duplicatePattern = /validationSchema:\s*validationSchema:\s*createValidationSchema\(t\)/g;
  if (duplicatePattern.test(fixedContent)) {
    fixedContent = fixedContent.replace(duplicatePattern, 'validationSchema: createValidationSchema(t)');
    fixCount++;
    console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π validationSchema`);
  }
  
  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π validationSchema, –±–µ–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
  const singlePattern = /(\s+)validationSchema,(\s*)/g;
  if (singlePattern.test(fixedContent)) {
    fixedContent = fixedContent.replace(singlePattern, '$1validationSchema: createValidationSchema(t),$2');
    fixCount++;
    console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π validationSchema`);
  }
  
  return { content: fixedContent, count: fixCount };
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
let totalFiles = 0;
let fixedFiles = 0;
let totalFixes = 0;

filesToFix.forEach(filePath => {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }
  
  totalFiles++;
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${filePath}...`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  const result = fixSyntaxErrors(content);
  
  if (result.count > 0) {
    fs.writeFileSync(filePath, result.content, 'utf8');
    fixedFiles++;
    totalFixes += result.count;
    console.log(`‚úÖ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${result.count}`);
  } else {
    console.log(`‚ÑπÔ∏è  –ù–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
  }
});

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
console.log(`üîÑ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`); 