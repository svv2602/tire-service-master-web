const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...');

// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const ruPath = path.join(__dirname, '../../src/i18n/locales/ru.json');
const ruData = JSON.parse(fs.readFileSync(ruPath, 'utf8'));

console.log('üìã –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
console.log('–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:', Object.keys(ruData));

// –ò—â–µ–º —Å–µ–∫—Ü–∏—é tables –≤–Ω—É—Ç—Ä–∏ forms
let tablesSection = null;
let statusesSection = null;
let filtersSection = null;
let notificationsSection = null;
let errorsSection = null;
let componentsSection = null;

// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ–∫—Ü–∏—è–º –∏ –∏—â–µ–º tables
function findSections(obj, path = '') {
  for (const [key, value] of Object.entries(obj)) {
    if (key === 'tables' && typeof value === 'object' && value.columns) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è tables –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      tablesSection = value;
    }
    if (key === 'statuses' && typeof value === 'object' && value.active) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è statuses –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      statusesSection = value;
    }
    if (key === 'filters' && typeof value === 'object' && value.all) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è filters –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      filtersSection = value;
    }
    if (key === 'notifications' && typeof value === 'object' && value.success) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è notifications –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      notificationsSection = value;
    }
    if (key === 'errors' && typeof value === 'object' && value.required) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è errors –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      errorsSection = value;
    }
    if (key === 'components' && typeof value === 'object') {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è components –ø–æ –ø—É—Ç–∏: ${path}.${key}`);
      componentsSection = value;
    }
    
    if (typeof value === 'object' && value !== null) {
      findSections(value, path ? `${path}.${key}` : key);
    }
  }
}

findSections(ruData);

if (!tablesSection) {
  console.error('‚ùå –°–µ–∫—Ü–∏—è tables –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  process.exit(1);
}

// –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
function removeSections(obj) {
  for (const [key, value] of Object.entries(obj)) {
    if (key === 'tables' || key === 'statuses' || key === 'filters' || 
        key === 'notifications' || key === 'errors' || key === 'components') {
      delete obj[key];
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ${key} –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞`);
    } else if (typeof value === 'object' && value !== null) {
      removeSections(value);
    }
  }
}

removeSections(ruData);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
ruData.tables = tablesSection;
console.log('‚úÖ –°–µ–∫—Ü–∏—è tables –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');

if (statusesSection) {
  ruData.statuses = statusesSection;
  console.log('‚úÖ –°–µ–∫—Ü–∏—è statuses –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');
}

if (filtersSection) {
  ruData.filters = filtersSection;
  console.log('‚úÖ –°–µ–∫—Ü–∏—è filters –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');
}

if (notificationsSection) {
  ruData.notifications = notificationsSection;
  console.log('‚úÖ –°–µ–∫—Ü–∏—è notifications –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');
}

if (errorsSection) {
  ruData.errors = errorsSection;
  console.log('‚úÖ –°–µ–∫—Ü–∏—è errors –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');
}

if (componentsSection) {
  ruData.components = componentsSection;
  console.log('‚úÖ –°–µ–∫—Ü–∏—è components –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å');
}

console.log('üìã –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
console.log('–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:', Object.keys(ruData));

// –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
const backupPath = path.join(__dirname, 'ru_before_fix.json');
fs.writeFileSync(backupPath, fs.readFileSync(ruPath, 'utf8'));
console.log('üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø:', backupPath);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.writeFileSync(ruPath, JSON.stringify(ruData, null, 2));
console.log('‚úÖ –†—É—Å—Å–∫–∏–π —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
const fixedData = JSON.parse(fs.readFileSync(ruPath, 'utf8'));
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞:');
console.log('tables.columns.name:', fixedData.tables?.columns?.name);
console.log('tables.columns.city:', fixedData.tables?.columns?.city);
console.log('tables.columns.actions:', fixedData.tables?.columns?.actions); 