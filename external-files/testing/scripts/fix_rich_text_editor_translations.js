// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ RichTextEditor
const fs = require('fs');
const path = require('path');

const filePath = path.join(__dirname, '../../../src/components/common/RichTextEditor.tsx');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ RichTextEditor...\n');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    
    console.log('üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const replacements = [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        { from: /t\('richTextEditor\./g, to: "t('forms.richTextEditor." },
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –¥–≤–∞–∂–¥—ã
        { from: /t\('forms\.forms\.richTextEditor\./g, to: "t('forms.richTextEditor." }
    ];
    
    let totalReplacements = 0;
    
    replacements.forEach((replacement, index) => {
        const matches = content.match(replacement.from);
        const matchCount = matches ? matches.length : 0;
        
        console.log(`üîÑ –ó–∞–º–µ–Ω–∞ ${index + 1}: ${matchCount} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
        console.log(`   –û—Ç: ${replacement.from}`);
        console.log(`   –ö:  ${replacement.to}`);
        
        content = content.replace(replacement.from, replacement.to);
        totalReplacements += matchCount;
    });
    
    console.log(`\n‚úÖ –í—Å–µ–≥–æ –∑–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${totalReplacements}`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, content, 'utf8');
    
    console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedContent = fs.readFileSync(filePath, 'utf8');
    const remainingOldKeys = updatedContent.match(/t\('richTextEditor\./g);
    const newKeys = updatedContent.match(/t\('forms\.richTextEditor\./g);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`‚ùå –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0): ${remainingOldKeys ? remainingOldKeys.length : 0}`);
    console.log(`‚úÖ –ù–æ–≤—ã–µ –∫–ª—é—á–∏: ${newKeys ? newKeys.length : 0}`);
    
    if (remainingOldKeys && remainingOldKeys.length > 0) {
        console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:');
        remainingOldKeys.forEach((key, index) => {
            console.log(`   ${index + 1}. ${key}`);
        });
    } else {
        console.log('\nüéâ –í—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error.message);
    process.exit(1);
}

console.log('\nÔøΩÔøΩ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'); 