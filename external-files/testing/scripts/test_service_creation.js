#!/usr/bin/env node

const http = require('http');

const API_URL = 'http://localhost:8000/api/v1';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    });

    req.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });

    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

async function testServiceCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...\n');

  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const loginOptions = {
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };

    const loginData = JSON.stringify({
      auth: {
        login: 'test@test.com',
        password: 'password'
      }
    });

    const loginResponse = await makeRequest(loginOptions, loginData);
    console.log(`   –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${loginResponse.statusCode}`);
    
    if (loginResponse.statusCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResponse.body);
      return;
    }

    const authData = JSON.parse(loginResponse.body);
    const token = authData.auth_token;
    console.log('   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...');
    const categoriesOptions = {
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/service_categories',
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json'
      }
    };

    const categoriesResponse = await makeRequest(categoriesOptions);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${categoriesResponse.statusCode}`);
    
    if (categoriesResponse.statusCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesResponse.body);
      return;
    }

    const categoriesData = JSON.parse(categoriesResponse.body);
    const categories = categoriesData.data || categoriesData;
    
    if (!categories || categories.length === 0) {
      console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const categoryId = categories[0].id;
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID: ${categoryId}`);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–≤–∞—Ä–∏–∞–Ω—Ç 1: —á–µ—Ä–µ–∑ /services)
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ /services...');
    const serviceData1 = {
      service: {
        name: `–¢–µ—Å—Ç —É—Å–ª—É–≥–∞ ${new Date().toISOString()}`,
        description: '–°–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç',
        default_duration: 30,
        is_active: true,
        sort_order: 999,
        category_id: categoryId
      }
    };

    const createOptions1 = {
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/services',
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };

    const createResponse1 = await makeRequest(createOptions1, JSON.stringify(serviceData1));
    console.log(`   –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è (—á–µ—Ä–µ–∑ /services): ${createResponse1.statusCode}`);
    
    if (createResponse1.statusCode === 201 || createResponse1.statusCode === 200) {
      const service1 = JSON.parse(createResponse1.body);
      console.log(`   ‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: "${service1.name}" (ID: ${service1.id})`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createResponse1.body}`);
    }

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–≤–∞—Ä–∏–∞–Ω—Ç 2: —á–µ—Ä–µ–∑ /service_categories/{id}/services)
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
    const serviceData2 = {
      service: {
        name: `–¢–µ—Å—Ç —É—Å–ª—É–≥–∞ —á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${new Date().toISOString()}`,
        description: '–°–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—é API —Ç–µ—Å—Ç',
        default_duration: 45,
        is_active: true,
        sort_order: 998
      }
    };

    const createOptions2 = {
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services`,
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };

    const createResponse2 = await makeRequest(createOptions2, JSON.stringify(serviceData2));
    console.log(`   –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—é): ${createResponse2.statusCode}`);
    
    if (createResponse2.statusCode === 201 || createResponse2.statusCode === 200) {
      const service2 = JSON.parse(createResponse2.body);
      console.log(`   ‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: "${service2.name}" (ID: ${service2.id})`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createResponse2.body}`);
    }

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥...');
    const servicesOptions = {
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json'
      }
    };

    const servicesResponse = await makeRequest(servicesOptions);
    console.log(`   –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: ${servicesResponse.statusCode}`);
    
    if (servicesResponse.statusCode === 200) {
      const servicesData = JSON.parse(servicesResponse.body);
      const services = servicesData.data || servicesData;
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${services.length} —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
      const recentServices = services.filter(s => s.name.includes('–¢–µ—Å—Ç —É—Å–ª—É–≥–∞'));
      console.log(`   üìã –¢–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥: ${recentServices.length}`);
      recentServices.forEach((service, i) => {
        console.log(`      ${i + 1}. "${service.name}" (ID: ${service.id})`);
      });
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: ${servicesResponse.body}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testServiceCreation();
