// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö articles
const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const ruTranslationsPath = path.join(__dirname, '../../../src/i18n/locales/forms/articles/articles-ru.json');
const ukTranslationsPath = path.join(__dirname, '../../../src/i18n/locales/forms/articles/articles-uk.json');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ RichTextEditor...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞
function readTranslations(filePath, language) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const translations = JSON.parse(content);
        
        console.log(`üìÑ –§–∞–π–ª: ${language.toUpperCase()}`);
        console.log(`üìÅ –ü—É—Ç—å: ${filePath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ richTextEditor
        if (translations.richTextEditor) {
            console.log('‚úÖ –°–µ–∫—Ü–∏—è richTextEditor –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ');
            console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ richTextEditor:');
            console.log(JSON.stringify(translations.richTextEditor, null, 2));
        } else if (translations.forms && translations.forms.richTextEditor) {
            console.log('‚úÖ –°–µ–∫—Ü–∏—è richTextEditor –Ω–∞–π–¥–µ–Ω–∞ –≤ forms');
            console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ richTextEditor:');
            console.log(JSON.stringify(translations.forms.richTextEditor, null, 2));
        } else {
            console.log('‚ùå –°–µ–∫—Ü–∏—è richTextEditor –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:');
            console.log(Object.keys(translations));
            if (translations.forms) {
                console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ forms:');
                console.log(Object.keys(translations.forms));
            }
        }
        
        console.log('\n' + '='.repeat(50) + '\n');
        
        return translations;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return null;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
const ruTranslations = readTranslations(ruTranslationsPath, 'ru');
const ukTranslations = readTranslations(ukTranslationsPath, 'uk');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
const testKeys = [
    'forms.richTextEditor.modals.link.title',
    'forms.richTextEditor.modals.link.fields.linkText',
    'forms.richTextEditor.modals.image.title',
    'forms.richTextEditor.modals.video.title',
    'forms.richTextEditor.modals.table.title'
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n');

testKeys.forEach(key => {
    console.log(`üîë –ö–ª—é—á: ${key}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    const ruValue = getNestedValue(ruTranslations, key);
    console.log(`  üá∑üá∫ RU: ${ruValue || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    const ukValue = getNestedValue(ukTranslations, key);
    console.log(`  üá∫üá¶ UK: ${ukValue || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    
    console.log('');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É
function getNestedValue(obj, key) {
    if (!obj) return null;
    
    return key.split('.').reduce((current, prop) => {
        return current && current[prop];
    }, obj);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
console.log('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∫–∞–∫ –≤ i18n):\n');

function simulateDeepMerge(target, source) {
    const result = { ...target };
    
    for (const key in source) {
        if (source.hasOwnProperty(key)) {
            if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
                result[key] = simulateDeepMerge(result[key] || {}, source[key]);
            } else {
                result[key] = source[key];
            }
        }
    }
    
    return result;
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤ i18n/index.ts
const mergedRu = simulateDeepMerge({}, ruTranslations);
const mergedUk = simulateDeepMerge({}, ukTranslations);

console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (RU):');
if (mergedRu.richTextEditor) {
    console.log('‚úÖ richTextEditor —Å–µ–∫—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ');
    console.log('üîç –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å modals:', Object.keys(mergedRu.richTextEditor.modals || {}));
} else {
    console.log('‚ùå richTextEditor —Å–µ–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ');
}

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (UK):');
if (mergedUk.richTextEditor) {
    console.log('‚úÖ richTextEditor —Å–µ–∫—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ');
    console.log('üîç –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å modals:', Object.keys(mergedUk.richTextEditor.modals || {}));
} else {
    console.log('‚ùå richTextEditor —Å–µ–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ');
}

console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ useTranslation() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π namespace');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é i18n –≤ src/i18n/index.ts');
console.log('4. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useTranslation("translation") —è–≤–Ω–æ'); 