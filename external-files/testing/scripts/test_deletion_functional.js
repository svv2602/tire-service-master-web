// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–∑–æ–≤–∞ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
// –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

const fetch = require('node-fetch');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
const API_URL = 'http://localhost:8000/api/v1';
const AUTH_TOKEN = localStorage.getItem('tvoya_shina_token') || '–≤–∞—à_—Ç–æ–∫–µ–Ω';

async function testServiceDeletion() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
    console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...');
    const categoriesResponse = await fetch(`${API_URL}/service_categories`, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Accept': 'application/json'
      }
    });
    
    if (!categoriesResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesResponse.status} ${categoriesResponse.statusText}`);
    }
    
    const categories = await categoriesResponse.json();
    if (!categories.data || categories.data.length === 0) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    const category = categories.data[0];
    const categoryId = category.id;
    console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${category.name}" (ID: ${categoryId})`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log(`\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: ${categoryId}...`);
    const servicesResponse = await fetch(`${API_URL}/service_categories/${categoryId}/services`, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Accept': 'application/json'
      }
    });
    
    if (!servicesResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: ${servicesResponse.status} ${servicesResponse.statusText}`);
    }
    
    const servicesData = await servicesResponse.json();
    if (!servicesData.data || servicesData.data.length === 0) {
      throw new Error('–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
    
    const services = servicesData.data;
    console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—Å–ª—É–≥–∏ (${services.length})`);
    services.forEach((service, index) => {
      console.log(`      ${index + 1}. "${service.name}" (ID: ${service.id})`);
    });
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...');
    const newServiceData = {
      service: {
        name: `Test Delete Service ${new Date().toISOString()}`,
        description: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è',
        default_duration: 30,
        is_active: true,
        category_id: categoryId
      }
    };
    
    const createResponse = await fetch(`${API_URL}/services`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(newServiceData)
    });
    
    if (!createResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏: ${createResponse.status} ${createResponse.statusText}`);
    }
    
    const newService = await createResponse.json();
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞: "${newService.name}" (ID: ${newService.id})`);
    
    // 4. –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    const serviceIdToDelete = newService.id;
    console.log(`\n4. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ ID: ${serviceIdToDelete}...`);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    const deleteUrl = `${API_URL}/service_categories/${categoryId}/services/${serviceIdToDelete}`;
    console.log(`   üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${deleteUrl}`);
    
    const deleteResponse = await fetch(deleteUrl, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
    
    if (!deleteResponse.ok) {
      const errorText = await deleteResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: ${deleteResponse.status} ${deleteResponse.statusText}\n${errorText}`);
    }
    
    console.log(`   ‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —É—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è...');
    const verifyResponse = await fetch(`${API_URL}/service_categories/${categoryId}/services`, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Accept': 'application/json'
      }
    });
    
    if (!verifyResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: ${verifyResponse.status} ${verifyResponse.statusText}`);
    }
    
    const verifyData = await verifyResponse.json();
    const remainingServices = verifyData.data;
    const deletedService = remainingServices.find(s => s.id === serviceIdToDelete);
    
    if (deletedService) {
      throw new Error(`‚ùå –£—Å–ª—É–≥–∞ —Å ID ${serviceIdToDelete} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
    } else {
      console.log(`   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —É—Å–ª—É–≥–∞ —Å ID ${serviceIdToDelete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testServiceDeletion();
