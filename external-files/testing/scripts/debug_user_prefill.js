// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Redux store
function checkReduxStore() {
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redux Store:');
    try {
        const store = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.store : null;
        if (store) {
            const state = store.getState();
            console.log('- Redux state:', state);
            console.log('- Auth state:', state.auth);
            console.log('- User from Redux:', state.auth?.user);
            console.log('- isAuthenticated:', state.auth?.isAuthenticated);
            console.log('- accessToken:', state.auth?.accessToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('- Redux store –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        console.error('- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Redux:', error);
    }
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
function checkLocalStorage() {
    console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage:');
    try {
        const authToken = localStorage.getItem('authToken');
        const user = localStorage.getItem('user');
        console.log('- authToken:', authToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('- user data:', user ? JSON.parse(user) : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        const authKeys = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && (key.includes('auth') || key.includes('user') || key.includes('token'))) {
                authKeys.push(key);
            }
        }
        console.log('- –ö–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authKeys);
    } catch (error) {
        console.error('- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ localStorage:', error);
    }
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
function checkCookies() {
    console.log('\nüç™ –ü—Ä–æ–≤–µ—Ä–∫–∞ cookies:');
    try {
        const cookies = document.cookie.split(';').map(c => c.trim());
        const authCookies = cookies.filter(c => 
            c.includes('access_token') || 
            c.includes('refresh_token') || 
            c.includes('auth') ||
            c.includes('session')
        );
        console.log('- –í—Å–µ cookies:', cookies);
        console.log('- Auth cookies:', authCookies);
    } catch (error) {
        console.error('- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ cookies:', error);
    }
}

// 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API /auth/me
async function testCurrentUserAPI() {
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /auth/me:');
    try {
        const response = await fetch('http://localhost:8000/api/v1/auth/me', {
            method: 'GET',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        console.log('- –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('- Headers:', Object.fromEntries(response.headers.entries()));
        
        if (response.ok) {
            const userData = await response.json();
            console.log('- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            const requiredFields = ['first_name', 'last_name', 'email', 'phone'];
            const missingFields = requiredFields.filter(field => !userData[field]);
            if (missingFields.length > 0) {
                console.warn('- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:', missingFields);
            } else {
                console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
        } else {
            const errorText = await response.text();
            console.error('- –û—à–∏–±–∫–∞ API:', errorText);
        }
    } catch (error) {
        console.error('- –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
function checkReactComponents() {
    console.log('\n‚öõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    try {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        const firstNameInput = document.querySelector('input[placeholder*="–ò–≤–∞–Ω"], input[label*="–ò–º—è"]');
        const lastNameInput = document.querySelector('input[placeholder*="–ò–≤–∞–Ω–æ–≤"], input[label*="–§–∞–º–∏–ª–∏—è"]');
        const phoneInput = document.querySelector('input[placeholder*="380"], input[type="tel"]');
        const emailInput = document.querySelector('input[type="email"]');
        
        console.log('- –ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–∞–π–¥–µ–Ω–æ:', !!firstNameInput);
        console.log('- –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:', !!lastNameInput);
        console.log('- –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–æ:', !!phoneInput);
        console.log('- –ü–æ–ª–µ email –Ω–∞–π–¥–µ–Ω–æ:', !!emailInput);
        
        if (firstNameInput) {
            console.log('- –ó–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏:', firstNameInput.value);
        }
        if (lastNameInput) {
            console.log('- –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏:', lastNameInput.value);
        }
        if (phoneInput) {
            console.log('- –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneInput.value);
        }
        if (emailInput) {
            console.log('- –ó–Ω–∞—á–µ–Ω–∏–µ email:', emailInput.value);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ React Fiber
        const reactFiber = firstNameInput?._reactInternalFiber || firstNameInput?.__reactInternalInstance;
        console.log('- React Fiber –Ω–∞–π–¥–µ–Ω:', !!reactFiber);
        
    } catch (error) {
        console.error('- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
    }
}

// 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–≥–æ–≤ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
function checkConsoleLogs() {
    console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Console –≤ DevTools');
    console.log('2. –û—á–∏—Å—Ç–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å (Ctrl+L)');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)');
    console.log('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —à–∞–≥—É "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"');
    console.log('5. –ò—â–∏—Ç–µ –ª–æ–≥–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"');
    console.log('6. –ï—Å–ª–∏ –ª–æ–≥–æ–≤ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç useEffect –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runFullDiagnostic() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...\n');
    
    checkReduxStore();
    checkLocalStorage();
    checkCookies();
    await testCurrentUserAPI();
    checkReactComponents();
    checkConsoleLogs();
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìã –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –≤—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
    console.log('2. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000');
    console.log('3. –ù–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    console.log('4. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ useEffect –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.debugUserPrefill = {
    runFullDiagnostic,
    checkReduxStore,
    checkLocalStorage,
    checkCookies,
    testCurrentUserAPI,
    checkReactComponents,
    checkConsoleLogs
};

console.log('\nüéØ –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ window.debugUserPrefill');
console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: window.debugUserPrefill.runFullDiagnostic()');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
runFullDiagnostic(); 