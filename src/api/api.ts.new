import axios, { InternalAxiosRequestConfig } from 'axios';

// Константа для ключа хранилища
const STORAGE_KEY = 'tvoya_shina_token';

// Создаем экземпляр axios с базовыми настройками
const apiClient = axios.create({
  baseURL: 'http://localhost:8000',
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 секунд таймаут
  withCredentials: false // Важно для работы CORS
});

// Функция для проверки доступности API
const checkApiAvailability = async (url: string): Promise<boolean> => {
  try {
    const response = await axios.get(`${url}/api/v1/health`, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 3000
    });
    console.log(`API доступен по адресу ${url}, статус: ${response.status}`);
    return response.status === 200;
  } catch (error) {
    console.log(`API недоступен по адресу ${url}`);
    return false;
  }
};

// Инициализируем API и проверяем его доступность
(async () => {
  const apiUrl = 'http://localhost:8000';
  
  try {
    const isAvailable = await checkApiAvailability(apiUrl);
    if (isAvailable) {
      console.log(`Используется API: ${apiUrl}`);
      apiClient.defaults.baseURL = apiUrl;
    } else {
      console.error(`API недоступен по адресу: ${apiUrl}`);
    }
  } catch (error) {
    console.error(`Ошибка при проверке API: ${error}`);
  }
})().catch(error => {
  console.error('Ошибка инициализации API:', error);
});

// Интерцептор для добавления токена к каждому запросу
apiClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = localStorage.getItem(STORAGE_KEY);
    console.log('Перехватчик запросов - URL:', config.url);
    
    if (token && config.headers) {
      // Добавляем токен в заголовок Authorization
      config.headers.Authorization = `Bearer ${token}`;
      console.log('Перехватчик запросов - Токен авторизации добавлен');
    } else {
      console.log('Перехватчик запросов - Токен отсутствует или нет заголовков');
    }
    return config;
  },
  (error) => {
    console.error('Перехватчик запросов - Ошибка:', error);
    return Promise.reject(error);
  }
);

// Интерцептор для обработки ответов
apiClient.interceptors.response.use(
  (response) => {
    if (response.config.url !== '/api/v1/health') {
      console.log('Перехватчик ответов - Успешный запрос:', response.config.url);
    }
    return response;
  },
  (error) => {
    console.error('Перехватчик ответов - Ошибка:', {
      url: error.config?.url,
      status: error.response?.status,
      message: error.response?.data?.message || error.message
    });

    // Обрабатываем только ошибки авторизации
    if (error.response?.status === 401) {
      console.log('Обнаружена ошибка авторизации (401)');
      
      // Проверяем, не является ли текущий запрос попыткой логина
      const isLoginRequest = error.config?.url?.includes('/auth/login');
      
      if (!isLoginRequest) {
        console.log('Удаляем токен и сохраняем текущий путь');
        const currentPath = window.location.pathname + window.location.search;
        
        // Очищаем данные авторизации
        localStorage.removeItem(STORAGE_KEY);
        
        // Сохраняем текущий путь только если мы не на странице логина
        if (!currentPath.includes('/login')) {
          localStorage.setItem('returnPath', currentPath);
          
          // Используем history.pushState для более "мягкого" перенаправления
          window.history.pushState({}, '', '/login');
          // Вызываем событие изменения пути для обновления React Router
          window.dispatchEvent(new PopStateEvent('popstate'));
        }
      }
    }
    
    return Promise.reject(error);
  }
);

// API для работы с пользователями и аутентификацией
export const authApi = {
  login: (email: string, password: string) => {
    console.log('Отправка запроса авторизации:', { email, password: '***' });
    return apiClient.post('/api/v1/auth/login', { email, password })
      .then(response => {
        console.log('Успешная авторизация');
        return response;
      })
      .catch(error => {
        console.error('Ошибка авторизации:', error.response?.data || error.message);
        throw error;
      });
  },
  register: (userData: any) => {
    console.log('Отправка запроса на регистрацию пользователя');
    return apiClient.post('/api/v1/clients/register', userData)
      .then(response => {
        console.log('Успешная регистрация пользователя');
        return response;
      })
      .catch(error => {
        console.error('Ошибка при регистрации:', error.response?.data || error.message);
        throw error;
      });
  },
  resetPassword: (email: string) => {
    console.log('Отправка запроса на сброс пароля');
    return apiClient.post('/api/v1/password_resets', { email })
      .then(response => {
        console.log('Запрос на сброс пароля отправлен успешно');
        return response;
      })
      .catch(error => {
        console.error('Ошибка при сбросе пароля:', error.response?.data || error.message);
        throw error;
      });
  },
  getCurrentUser: () => {
    console.log('Получение данных текущего пользователя');
    return apiClient.get('/api/v1/users/me')
      .then(response => {
        console.log('Данные пользователя получены успешно');
        return response;
      })
      .catch(error => {
        console.error('Ошибка получения данных пользователя:', error.response?.data || error.message);
        throw error;
      });
  }
};

// API для работы с пользователями
export const usersApi = {
  getAll: (params?: any) => {
    console.log('Получение списка пользователей');
    return apiClient.get('/api/v1/users', { params })
      .then(response => {
        console.log(`Получено ${response.data.length} пользователей`);
        return response;
      })
      .catch(error => {
        console.error('Ошибка получения списка пользователей:', error.response?.data || error.message);
        throw error;
      });
  },
  getById: (id: number) => {
    console.log(`Получение данных пользователя с ID: ${id}`);
    return apiClient.get(`/api/v1/users/${id}`)
      .then(response => {
        console.log('Данные пользователя получены');
        return response;
      })
      .catch(error => {
        console.error(`Ошибка получения пользователя ${id}:`, error.response?.data || error.message);
        throw error;
      });
  },
  create: (data: any) => {
    console.log('Создание нового пользователя');
    return apiClient.post('/api/v1/users', data)
      .then(response => {
        console.log('Пользователь успешно создан');
        return response;
      })
      .catch(error => {
        console.error('Ошибка создания пользователя:', error.response?.data || error.message);
        throw error;
      });
  },
  update: (id: number, data: any) => {
    console.log(`Обновление данных пользователя ${id}`);
    return apiClient.put(`/api/v1/users/${id}`, data)
      .then(response => {
        console.log('Данные пользователя обновлены');
        return response;
      })
      .catch(error => {
        console.error(`Ошибка обновления пользователя ${id}:`, error.response?.data || error.message);
        throw error;
      });
  },
  delete: (id: number) => {
    console.log(`Удаление пользователя ${id}`);
    return apiClient.delete(`/api/v1/users/${id}`)
      .then(response => {
        console.log('Пользователь успешно удален');
        return response;
      })
      .catch(error => {
        console.error(`Ошибка удаления пользователя ${id}:`, error.response?.data || error.message);
        throw error;
      });
  },
  changeRole: (id: number, role: string) => {
    console.log(`Изменение роли пользователя ${id} на ${role}`);
    return apiClient.put(`/api/v1/users/${id}/change_role`, { role })
      .then(response => {
        console.log('Роль пользователя успешно изменена');
        return response;
      })
      .catch(error => {
        console.error(`Ошибка изменения роли пользователя ${id}:`, error.response?.data || error.message);
        throw error;
      });
  },
  changeStatus: (id: number, isActive: boolean) => {
    console.log(`Изменение статуса пользователя ${id} на ${isActive ? 'активный' : 'неактивный'}`);
    return apiClient.put(`/api/v1/users/${id}/change_status`, { is_active: isActive })
      .then(response => {
        console.log('Статус пользователя успешно изменен');
        return response;
      })
      .catch(error => {
        console.error(`Ошибка изменения статуса пользователя ${id}:`, error.response?.data || error.message);
        throw error;
      });
  }
};

// По умолчанию экспортируем apiClient
export default apiClient;
