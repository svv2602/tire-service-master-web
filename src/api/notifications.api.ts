import { baseApi } from './baseApi';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface Notification {
  id: number;
  type: string;
  title: string;
  message: string;
  priority: 'low' | 'normal' | 'high' | 'urgent';
  category: 'general' | 'booking' | 'system' | 'promotion' | 'reminder' | 'security';
  is_read: boolean;
  sent_at: string | null;
  read_at: string | null;
  created_at: string;
  action_url?: string;
  expires_at?: string;
}

export interface NotificationFilters {
  page?: number;
  per_page?: number;
  read?: boolean;
  category?: string;
  priority?: string;
  search?: string;
}

export interface NotificationResponse {
  notifications: Notification[];
  pagination: {
    current_page: number;
    per_page: number;
    total_count: number;
    total_pages: number;
  };
}

export interface NotificationStats {
  stats: {
    total: number;
    unread: number;
    read: number;
    sent: number;
    urgent: number;
    by_category: Record<string, number>;
    by_priority: Record<string, number>;
  };
  recent_activity: {
    today: number;
    this_week: number;
  };
}

export interface CreateNotificationData {
  notification_type_id: number;
  title: string;
  message: string;
  priority: string;
  category: string;
  action_url?: string;
  expires_at?: string;
}

export interface UpdateNotificationData {
  is_read: boolean;
}

// RTK Query API
export const notificationsApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    getNotifications: builder.query<NotificationResponse, NotificationFilters>({
      query: (filters = {}) => ({
        url: 'notifications',
        params: filters,
      }),
      providesTags: ['Notification'],
    }),

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    getNotification: builder.query<Notification, number>({
      query: (id) => `notifications/${id}`,
      providesTags: (result, error, id) => [{ type: 'Notification', id }],
    }),

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    createNotification: builder.mutation<Notification, CreateNotificationData>({
      query: (data) => ({
        url: 'notifications',
        method: 'POST',
        body: { notification: data },
      }),
      invalidatesTags: ['Notification', 'NotificationStats'],
    }),

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
    updateNotification: builder.mutation<Notification, { id: number; data: UpdateNotificationData }>({
      query: ({ id, data }) => ({
        url: `notifications/${id}`,
        method: 'PATCH',
        body: { notification: data },
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: 'Notification', id },
        'Notification',
        'NotificationStats',
      ],
    }),

    // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    deleteNotification: builder.mutation<void, number>({
      query: (id) => ({
        url: `notifications/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: ['Notification', 'NotificationStats'],
    }),

    // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    markAllAsRead: builder.mutation<{ message: string; marked_count: number }, void>({
      query: () => ({
        url: 'notifications/mark_all_as_read',
        method: 'POST',
      }),
      invalidatesTags: ['Notification', 'NotificationStats'],
    }),

    // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    deleteAllNotifications: builder.mutation<{ message: string; deleted_count: number }, { read?: boolean; category?: string }>({
      query: (filters) => ({
        url: 'notifications/destroy_all',
        method: 'DELETE',
        params: filters,
      }),
      invalidatesTags: ['Notification', 'NotificationStats'],
    }),

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getNotificationStats: builder.query<NotificationStats, void>({
      query: () => 'notifications/stats',
      providesTags: ['NotificationStats'],
    }),
  }),
  overrideExisting: false,
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ö—É–∫–æ–≤
export const {
  useGetNotificationsQuery,
  useGetNotificationQuery,
  useCreateNotificationMutation,
  useUpdateNotificationMutation,
  useDeleteNotificationMutation,
  useMarkAllAsReadMutation,
  useDeleteAllNotificationsMutation,
  useGetNotificationStatsQuery,
} = notificationsApi;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è UI
export const getNotificationIcon = (category: string): string => {
  const icons: Record<string, string> = {
    general: 'üìÑ',
    booking: 'üìÖ',
    system: '‚öôÔ∏è',
    promotion: 'üéÅ',
    reminder: '‚è∞',
    security: 'üîí',
  };
  return icons[category] || 'üìÑ';
};

export const getNotificationColor = (priority: string): string => {
  const colors: Record<string, string> = {
    low: '#4caf50',
    normal: '#2196f3',
    high: '#ff9800',
    urgent: '#f44336',
  };
  return colors[priority] || '#2196f3';
};

export const getPriorityText = (priority: string): string => {
  const texts: Record<string, string> = {
    low: '–ù–∏–∑–∫–∏–π',
    normal: '–û–±—ã—á–Ω—ã–π',
    high: '–í—ã—Å–æ–∫–∏–π',
    urgent: '–°—Ä–æ—á–Ω—ã–π',
  };
  return texts[priority] || priority;
};

export const getCategoryText = (category: string): string => {
  const texts: Record<string, string> = {
    general: '–û–±—â–µ–µ',
    booking: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    system: '–°–∏—Å—Ç–µ–º–∞',
    promotion: '–ê–∫—Ü–∏—è',
    reminder: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    security: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
  };
  return texts[category] || category;
}; 