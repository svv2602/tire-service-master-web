import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { RootState } from '../store';
import config from '../config';

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π query —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫–∏
const baseQuery = fetchBaseQuery({
  baseUrl: `${config.API_URL}${config.API_PREFIX}/`,
  credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è HttpOnly –∫—É–∫–∏
  prepareHeaders: (headers, { getState }) => {
    const state = getState() as RootState;
    const token = state.auth.accessToken;
    const user = state.auth.user;
    
    // üîç –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    console.log('üîç BaseAPI prepareHeaders:', {
      hasAccessToken: !!token,
      isAuthenticated: state.auth.isAuthenticated,
      hasUser: !!user,
      userRole: user?.role,
      tokenPreview: token ? `${token.substring(0, 20)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è cookies)',
      baseUrl: `${config.API_URL}${config.API_PREFIX}/`,
      headersCount: headers.entries ? Array.from(headers.entries()).length : 'unknown'
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Authorization header —Å —Ç–æ–∫–µ–Ω–æ–º');
    } else {
      console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ cookies');
    }
    
    return headers;
  },
});

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è refresh –∑–∞–ø—Ä–æ—Å–æ–≤
let isRefreshing = false;
let lastRefreshTime = 0;

const baseQueryWithReauth = async (args: any, api: any, extraOptions: any) => {
  // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–ê
  console.log('üöÄ BaseAPI –∑–∞–ø—Ä–æ—Å:', {
    url: typeof args === 'string' ? args : args.url,
    method: typeof args === 'string' ? 'GET' : args.method || 'GET',
    body: typeof args === 'string' ? undefined : args.body,
    fullUrl: `${config.API_URL}${config.API_PREFIX}/${typeof args === 'string' ? args : args.url}`,
    timestamp: new Date().toISOString()
  });
  
  let result = await baseQuery(args, api, extraOptions);
  
  // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
  console.log('üì• BaseAPI –æ—Ç–≤–µ—Ç:', {
    status: result.error?.status || 'success',
    hasError: !!result.error,
    hasData: !!result.data,
    errorData: result.error?.data,
    timestamp: new Date().toISOString()
  });
  
  if (result.error && result.error.status === 401) {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 15 —Å–µ–∫—É–Ω–¥
    const now = Date.now();
    if (isRefreshing || (now - lastRefreshTime < 15000)) {
      console.warn('‚ö†Ô∏è Refresh —Ç–æ–∫–µ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', {
        isRefreshing,
        timeSinceLastRefresh: now - lastRefreshTime,
        timestamp: new Date().toISOString()
      });
      return result;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ refresh (–∏–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)
    const requestUrl = typeof args === 'string' ? args : args.url;
    if (requestUrl === 'auth/refresh') {
      console.log('‚ùå –û—à–∏–±–∫–∞ refresh –∑–∞–ø—Ä–æ—Å–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      api.dispatch({ type: 'auth/logout' });
      return result;
    }

    isRefreshing = true;
    lastRefreshTime = now;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      const refreshResult = await baseQuery(
        {
          url: 'auth/refresh',
          method: 'POST',
        },
        api,
        extraOptions
      );
      
      if (refreshResult.data) {
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const newToken = (refreshResult.data as any)?.access_token || (refreshResult.data as any)?.tokens?.access;
        
        if (newToken) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redux store
          api.dispatch({ type: 'auth/updateAccessToken', payload: newToken });
          console.log('üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redux store');
        }
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        result = await baseQuery(args, api, extraOptions);
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
        api.dispatch({ type: 'auth/logout' });
      }
    } finally {
      isRefreshing = false;
    }
  }
  
  return result;
};

export const baseApi = createApi({
  reducerPath: 'api',
  baseQuery: baseQueryWithReauth,
  tagTypes: ['User', 'Client', 'Partner', 'Booking', 'ServicePoint', 'Review', 'CarType', 'Service', 'City', 'Region', 'Article', 'ServiceCategory', 'Settings', 'CarBrands', 'Availability', 'CarModels', 'Notification', 'NotificationStats', 'ClientCars', 'PageContent', 'Partners', 'Schedule', 'ServicePointService', 'ServicePointPhoto', 'ServicePost', 'SchedulePreview', 'FavoritePoints', 'SeasonalSchedule', 'BookingConflict', 'BookingConflictStatistics', 'EmailTemplate', 'CustomVariable', 'TelegramSettings', 'TelegramSubscriptions', 'TelegramNotifications', 'NotificationChannelSettings', 'ChannelStatistics', 'SeoMetatag', 'Operator', 'OperatorAssignment', 'AuditLog', 'Order', 'PartnerApplication', 'TireSearch', 'Supplier', 'SupplierProducts', 'SupplierProduct', 'SupplierFilters', 'SupplierPriceVersions', 'TireCart', 'UnifiedTireCart', 'TireOrder', 'SupplierSizes'],
  endpoints: () => ({}),
});

// –•—É–∫ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
export const useInvalidateCache = () => {
  const dispatch = baseApi.util.resetApiState;
  
  const invalidateTag = (tag: string) => {
    console.log('üîÑ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è —Ç–µ–≥–∞:', tag);
    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    dispatch();
  };
  
  const invalidateList = (tags?: string[]) => {
    console.log('üîÑ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è —Ç–µ–≥–æ–≤:', tags);
    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    dispatch();
  };
  
  return {
    invalidateTag,
    invalidateList
  };
};

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
export const clearAllCacheData = (dispatch: any) => {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ RTK Query...');
  
  // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const allTags = [
    'User', 'Client', 'Partner', 'Booking', 'ServicePoint', 'Review', 
    'CarType', 'Service', 'City', 'Region', 'Article', 'ServiceCategory', 
    'Settings', 'CarBrands', 'Availability', 'CarModels', 'Notification', 
    'NotificationStats', 'ClientCars', 'PageContent', 'Partners', 'Schedule', 
    'ServicePointService', 'ServicePointPhoto', 'ServicePost', 'SchedulePreview', 
    'FavoritePoints', 'SeasonalSchedule', 'BookingConflict', 'BookingConflictStatistics', 'Order',
    'Supplier', 'SupplierProducts', 'SupplierProduct', 'SupplierFilters',
    'TireCart', 'TireOrder'
  ] as const;
  
  // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–≥ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
  allTags.forEach(tag => {
    try {
      dispatch(baseApi.util.invalidateTags([{ type: tag }]));
      console.log(`‚úÖ –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —Ç–µ–≥: ${tag}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–≥–∞ ${tag}:`, error);
    }
  });
  
  // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è API
  try {
    dispatch(baseApi.util.resetApiState());
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è API –≤—ã–ø–æ–ª–Ω–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API:', error);
  }
  
  console.log('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ RTK Query –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
};