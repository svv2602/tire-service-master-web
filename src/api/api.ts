import axios, { InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import config from '../config';
import { checkApiAvailability } from './baseQuery';
import { handleLogout, refreshTokens } from '../services/authService';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const API_URL = `${config.API_URL}${config.API_PREFIX}`;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
export const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000,
  withCredentials: true // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫—É–∫–∏ –¥–ª—è refresh —Ç–æ–∫–µ–Ω–∞
});

// Request interceptor - –¥–æ–±–∞–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω –∏–∑ Redux state
apiClient.interceptors.request.use((config: InternalAxiosRequestConfig) => {
  // –ü–æ–ª—É—á–∞–µ–º access —Ç–æ–∫–µ–Ω –∏–∑ Redux state
  const store = require('../store/store').store;
  const token = store.getState()?.auth?.accessToken;
  
  if (token && config.headers) {
    // –î–æ–±–∞–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    config.headers.Authorization = `Bearer ${token}`;
  }
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (process.env.NODE_ENV === 'development') {
    console.log('üîê ApiClient –∑–∞–ø—Ä–æ—Å:', {
      url: config.url,
      hasAccessToken: !!token,
      tokenPreview: token ? `${token.substring(0, 20)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      withCredentials: config.withCredentials
    });
  }

  return config;
});

// Response interceptor - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ 401 –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (error.response?.status !== 401 || originalRequest._retry) {
      return Promise.reject(error);
    }
    
    // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏–Ω–∞
    if (originalRequest.url?.includes('/auth/login')) {
      return Promise.reject(error);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    if (originalRequest.url === '/auth/refresh') {
      handleLogout(require('../store/store').store.dispatch);
      return Promise.reject(error);
    }
    
    try {
      originalRequest._retry = true;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º refreshTokens –∏–∑ authService (refresh —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cookies)
      const { access_token } = await refreshTokens(apiClient);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω –≤ Redux state –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
      const store = require('../store/store').store;
      store.dispatch({ type: 'auth/updateAccessToken', payload: access_token });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      originalRequest.headers['Authorization'] = `Bearer ${access_token}`;
      
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      return apiClient(originalRequest);
    } catch (refreshError) {
      handleLogout(require('../store/store').store.dispatch);
      return Promise.reject(refreshError);
    }
  }
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
(async () => {
  try {
    const isAvailable = await checkApiAvailability();
    if (!isAvailable) {
      console.error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${API_URL}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: ${error}`);
  }
})();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default apiClient;