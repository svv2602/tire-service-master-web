import axios, { InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import config from '../config';
import { checkApiAvailability } from './baseQuery';
import { handleLogout, refreshTokens } from '../services/authService';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const STORAGE_KEY = config.AUTH_TOKEN_STORAGE_KEY;
const REFRESH_TOKEN_KEY = 'tvoya_shina_refresh_token';
const API_URL = `${config.API_URL}${config.API_PREFIX}`;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
export const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000,
  withCredentials: false
});

// Request interceptor
apiClient.interceptors.request.use((config: InternalAxiosRequestConfig) => {
  const token = localStorage.getItem(STORAGE_KEY);

  if (token && config.headers) {
    // Remove any existing auth header to avoid duplicates
    delete config.headers.Authorization;
    delete config.headers.authorization;

    // Add token with correct Bearer format
    const formattedToken = token.replace(/^Bearer\s+/i, '').trim();
    config.headers.Authorization = `Bearer ${formattedToken}`;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', {
      url: config.url,
      token: formattedToken.substring(0, 10) + '...',
      headers: config.headers
    });
  }

  return config;
});

// Response interceptor
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
    if (response.config.url?.includes('/auth/login') && response.data.tokens) {
      const { access, refresh } = response.data.tokens;
      localStorage.setItem(STORAGE_KEY, access);
      localStorage.setItem(REFRESH_TOKEN_KEY, refresh);
      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access}`;
    }
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ 401 –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (error.response?.status !== 401 || originalRequest._retry) {
      return Promise.reject(error);
    }
    
    // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏–Ω–∞
    if (originalRequest.url?.includes('/auth/login')) {
      return Promise.reject(error);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    if (originalRequest.url === '/auth/refresh') {
      handleLogout(require('../store/store').store.dispatch);
      return Promise.reject(error);
    }
    
    try {
      originalRequest._retry = true;
      
      // –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ localStorage
      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);
      if (!refreshToken) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token');
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º refreshTokens –∏–∑ authService
      const { access_token } = await refreshTokens(apiClient, refreshToken);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
      localStorage.setItem(STORAGE_KEY, access_token);
      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;
      originalRequest.headers['Authorization'] = `Bearer ${access_token}`;
      
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      return apiClient(originalRequest);
    } catch (refreshError) {
      handleLogout(require('../store/store').store.dispatch);
      return Promise.reject(refreshError);
    }
  }
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
(async () => {
  try {
    const isAvailable = await checkApiAvailability();
    if (!isAvailable) {
      console.error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${API_URL}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: ${error}`);
  }
})();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default apiClient;