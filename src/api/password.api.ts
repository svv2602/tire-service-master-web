import { baseApi } from './baseApi';

// –¢–∏–ø—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
interface ForgotPasswordRequest {
  login: string;
}

interface ForgotPasswordResponse {
  message: string;
}

interface ResetPasswordRequest {
  token: string;
  password: string;
  password_confirmation: string;
}

interface ResetPasswordResponse {
  message: string;
}

interface VerifyTokenResponse {
  valid: boolean;
  expires_at?: string;
  error?: string;
  user?: {
    email?: string;
    phone?: string;
  };
}

// –†–∞—Å—à–∏—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
export const passwordApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    forgotPassword: builder.mutation<ForgotPasswordResponse, ForgotPasswordRequest>({
      query: (data) => ({
        url: 'password/forgot',
        method: 'POST',
        body: data,
      }),
      transformResponse: (response: ForgotPasswordResponse) => {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response);
        return response;
      },
      transformErrorResponse: (response: { status: number, data: any }) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', response);
        return {
          status: response.status,
          data: response.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
        };
      },
    }),

    // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    resetPassword: builder.mutation<ResetPasswordResponse, ResetPasswordRequest>({
      query: (data) => ({
        url: 'password/reset',
        method: 'POST',
        body: data,
      }),
      transformResponse: (response: ResetPasswordResponse) => {
        console.log('üîÑ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω:', response);
        return response;
      },
      transformErrorResponse: (response: { status: number, data: any }) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', response);
        return {
          status: response.status,
          data: response.data?.error || response.data?.details || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è'
        };
      },
    }),

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    verifyResetToken: builder.query<VerifyTokenResponse, string>({
      query: (token) => ({
        url: `password/verify_token/${token}`,
        method: 'GET',
      }),
      transformResponse: (response: VerifyTokenResponse) => {
        console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:', response);
        return response;
      },
      transformErrorResponse: (response: { status: number, data: any }) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', response);
        return {
          status: response.status,
          data: response.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞'
        };
      },
    }),
  }),
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏
export const {
  useForgotPasswordMutation,
  useResetPasswordMutation,
  useVerifyResetTokenQuery,
} = passwordApi; 