import { baseApi } from './baseApi';

// –¢–∏–ø—ã
interface LoginRequest {
  auth: {
    login: string;
    password: string;
  };
}

interface LoginResponse {
  message: string;
  user: {
    id: number;
    email: string;
    phone: string;
    first_name: string;
    last_name: string;
    middle_name?: string;
    role: string;
    last_login?: string;
    is_active: boolean;
    email_verified?: boolean;
    phone_verified?: boolean;
    created_at?: string;
    updated_at?: string;
    client_id?: number; // ID –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
    profile?: {
      position?: string;
      access_level: number;
    };
  };
  tokens: {
    access: string;
    // refresh —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ –∫—É–∫–∏
  };
  admin_info?: {
    role_permissions: string[];
    last_login: string;
  };
}

interface CurrentUserResponse {
  id: number;
  email: string;
  phone: string;
  first_name: string;
  last_name: string;
  middle_name?: string;
  role: string;
  role_id: number;
  last_login?: string;
  is_active: boolean;
  email_verified: boolean;
  phone_verified: boolean;
  created_at: string;
  updated_at: string;
  client_id?: number; // ID –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
  profile?: {
    position?: string;
    access_level: number;
  };
}

// –†–∞—Å—à–∏—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
export const authApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    login: builder.mutation<LoginResponse, LoginRequest>({
      query: (credentials) => ({
        url: 'auth/login',
        method: 'POST',
        body: credentials,
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏
      }),
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è Redux
      onQueryStarted: async (arg, { queryFulfilled }) => {
        try {
          const { data } = await queryFulfilled;
          console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user.email);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
        }
      },
    }),

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser: builder.query<CurrentUserResponse, void>({
      query: () => ({
        url: 'auth/me',
        method: 'GET',
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏
      }),
      transformResponse: (response: { user: CurrentUserResponse }) => {
        console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ getCurrentUser:', response);
        return response.user;
      },
      transformErrorResponse: (response: { status: number, data: any }) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ getCurrentUser:', response);
        return {
          status: response.status,
          data: response.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        };
      },
      providesTags: ['User'],
    }),

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    refreshToken: builder.mutation<{ access_token: string }, void>({
      query: () => ({
        url: 'auth/refresh',
        method: 'POST',
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏
      }),
    }),

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout: builder.mutation<void, void>({
      query: () => ({
        url: 'auth/logout',
        method: 'POST',
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏
      }),
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      onQueryStarted: async (arg, { queryFulfilled }) => {
        try {
          await queryFulfilled;
          console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        }
      },
    }),

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateProfile: builder.mutation<CurrentUserResponse, { first_name: string; last_name: string; email: string; phone: string }>({
      query: (profileData) => ({
        url: 'auth/profile',
        method: 'PUT',
        body: { user: profileData },
        credentials: 'include',
      }),
      transformResponse: (response: { user: CurrentUserResponse }) => {
        console.log('üîÑ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', response);
        return response.user;
      },
      transformErrorResponse: (response: { status: number, data: any }) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', response);
        return {
          status: response.status,
          data: response.data?.errors || response.data?.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
        };
      },
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à getCurrentUser –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      invalidatesTags: ['User'],
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º Redux store
      onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {
        try {
          const { data } = await queryFulfilled;
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à getCurrentUser
          dispatch(authApi.util.invalidateTags(['User']));
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
      },
    }),
  }),
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏
export const {
  useLoginMutation,
  useGetCurrentUserQuery,
  useRefreshTokenMutation,
  useLogoutMutation,
  useUpdateProfileMutation,
} = authApi; 