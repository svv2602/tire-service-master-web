import React, { useState } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  FormGroup, 
  FormControlLabel, 
  Switch,
  Divider,
  Alert
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import VisibilityIcon from '@mui/icons-material/Visibility';
import BlockIcon from '@mui/icons-material/Block';
import { PageTable } from '../../components/common/PageTable';
import { 
  PageTableProps, 
  ActionConfig, 
  FilterConfig, 
  PageHeaderConfig, 
  SearchConfig 
} from '../../components/common/PageTable/types';
import { Column } from '../../components/ui/Table/Table';

interface TestUser {
  id: number;
  name: string;
  email: string;
  role: string;
  status: string;
  lastLogin: string;
  registrationDate: string;
}

const generateTestUsers = (count: number = 25): TestUser[] => {
  const roles = ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–ö–ª–∏–µ–Ω—Ç'];
  const statuses = ['–ê–∫—Ç–∏–≤–µ–Ω', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'];
  
  return Array.from({ length: count }, (_, index) => ({
    id: index + 1,
    name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`,
    email: `user${index + 1}@example.com`,
    role: roles[index % roles.length],
    status: statuses[index % statuses.length],
    lastLogin: new Date(2025, 0, Math.floor(Math.random() * 30) + 1).toLocaleDateString('ru-RU'),
    registrationDate: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toLocaleDateString('ru-RU')
  }));
};

export const PageTableTest: React.FC = () => {
  const [users, setUsers] = useState<TestUser[]>(generateTestUsers(25));
  const [loading, setLoading] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [roleFilter, setRoleFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage] = useState(10);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const filteredUsers = users.filter(user => {
    const matchesSearch = !searchValue || 
      user.name.toLowerCase().includes(searchValue.toLowerCase()) ||
      user.email.toLowerCase().includes(searchValue.toLowerCase());
    
    const matchesRole = !roleFilter || user.role === roleFilter;
    
    const matchesStatus = statusFilter.length === 0 || statusFilter.includes(user.status);
    
    return matchesSearch && matchesRole && matchesStatus;
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const paginatedUsers = filteredUsers.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const headerConfig: PageHeaderConfig = {
    title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
    subtitle: '–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PageTable –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
    actions: [
      {
        id: 'add',
        label: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        icon: <AddIcon />,
        onClick: () => alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      },
      {
        id: 'export',
        label: '–≠–∫—Å–ø–æ—Ä—Ç',
        variant: 'outlined',
        onClick: () => alert('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
      }
    ]
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
  const searchConfig: SearchConfig = {
    placeholder: '–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email...',
    value: searchValue,
    onChange: setSearchValue,
    showClearButton: true
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filtersConfig: FilterConfig[] = [
    {
      id: 'role',
      label: '–†–æ–ª—å',
      type: 'select',
      value: roleFilter,
      onChange: setRoleFilter,
      options: [
        { value: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
        { value: '–ú–µ–Ω–µ–¥–∂–µ—Ä', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
        { value: '–û–ø–µ—Ä–∞—Ç–æ—Ä', label: '–û–ø–µ—Ä–∞—Ç–æ—Ä' },
        { value: '–ö–ª–∏–µ–Ω—Ç', label: '–ö–ª–∏–µ–Ω—Ç' },
      ]
    },
    {
      id: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      type: 'multiselect',
      value: statusFilter,
      onChange: setStatusFilter,
      options: [
        { value: '–ê–∫—Ç–∏–≤–µ–Ω', label: '–ê–∫—Ç–∏–≤–µ–Ω' },
        { value: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', label: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' },
        { value: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', label: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' },
      ]
    }
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
  const columns: Column[] = [
    {
      id: 'id',
      label: 'ID',
      minWidth: 50,
      maxWidth: 80,
      align: 'center',
      sticky: true,
    },
    {
      id: 'name',
      label: '–ò–º—è',
      minWidth: 150,
      wrap: true,
    },
    {
      id: 'email',
      label: 'Email',
      minWidth: 200,
      maxWidth: 250,
      ellipsis: true,
      hideOnMobile: true,
    },
    {
      id: 'role',
      label: '–†–æ–ª—å',
      minWidth: 120,
      format: (value) => (
        <Box
          sx={{
            px: 1,
            py: 0.5,
            borderRadius: 1,
            fontSize: '0.75rem',
            fontWeight: 'medium',
            textAlign: 'center',
            backgroundColor: 
              value === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? 'error.light' :
              value === '–ú–µ–Ω–µ–¥–∂–µ—Ä' ? 'warning.light' :
              value === '–û–ø–µ—Ä–∞—Ç–æ—Ä' ? 'info.light' : 'success.light',
            color: 
              value === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? 'error.dark' :
              value === '–ú–µ–Ω–µ–¥–∂–µ—Ä' ? 'warning.dark' :
              value === '–û–ø–µ—Ä–∞—Ç–æ—Ä' ? 'info.dark' : 'success.dark',
          }}
        >
          {value}
        </Box>
      ),
    },
    {
      id: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      minWidth: 140,
      format: (value) => (
        <Box
          sx={{
            px: 1,
            py: 0.5,
            borderRadius: 1,
            fontSize: '0.75rem',
            fontWeight: 'medium',
            textAlign: 'center',
            backgroundColor: 
              value === '–ê–∫—Ç–∏–≤–µ–Ω' ? 'success.light' :
              value === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' ? 'error.light' : 'warning.light',
            color: 
              value === '–ê–∫—Ç–∏–≤–µ–Ω' ? 'success.dark' :
              value === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' ? 'error.dark' : 'warning.dark',
          }}
        >
          {value}
        </Box>
      ),
    },
    {
      id: 'lastLogin',
      label: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥',
      minWidth: 120,
      align: 'center',
      hideOnMobile: true,
    },
    {
      id: 'registrationDate',
      label: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      minWidth: 120,
      align: 'center',
      hideOnMobile: true,
    },
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  const actionsConfig: ActionConfig[] = [
    {
      id: 'view',
      label: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
      icon: <VisibilityIcon />,
      color: 'info',
      onClick: (user: TestUser) => alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name}`)
    },
    {
      id: 'edit',
      label: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
      icon: <EditIcon />,
      color: 'primary',
      onClick: (user: TestUser) => alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name}`)
    },
    {
      id: 'block',
      label: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
      icon: <BlockIcon />,
      color: 'warning',
      isVisible: (user: TestUser) => user.status === '–ê–∫—Ç–∏–≤–µ–Ω',
      requireConfirmation: true,
      confirmationText: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
      onClick: (user: TestUser) => {
        setUsers(prev => prev.map(u => 
          u.id === user.id ? { ...u, status: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' } : u
        ));
        alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      }
    },
    {
      id: 'delete',
      label: '–£–¥–∞–ª–∏—Ç—å',
      icon: <DeleteIcon />,
      color: 'error',
      requireConfirmation: true,
      confirmationText: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      onClick: (user: TestUser) => {
        setUsers(prev => prev.filter(u => u.id !== user.id));
        alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} —É–¥–∞–ª–µ–Ω`);
      }
    }
  ];

  const handleLoadingTest = () => {
    setLoading(true);
    setTimeout(() => setLoading(false), 3000);
  };

  const handleRowClick = (user: TestUser) => {
    alert(`–ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ: ${user.name} (${user.email})`);
  };

  return (
    <Box>
      <Box sx={{ mb: 3, p: 2, border: '1px solid', borderColor: 'divider', borderRadius: 1 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PageTable
        </Typography>
        
        <FormGroup row sx={{ gap: 2 }}>
          <Button variant="outlined" onClick={handleLoadingTest} disabled={loading}>
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏'}
          </Button>
          <Button variant="outlined" onClick={() => setUsers([])}>
            –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>
          <Button variant="outlined" onClick={() => setUsers(generateTestUsers(25))}>
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>
        </FormGroup>
      </Box>

      <Divider sx={{ my: 2 }} />

      <Alert severity="info" sx={{ mb: 3 }}>
        <Typography variant="body2">
          <strong>–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ PageTable:</strong><br />
          ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π<br />
          ‚úÖ –ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π<br />
          ‚úÖ –§–∏–ª—å—Ç—Ä—ã: select –∏ multiselect<br />
          ‚úÖ –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —Å—Ç—Ä–æ–∫–∞–º–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º<br />
          ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è<br />
          ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ Table
        </Typography>
      </Alert>

      <PageTable<TestUser>
        header={headerConfig}
        search={searchConfig}
        filters={filtersConfig}
        columns={columns}
        rows={paginatedUsers}
        actions={actionsConfig}
        loading={loading}
        onRowClick={handleRowClick}
        pagination={{
          page,
          rowsPerPage,
          totalItems: filteredUsers.length,
          onPageChange: setPage
        }}
      />
    </Box>
  );
};

export default PageTableTest; 