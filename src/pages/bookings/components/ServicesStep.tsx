// –®–∞–≥ 5: –í—ã–±–æ—Ä —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

import React from 'react';
import {
  Box,
  Typography,
  Grid,
  Alert,
  Paper,
  Card,
  CardContent,
  CardActionArea,
  Chip,
  IconButton,
  Button,
  CircularProgress,
  Divider,
  TextField as MuiTextField,
} from '@mui/material';
import {
  Add as AddIcon,
  Remove as RemoveIcon,
  Build as ServiceIcon,
  AttachMoney as PriceIcon,
  Comment as CommentIcon,
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';

// –ò–º–ø–æ—Ä—Ç API —Ö—É–∫–æ–≤
// import { useGetServicesByServicePointQuery } from '../../../api/services.api';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
import { BookingFormData } from '../NewBookingWithAvailabilityPage';
import { Service } from '../../../types/models';

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import { getCardStyles } from '../../../styles/components';

interface ServicesStepProps {
  formData: BookingFormData;
  setFormData: React.Dispatch<React.SetStateAction<BookingFormData>>;
  onNext: () => void;
  onBack: () => void;
  isValid: boolean;
}

interface SelectedService {
  service_id: number;
  quantity: number;
  price: number;
  name?: string;
}

const ServicesStep: React.FC<ServicesStepProps> = ({
  formData,
  setFormData,
  isValid,
}) => {
  const theme = useTheme();
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ (–∑–∞–≥–ª—É—à–∫–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è API)
  const services: Service[] = [];
  const isLoadingServices = false;
  const servicesError = null;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
  const handleAddService = (service: Service) => {
    const existingServiceIndex = formData.services.findIndex(s => s.service_id === service.id);
    
    if (existingServiceIndex >= 0) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const updatedServices = [...formData.services];
      updatedServices[existingServiceIndex].quantity += 1;
      
      setFormData(prev => ({
        ...prev,
        services: updatedServices,
      }));
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É
      const newService: SelectedService = {
        service_id: service.id,
        quantity: 1,
        price: service.price || 0,
        name: service.name,
      };
      
      setFormData(prev => ({
        ...prev,
        services: [...prev.services, newService],
      }));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
  const handleRemoveService = (serviceId: number) => {
    const existingServiceIndex = formData.services.findIndex(s => s.service_id === serviceId);
    
    if (existingServiceIndex >= 0) {
      const updatedServices = [...formData.services];
      
      if (updatedServices[existingServiceIndex].quantity > 1) {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        updatedServices[existingServiceIndex].quantity -= 1;
      } else {
        // –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
        updatedServices.splice(existingServiceIndex, 1);
      }
      
      setFormData(prev => ({
        ...prev,
        services: updatedServices,
      }));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleNotesChange = (value: string) => {
    setFormData(prev => ({
      ...prev,
      notes: value,
    }));
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
  const getServiceQuantity = (serviceId: number) => {
    const service = formData.services.find(s => s.service_id === serviceId);
    return service?.quantity || 0;
  };
  
  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const calculateTotalPrice = () => {
    return formData.services.reduce((total, service) => {
      return total + (service.price * service.quantity);
    }, 0);
  };
  
  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥–∏
  const renderServiceCard = (service: Service) => {
    const quantity = getServiceQuantity(service.id);
    const isSelected = quantity > 0;
    
    return (
      <Card
        key={service.id}
        sx={{
          ...getCardStyles(theme),
          border: isSelected ? `2px solid ${theme.palette.primary.main}` : '1px solid',
          borderColor: isSelected ? 'primary.main' : 'divider',
          transition: 'all 0.2s ease-in-out',
          '&:hover': {
            borderColor: 'primary.main',
            transform: 'translateY(-2px)',
            boxShadow: theme.shadows[4],
          },
        }}
      >
        <CardActionArea onClick={() => handleAddService(service)}>
          <CardContent>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
              <Typography variant="h6" component="h3" sx={{ fontWeight: 600, flex: 1 }}>
                {service.name}
              </Typography>
              {isSelected && (
                <Chip
                  label={`√ó${quantity}`}
                  color="primary"
                  size="small"
                  variant="filled"
                />
              )}
            </Box>
            
            {service.description && (
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                {service.description}
              </Typography>
            )}
            
            <Box sx={{ display: 'flex', justify: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <PriceIcon color="action" fontSize="small" />
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  {service.price ? `${service.price} ‚Ç¥` : '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É'}
                </Typography>
              </Box>
              
              {isSelected && (
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <IconButton
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleRemoveService(service.id);
                    }}
                    color="error"
                  >
                    <RemoveIcon />
                  </IconButton>
                  <Typography variant="body2" sx={{ minWidth: 20, textAlign: 'center' }}>
                    {quantity}
                  </Typography>
                  <IconButton
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleAddService(service);
                    }}
                    color="primary"
                  >
                    <AddIcon />
                  </IconButton>
                </Box>
              )}
            </Box>
          </CardContent>
        </CardActionArea>
      </Card>
    );
  };
  
  if (!formData.service_point_id) {
    return (
      <Box>
        <Typography variant="h5" component="h2" sx={{ mb: 3, fontWeight: 600 }}>
          –í—ã–±–æ—Ä —É—Å–ª—É–≥
        </Typography>
        <Alert severity="warning">
          –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
        </Alert>
      </Box>
    );
  }
  
  return (
    <Box>
      <Typography variant="h5" component="h2" sx={{ mb: 3, fontWeight: 600 }}>
        –í—ã–±–æ—Ä —É—Å–ª—É–≥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      </Typography>
      
      <Grid container spacing={3}>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        <Grid item xs={12}>
          <Alert severity="info" sx={{ mb: 2 }}>
            üí° –í—ã–±–æ—Ä —É—Å–ª—É–≥ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏ —Å –º–∞—Å—Ç–µ—Ä–æ–º –Ω–∞ –º–µ—Å—Ç–µ.
          </Alert>
        </Grid>
        
        {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
        <Grid item xs={12} md={8}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
          </Typography>
          
          {servicesError && (
            <Alert severity="error" sx={{ mb: 2 }}>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </Alert>
          )}
          
          {isLoadingServices ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : services.length === 0 ? (
            <Alert severity="info">
              –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç. 
              –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏ —Å –º–∞—Å—Ç–µ—Ä–æ–º –Ω–∞ –º–µ—Å—Ç–µ.
            </Alert>
          ) : (
            <Grid container spacing={2}>
              {services.map((service) => (
                <Grid item xs={12} sm={6} key={service.id}>
                  {renderServiceCard(service)}
                </Grid>
              ))}
            </Grid>
          )}
        </Grid>
        
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏ */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ ...getCardStyles(theme), p: 2, position: 'sticky', top: 20 }}>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <ServiceIcon color="primary" />
              –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            </Typography>
            
            {formData.services.length === 0 ? (
              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                –£—Å–ª—É–≥–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
              </Typography>
            ) : (
              <Box>
                {formData.services.map((service: SelectedService, index: number) => {
                  const serviceInfo = services.find((s: Service) => s.id === service.service_id);
                  return (
                    <Box key={service.service_id}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', py: 1 }}>
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body2" sx={{ fontWeight: 500 }}>
                            {serviceInfo?.name || `–£—Å–ª—É–≥–∞ #${service.service_id}`}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {service.price} ‚Ç¥ √ó {service.quantity}
                          </Typography>
                        </Box>
                        <Typography variant="body2" sx={{ fontWeight: 600 }}>
                          {service.price * service.quantity} ‚Ç¥
                        </Typography>
                      </Box>
                      {index < formData.services.length - 1 && <Divider />}
                    </Box>
                  );
                })}
                
                <Divider sx={{ my: 2 }} />
                
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    –ò—Ç–æ–≥–æ:
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: 'primary.main' }}>
                    {calculateTotalPrice()} ‚Ç¥
                  </Typography>
                </Box>
                
                <Button
                  variant="outlined"
                  size="small"
                  onClick={() => setFormData(prev => ({ ...prev, services: [] }))}
                  sx={{ mt: 2, width: '100%' }}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                </Button>
              </Box>
            )}
          </Paper>
        </Grid>
        
        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
        <Grid item xs={12}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          </Typography>
          
          <MuiTextField
            multiline
            rows={4}
            value={formData.notes}
            onChange={(e) => handleNotesChange(e.target.value)}
            placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
            variant="outlined"
            fullWidth
            InputProps={{
              startAdornment: (
                <Box sx={{ pt: 1, pr: 1 }}>
                  <CommentIcon color="action" />
                </Box>
              ),
            }}
          />
        </Grid>
      </Grid>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ */}
      <Alert severity="success" sx={{ mt: 3 }}>
        ‚úÖ –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
      </Alert>
    </Box>
  );
};

export default ServicesStep;
