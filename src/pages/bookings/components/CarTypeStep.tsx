// –®–∞–≥ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ

import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Typography,
  Grid,
  Alert,
  FormHelperText,
  InputAdornment,
  Card,
  CardContent,
  CardActionArea,
  Chip,
  CircularProgress,
} from '@mui/material';
import {
  ConfirmationNumber as LicensePlateIcon,
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';

// –ò–º–ø–æ—Ä—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { TextField } from '../../../components/ui/TextField';
import { Select } from '../../../components/ui/Select';

// –ò–º–ø–æ—Ä—Ç API —Ö—É–∫–æ–≤
import { useGetCarTypesQuery } from '../../../api/carTypes.api';
import { useGetCarBrandsQuery, useGetCarModelsByBrandIdQuery } from '../../../api';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import { CarType } from '../../../types/car';

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import { getCardStyles } from '../../../styles/components';

interface CarTypeStepProps {
  formData: any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º BookingFormData
  setFormData: React.Dispatch<React.SetStateAction<any>>;
  onNext: () => void;
  onBack: () => void;
  isValid: boolean;
}

const CarTypeStep: React.FC<CarTypeStepProps> = ({
  formData,
  setFormData,
  isValid,
}) => {
  const theme = useTheme();
  const [selectedBrandId, setSelectedBrandId] = useState<number | null>(null);
  const [errors, setErrors] = useState({
    license_plate: '',
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { data: carTypesData, isLoading: isLoadingCarTypes, error: carTypesError } = useGetCarTypesQuery();
  const { data: brandsData } = useGetCarBrandsQuery({});
  const { data: modelsData } = useGetCarModelsByBrandIdQuery(
    { brandId: selectedBrandId?.toString() || '' },
    { skip: !selectedBrandId }
  );
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
  const carTypes = carTypesData || [];
  const brands = useMemo(() => brandsData?.data || [], [brandsData]);
  const models = modelsData?.car_models || [];
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const validateLicensePlate = (value: string) => {
    if (!value.trim()) {
      return '–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    return '';
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleCarTypeSelect = (carType: CarType) => {
    setFormData((prev: any) => ({
      ...prev,
      car_type_id: carType.id,
    }));
  };
  
  const handleBrandChange = (brandId: number) => {
    setSelectedBrandId(brandId);
    const selectedBrand = brands.find(b => b.id === brandId);
    setFormData((prev: any) => ({
      ...prev,
      car_brand: selectedBrand?.name || '',
      car_model: '', // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ –±—Ä–µ–Ω–¥–∞
    }));
  };
  
  const handleModelChange = (modelId: number) => {
    const selectedModel = models.find(m => m.id === modelId);
    setFormData((prev: any) => ({
      ...prev,
      car_model: selectedModel?.name || '',
    }));
  };
  
  const handleLicensePlateChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    setFormData((prev: any) => ({
      ...prev,
      license_plate: value.toUpperCase(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    }));
    
    const error = validateLicensePlate(value);
    setErrors(prev => ({
      ...prev,
      license_plate: error,
    }));
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
  useEffect(() => {
    if (formData.car_brand && brands.length > 0) {
      const brand = brands.find(b => b.name === formData.car_brand);
      if (brand) {
        setSelectedBrandId(brand.id);
      }
    }
  }, [formData.car_brand, brands]);
  
  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const renderCarTypeCard = (carType: CarType) => {
    const isSelected = formData.car_type_id === carType.id;
    
    return (
      <Card
        key={carType.id}
        sx={{
          ...getCardStyles(theme),
          border: isSelected ? `2px solid ${theme.palette.primary.main}` : '1px solid',
          borderColor: isSelected ? 'primary.main' : 'divider',
          cursor: 'pointer',
          transition: 'all 0.2s ease-in-out',
          '&:hover': {
            borderColor: 'primary.main',
            transform: 'translateY(-2px)',
            boxShadow: theme.shadows[4],
          },
        }}
      >
        <CardActionArea onClick={() => handleCarTypeSelect(carType)}>
          <CardContent>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
              <Typography variant="h6" component="h3" sx={{ fontWeight: 600 }}>
                {carType.name}
              </Typography>
              {isSelected && (
                <Chip
                  label="–í—ã–±—Ä–∞–Ω–æ"
                  color="primary"
                  size="small"
                  variant="filled"
                />
              )}
            </Box>
            
            {carType.description && (
              <Typography variant="body2" color="text.secondary">
                {carType.description}
              </Typography>
            )}
          </CardContent>
        </CardActionArea>
      </Card>
    );
  };
  
  return (
    <Box>
      <Typography variant="h5" component="h2" sx={{ mb: 3, fontWeight: 600 }}>
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
      </Typography>
      
      <Grid container spacing={3}>
        {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <Grid item xs={12}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è *
          </Typography>
          
          {carTypesError && (
            <Alert severity="error" sx={{ mb: 2 }}>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </Alert>
          )}
          
          {isLoadingCarTypes ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : carTypes.length === 0 ? (
            <Alert severity="warning">
              –¢–∏–ø—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
            </Alert>
          ) : (
            <Grid container spacing={2}>
              {carTypes.map((carType) => (
                <Grid item xs={12} sm={6} md={4} key={carType.id}>
                  {renderCarTypeCard(carType)}
                </Grid>
              ))}
            </Grid>
          )}
          
          {!formData.car_type_id && carTypes.length > 0 && (
            <FormHelperText error sx={{ mt: 1 }}>
              –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            </FormHelperText>
          )}
        </Grid>
        
        {/* –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <Grid item xs={12} sm={6}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            2. –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è *
          </Typography>
          
          <TextField
            label="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
            value={formData.license_plate}
            onChange={handleLicensePlateChange}
            placeholder="–ê–ê1234–í–í"
            required
            error={!!errors.license_plate}
            helperText={errors.license_plate || '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è'}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <LicensePlateIcon color="action" />
                </InputAdornment>
              ),
            }}
            fullWidth
          />
        </Grid>
        
        {/* –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <Grid item xs={12} sm={6}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            3. –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          </Typography>
          
          <Select
            label="–ú–∞—Ä–∫–∞"
            value={selectedBrandId || ''}
            onChange={(value) => handleBrandChange(Number(value))}
            options={brands.map(brand => ({
              value: brand.id,
              label: brand.name,
            }))}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É"
            fullWidth
          />
        </Grid>
        
        {/* –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        {selectedBrandId && (
          <Grid item xs={12} sm={6}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              4. –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </Typography>
            
            <Select
              label="–ú–æ–¥–µ–ª—å"
              value={models.find(m => m.name === formData.car_model)?.id || ''}
              onChange={(value) => handleModelChange(Number(value))}
              options={models.map(model => ({
                value: model.id,
                label: model.name,
              }))}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
              disabled={!selectedBrandId}
              fullWidth
            />
          </Grid>
        )}
      </Grid>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Alert severity="info" sx={{ mt: 3 }}>
        üí° –£–∫–∞–∑–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–º–æ–∂–µ—Ç –º–∞—Å—Ç–µ—Ä—É –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
      </Alert>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö */}
      {(!isValid) && (
        <Alert severity="warning" sx={{ mt: 3 }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
          </Typography>
          <Box component="ul" sx={{ pl: 2, mb: 0, mt: 1 }}>
            {!formData.car_type_id && (
              <Typography variant="body2" component="li">
                –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è
              </Typography>
            )}
            {!formData.license_plate && (
              <Typography variant="body2" component="li">
                –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
              </Typography>
            )}
          </Box>
        </Alert>
      )}
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      {isValid && (
        <Alert severity="info" sx={{ mt: 3 }}>
          –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
        </Alert>
      )}
    </Box>
  );
};

export default CarTypeStep;
