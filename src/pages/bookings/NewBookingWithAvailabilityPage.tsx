// –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';
import {
  Box,
  Container,
  Paper,
  Typography,
  Button,
  CircularProgress,
  Alert,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import ClientNavigation from '../../components/client/ClientNavigation';
import { 
  ArrowBack as ArrowBackIcon,
  ArrowForward as ArrowForwardIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
import Stepper from '../../components/ui/Stepper';
import { SuccessDialog } from '../../components/ui/Dialog';

// –ò–º–ø–æ—Ä—Ç —à–∞–≥–æ–≤ —Ñ–æ—Ä–º—ã
import {
  CategorySelectionStep,
  CityServicePointStep,
  DateTimeStep,
  ClientInfoStep,
  CarTypeStep,
  ServicesStep,
  ReviewStep,
} from './components';

// –ò–º–ø–æ—Ä—Ç API —Ö—É–∫–æ–≤
import { 
  useCreateClientBookingMutation,
  useGetBookingByIdQuery,
} from '../../api/bookings.api';
import { useGetCurrentUserQuery } from '../../api/auth.api';

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import { getCardStyles } from '../../styles/components';
import { getThemeColors, getButtonStyles } from '../../styles';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
import { BookingFormData } from '../../types/booking';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤
const STEPS = [
  {
    id: 'category-selection',
    label: '–¢–∏–ø —É—Å–ª—É–≥',
    component: CategorySelectionStep,
  },
  {
    id: 'city-service-point',
    label: '–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ —Ç–æ—á–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
    component: CityServicePointStep,
  },
  {
    id: 'date-time',
    label: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
    component: DateTimeStep,
  },
  {
    id: 'client-info',
    label: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    component: ClientInfoStep,
  },
  {
    id: 'car-type',
    label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ',
    component: CarTypeStep,
  },
  {
    id: 'services',
    label: '–£—Å–ª—É–≥–∏',
    component: ServicesStep,
  },
  {
    id: 'review',
    label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
    component: ReviewStep,
  },
];

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
const initialFormData: BookingFormData = {
  service_category_id: 0, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  service_point_id: null,
  client_id: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  car_id: null,
  booking_date: '',
  start_time: '',
  end_time: '',
  car_type_id: 0,
  services: [],
  service_recipient_first_name: '',
  service_recipient_last_name: '',
  service_recipient_phone: '',
  service_recipient_email: '',
  notes: '',
};

const NewBookingWithAvailabilityPage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const colors = getThemeColors(theme);
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const { isAuthenticated, user } = useSelector((state: RootState) => state.auth);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState<BookingFormData>(initialFormData);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É—Å–ø–µ—Ö–∞
  const [successDialogOpen, setSuccessDialogOpen] = useState(false);
  const [createdBooking, setCreatedBooking] = useState<any>(null);
  
  const { data: currentUser, isLoading: isLoadingCurrentUser, error: currentUserError } = useGetCurrentUserQuery(
    undefined, // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã
    { 
      skip: !isAuthenticated, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      refetchOnMountOrArgChange: true // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    }
  );
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –∏ state (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const searchParams = new URLSearchParams(location.search);
    const servicePointId = searchParams.get('servicePointId');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
    const stateData = location.state as {
      servicePointId?: number;
      servicePointName?: string;
      cityId?: number;
      cityName?: string;
      partnerId?: number;
      partnerName?: string;
      step1Completed?: boolean;
    } | null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –¥–∞–Ω–Ω—ã—Ö –∏–∑ state
    const newFormData = { ...formData };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ (–∏–∑ state –∏–ª–∏ –∏–∑ URL)
    if (stateData?.servicePointId) {
      newFormData.service_point_id = stateData.servicePointId;
      console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∏–∑ state:', stateData.servicePointId, stateData.servicePointName);
    } else if (servicePointId) {
      newFormData.service_point_id = Number(servicePointId);
      console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∏–∑ URL:', servicePointId);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∏–∑ state)
    if (stateData?.cityId) {
      newFormData.city_id = stateData.cityId;
      console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ –∏–∑ state:', stateData.cityId, stateData.cityName);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    setFormData(newFormData);
  }, [location.search, location.state]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', {
      isAuthenticated,
      isLoadingCurrentUser,
      hasUser: !!user,
      hasCurrentUser: !!currentUser,
      currentUserError: currentUserError,
      userFromRedux: user,
      userFromAPI: currentUser,
      currentFormData: formData.client
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API (currentUser) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞–¥ Redux (user)
    const userData = currentUser || user;
    
    if (isAuthenticated && userData && !isLoadingCurrentUser) {
      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
      const shouldPrefill = !formData.client.first_name && !formData.client.phone;
      
      if (shouldPrefill) {
        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π...');
        setFormData(prev => ({
          ...prev,
          client: {
            ...prev.client,
            first_name: userData.first_name || '',
            last_name: userData.last_name || '',
            email: userData.email || '',
            phone: userData.phone || '',
          }
        }));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      } else {
        console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:', {
          current_first_name: formData.client.first_name,
          current_phone: formData.client.phone
        });
      }
    } else if (isAuthenticated && !userData && !isLoadingCurrentUser && currentUserError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserError);
    } else if (isAuthenticated && isLoadingCurrentUser) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    } else if (!isAuthenticated) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    } else {
      console.log('‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:', {
        isAuthenticated,
        hasUserData: !!userData,
        isLoadingCurrentUser
      });
    }
  }, [isAuthenticated, user, currentUser, isLoadingCurrentUser, currentUserError]);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ª—É–≥–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
  useEffect(() => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—É—Å—Ç—ã–µ, –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö
    if (formData.client.first_name && 
        formData.client.phone && 
        !formData.service_recipient.first_name && 
        !formData.service_recipient.phone) {
      setFormData(prev => ({
        ...prev,
        service_recipient: {
          first_name: prev.client.first_name,
          last_name: prev.client.last_name || '',
          phone: prev.client.phone,
          email: prev.client.email,
        }
      }));
    }
  }, [formData.client.first_name, formData.client.last_name, formData.client.phone, formData.client.email]);
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const [createClientBooking] = useCreateClientBookingMutation();
  
  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
  const handleNext = () => {
    if (activeStep < STEPS.length - 1) {
      setActiveStep(prev => prev + 1);
    }
  };
  
  const handleBack = () => {
    if (activeStep > 0) {
      setActiveStep(prev => prev - 1);
    }
  };
  
  const handleStepClick = (stepIndex: number) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if (stepIndex <= activeStep + 1 && stepIndex >= 0) {
      setActiveStep(stepIndex);
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const isCurrentStepValid = useMemo((): boolean => {
    const step = STEPS[activeStep];
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('Validating step:', {
      stepId: step.id,
      formData: {
        service_category_id: formData.service_category_id,
        booking_date: formData.booking_date,
        start_time: formData.start_time,
        service_point_id: formData.service_point_id
      }
    });
    
    switch (step.id) {
      case 'category-selection':
        return formData.service_category_id > 0;
      
      case 'city-service-point':
        return formData.service_point_id !== null;
      
      case 'date-time': {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω—ã
        const hasDate = Boolean(formData.booking_date && formData.booking_date.trim());
        const hasTime = Boolean(formData.start_time && formData.start_time.trim());
        const isValid = hasDate && hasTime;
        
        console.log('Date-time validation result:', {
          hasDate,
          hasTime,
          booking_date: formData.booking_date,
          start_time: formData.start_time,
          isValid
        });
        
        return isValid;
      }
      
      case 'client-info':
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ª—É–≥–∏
        const recipientPhone = formData.service_recipient_phone.replace(/[^\d]/g, '');
        const isRecipientPhoneValid = recipientPhone.length >= 10 && recipientPhone.length <= 15;
        const isRecipientEmailValid = !formData.service_recipient_email || Boolean(formData.service_recipient_email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/));
        
        const isRecipientValid = (
          formData.service_recipient_first_name.trim().length >= 2 &&
          formData.service_recipient_last_name.trim().length >= 2 &&
          isRecipientPhoneValid &&
          isRecipientEmailValid
        );
        
        return isRecipientValid;
      
      case 'car-type':
        return formData.car_type_id && formData.car_type_id > 0;
      
      case 'services':
        return true; // –£—Å–ª—É–≥–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
      
      case 'review':
        return true; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
      
      default:
        return false;
    }
  }, [activeStep, formData, currentUser]);
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      setSubmitError(null);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const bookingData: any = {
        booking: {
          service_point_id: formData.service_point_id,
          booking_date: formData.booking_date,
          start_time: formData.start_time,
          notes: formData.notes || '',
          // –ü–æ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ª—É–≥–∏
          service_recipient_first_name: formData.service_recipient.first_name,
          service_recipient_last_name: formData.service_recipient.last_name,
          service_recipient_phone: formData.service_recipient.phone,
          service_recipient_email: formData.service_recipient.email || ''
        },
        car: {
          car_type_id: formData.car_type_id,
          license_plate: formData.license_plate,
          car_brand: formData.car_brand || '',
          car_model: formData.car_model || ''
        },
        services: formData.services
      };

      // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      // –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç current_user.client
      if (!currentUser) {
        bookingData.client = {
          first_name: formData.client.first_name,
          last_name: formData.client.last_name,
          phone: formData.client.phone.replace(/[^\d+]/g, ''),
          email: formData.client.email || ''
        };
      }

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('Booking data being sent:', bookingData);
      console.log('Current user:', currentUser);
      console.log('Is authenticated:', isAuthenticated);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await createClientBooking(bookingData).unwrap();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setCreatedBooking(response);
      setSuccessDialogOpen(true);

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.data);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. ';
      
      if (error.data?.error) {
        errorMessage += error.data.error;
      }
      
      if (error.data?.details) {
        errorMessage += '\n' + error.data.details.join('\n');
      }
      
      setSubmitError(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSuccessDialogClose = () => {
    setSuccessDialogOpen(false);
    setCreatedBooking(null);
  };

  const handleGoToProfile = () => {
    handleSuccessDialogClose();
    if (currentUser) {
      navigate('/client/profile/bookings');
    } else {
      navigate('/client/auth/login', {
        state: { 
          redirectTo: '/client/profile/bookings',
          message: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
        }
      });
    }
  };

  const handleCreateAnother = () => {
    handleSuccessDialogClose();
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    setFormData(initialFormData);
    setActiveStep(0);
  };

  const handleGoHome = () => {
    handleSuccessDialogClose();
    navigate('/client');
  };
  
  // –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const renderCurrentStep = () => {
    const CurrentStepComponent = STEPS[activeStep].component;
    
    return (
      <CurrentStepComponent
        formData={formData}
        setFormData={setFormData}
        onNext={handleNext}
        onBack={handleBack}
        isValid={isCurrentStepValid}
      />
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const updateFormData = (data: Partial<BookingFormData>) => {
    setFormData(prev => ({ ...prev, ...data }));
  };

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
      <ClientNavigation colors={colors} secondaryButtonStyles={secondaryButtonStyles} />
      <Container maxWidth="lg" sx={{ py: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(-1)}
            variant="outlined"
            size="small"
          >
            –ù–∞–∑–∞–¥
          </Button>
          <Typography variant="h4" component="h1" sx={{ fontWeight: 600 }}>
            –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          </Typography>
        </Box>
        
        {/* Stepper */}
        <Paper sx={{ ...getCardStyles(theme), mb: 3, p: 3 }}>
          <Stepper
            steps={STEPS.map(step => ({
              label: step.label,
              content: <div />
            }))}
            activeStep={activeStep}
            onStepChange={handleStepClick}
            orientation={isMobile ? 'vertical' : 'horizontal'}
          />
        </Paper>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
        <Paper sx={{ ...getCardStyles(theme), p: 3 }}>
          {renderCurrentStep()}
          
          {/* –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          {submitError && (
            <Alert severity="error" sx={{ mt: 2 }}>
              {submitError}
            </Alert>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            mt: 4,
            flexDirection: isMobile ? 'column' : 'row',
            gap: 2
          }}>
            <Button
              onClick={handleBack}
              disabled={activeStep === 0}
              variant="outlined"
              startIcon={<ArrowBackIcon />}
            >
              –ù–∞–∑–∞–¥
            </Button>
            
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" color="text.secondary">
                –®–∞–≥ {activeStep + 1} –∏–∑ {STEPS.length}
              </Typography>
            </Box>
            
            {activeStep === STEPS.length - 1 ? (
              <Button
                onClick={handleSubmit}
                disabled={!isCurrentStepValid || isSubmitting}
                variant="contained"
                endIcon={isSubmitting ? <CircularProgress size={16} /> : <CheckCircleIcon />}
              >
                {isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}
              </Button>
            ) : (
              <Button
                onClick={handleNext}
                disabled={!isCurrentStepValid}
                variant="contained"
                endIcon={<ArrowForwardIcon />}
              >
                –î–∞–ª–µ–µ
              </Button>
            )}
          </Box>
        </Paper>
      </Container>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <SuccessDialog
        open={successDialogOpen}
        title="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!"
        message="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!"
        description="–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
        bookingDetails={createdBooking ? {
          id: createdBooking.id,
          date: createdBooking.booking_date,
          time: createdBooking.start_time,
          servicePoint: createdBooking.service_point?.name,
          servicePointAddress: createdBooking.service_point?.city?.name 
            ? `${createdBooking.service_point.city.name}, ${createdBooking.service_point?.address}`