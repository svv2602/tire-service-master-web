import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../../store/store';
import {
  Box,
  Container,
  Typography,
  Grid,
  IconButton,
  InputAdornment,
  Skeleton,
  Fade,
  useTheme,
  Button,
  Card,
  CardContent,
  CardActions,
  Chip,
  FormControlLabel,
  Switch,
  TextField,
  Alert
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Search as SearchIcon,
  Web as WebIcon,
  Settings as SettingsIcon,
  ContentCopy as ContentIcon,
  DragIndicator as DragIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';
import { 
  getCardStyles, 
  getButtonStyles, 
  getTextFieldStyles,
  SIZES,
  getThemeColors 
} from '../../styles';
import { 
  useGetPageContentsQuery,
  useDeletePageContentMutation,
  useUpdatePageContentMutation
} from '../../api/pageContent.api';

// –ò–º–ø–æ—Ä—Ç—ã UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

const PageContentPage: React.FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  
  // Redux state
  const { isAuthenticated } = useSelector((state: RootState) => state.auth);
  
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme, 'filled');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [searchQuery, setSearchQuery] = useState('');
  const [showInactive, setShowInactive] = useState(false);
  
  // API –∑–∞–ø—Ä–æ—Å—ã
  const {
    data: pageContentData,
    isLoading,
    error,
    refetch
  } = useGetPageContentsQuery({});
  
  const [deletePage] = useDeletePageContentMutation();
  const [updatePage] = useUpdatePageContentMutation();
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredPages = pageContentData?.data?.filter(page => {
    const matchesSearch = page.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         page.section.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         page.content.toLowerCase().includes(searchQuery.toLowerCase());
    
    // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    // –ï—Å–ª–∏ showInactive = true, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
    // –ï—Å–ª–∏ showInactive = false, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    const matchesActive = showInactive ? true : page.active;
    
    return matchesSearch && matchesActive;
  }) || [];

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç PageContentPage Debug Info:');
    console.log('üìä All Pages:', pageContentData?.data);
    console.log('üî¢ Total Pages Count:', pageContentData?.data?.length);
    console.log('üîç Search Query:', searchQuery);
    console.log('üëÅÔ∏è Show Inactive:', showInactive);
    console.log('üìã Filtered Pages:', filteredPages);
    console.log('üî¢ Filtered Count:', filteredPages.length);
    console.log('‚ùå Inactive Pages:', pageContentData?.data?.filter(p => !p.active));
    console.log('‚úÖ Active Pages:', pageContentData?.data?.filter(p => p.active));
    console.log('üîë Auth State:', isAuthenticated ? '–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    console.log('üì° API Response:', pageContentData);
    console.log('‚ö†Ô∏è API Error:', error);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleToggleActive = async (pageId: number, currentActive: boolean) => {
    try {
      await updatePage({
        id: pageId,
        active: !currentActive
      }).unwrap();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDelete = async (pageId: number, pageTitle: string) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç "${pageTitle}"?`)) {
      try {
        await deletePage(pageId).unwrap();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      }
    }
  };
  
  // –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  const getContentTypeInfo = (contentType: string) => {
    const contentTypes: Record<string, { name: string; icon: string; color: string }> = {
      'hero': { name: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä', icon: 'üéØ', color: 'primary' },
      'service': { name: '–£—Å–ª—É–≥–∞', icon: 'üîß', color: 'secondary' },
      'city': { name: '–ì–æ—Ä–æ–¥', icon: 'üèôÔ∏è', color: 'info' },
      'article': { name: '–°—Ç–∞—Ç—å—è', icon: 'üìù', color: 'success' },
      'cta': { name: '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é', icon: 'üì¢', color: 'warning' },
      'footer': { name: '–ü–æ–¥–≤–∞–ª', icon: 'üìÑ', color: 'default' }
    };
    
    return contentTypes[contentType] || { 
      name: contentType, 
      icon: 'üìÑ', 
      color: 'default' 
    };
  };

  if (isLoading) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Typography variant="h4" sx={{ mb: 4, fontSize: SIZES.fontSize.xl, fontWeight: 600 }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
        </Typography>
        <Grid container spacing={3}>
          {[1, 2, 3, 4].map((i) => (
            <Grid item xs={12} md={6} lg={4} key={i}>
              <Skeleton variant="rectangular" height={300} sx={{ borderRadius: 2 }} />
            </Grid>
          ))}
        </Grid>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Alert severity="error">
          ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        </Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Typography variant="h4" sx={{ fontSize: SIZES.fontSize.xl, fontWeight: 600 }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={() => refetch()}
            disabled={isLoading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => navigate('/page-content/new')}
          >
            –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
          </Button>
        </Box>
      </Box>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <Card sx={{ mb: 4, p: 3 }}>
        <Typography variant="body1" color="text.secondary">
          –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, 
          –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É—Å–ª—É–≥–∏, –∏–∑–º–µ–Ω—è—Ç—å hero-—Å–µ–∫—Ü–∏–∏ –∏ CTA –±–ª–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
        </Typography>
      </Card>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card sx={{ mb: 4, p: 3 }}>
        <Grid container spacing={3} alignItems="center">
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              label="–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
              value={searchQuery}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}
              placeholder="–ù–∞–π—Ç–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É..."
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                )
              }}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={showInactive}
                  onChange={(event) => setShowInactive(event.target.checked)}
                />
              }
              label="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            />
          </Grid>
        </Grid>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      <Grid container spacing={3}>
        {filteredPages.map((page) => {
          const contentInfo = getContentTypeInfo(page.content_type);
          
          return (
            <Grid item xs={12} md={6} lg={4} key={page.id}>
              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flexGrow: 1 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="h5">{contentInfo.icon}</Typography>
                      <Chip 
                        label={contentInfo.name} 
                        size="small" 
                        color={contentInfo.color as any}
                        variant="outlined"
                      />
                    </Box>
                    <Chip 
                      label={page.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} 
                      size="small"
                      color={page.active ? 'success' : 'default'}
                    />
                  </Box>
                  
                  <Typography variant="h6" sx={{ mb: 1, fontWeight: 600 }}>
                    {page.title}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    –°–µ–∫—Ü–∏—è: {page.section}
                  </Typography>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ 
                      display: '-webkit-box',
                      WebkitLineClamp: 3,
                      WebkitBoxOrient: 'vertical',
                      overflow: 'hidden'
                    }}
                  >
                    {page.content}
                  </Typography>
                  
                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Typography variant="caption" color="text.secondary">
                      –ü–æ–∑–∏—Ü–∏—è: {page.position}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      ID: {page.id}
                    </Typography>
                  </Box>
                </CardContent>
                
                <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>
                  <Box>
                    <IconButton
                      size="small"
                      onClick={() => navigate(`/page-content/${page.id}/edit`)}
                      color="primary"
                    >
                      <EditIcon />
                    </IconButton>
                    <IconButton
                      size="small"
                      onClick={() => handleToggleActive(page.id, page.active)}
                      color={page.active ? 'warning' : 'success'}
                    >
                      {page.active ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </Box>
                  <IconButton
                    size="small"
                    onClick={() => handleDelete(page.id, page.title)}
                    color="error"
                  >
                    <DeleteIcon />
                  </IconButton>
                </CardActions>
              </Card>
            </Grid>
          );
        })}
      </Grid>

      {filteredPages.length === 0 && (
        <Card sx={{ p: 6, textAlign: 'center' }}>
          <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
            –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {searchQuery ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞'}
          </Typography>
        </Card>
      )}
    </Container>
  );
};

export default PageContentPage; 