import React from 'react';
import {
  Box,
  Typography,
  Paper,
  Button,
  Rating,
  TextField,
  Alert,
  CircularProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  useTheme,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Star as StarIcon,
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useNavigate, useParams } from 'react-router-dom';
import {
  useGetBookingsByClientQuery,
  useCreateReviewMutation,
  useGetReviewByIdQuery,
  useUpdateReviewMutation,
  useDeleteReviewMutation,
  useGetUsersQuery,
  useGetServicePointsQuery,
} from '../../api';
import { useGetClientsQuery } from '../../api/clients.api';
import { Booking } from '../../types/models';
import { User } from '../../types/user';
import { ServicePoint } from '../../types/models';
import { getCardStyles, getButtonStyles, getTextFieldStyles } from '../../styles/components';
import { SIZES } from '../../styles/theme';
import { ReviewStatus } from '../../types/review';
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';
import DialogContent from '@mui/material/DialogContent';
import DialogActions from '@mui/material/DialogActions';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–µ
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –í—ã–±–æ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
 * - –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥
 * - –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ UI
 */

const ReviewFormPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();
  const [createReview, { isLoading: isSubmitting }] = useCreateReviewMutation();
  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
  const cardStyles = getCardStyles(theme);
  const primaryButtonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme);
  // –ü–æ–ª—É—á–∞–µ–º id –∏–∑ URL
  const { id } = useParams<{ id?: string }>();
  const isEditMode = !!id;

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [selectedClientId, setSelectedClientId] = React.useState<string>('');
  const [selectedBookingId, setSelectedBookingId] = React.useState<string>('');
  const [selectedServicePointId, setSelectedServicePointId] = React.useState<string>('');
  const [rating, setRating] = React.useState<number>(0);
  const [comment, setComment] = React.useState('');
  const [status, setStatus] = React.useState<ReviewStatus>('published');
  const [formError, setFormError] = React.useState<string | null>(null);
  const [success, setSuccess] = React.useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);

  // RTK Query —Ö—É–∫–∏
  const { data: clientsData, isLoading: clientsLoading } = useGetClientsQuery({ per_page: 100 });
  const { data: clientBookingsData, isLoading: adminBookingsLoading } = useGetBookingsByClientQuery(
    selectedClientId, 
    { skip: !selectedClientId || selectedClientId === '' }
  );
  const { data: servicePointsData } = useGetServicePointsQuery({});
  // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
  const { data: reviewData, isLoading: reviewLoading, error: reviewError } = useGetReviewByIdQuery(id!, { skip: !isEditMode });
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  React.useEffect(() => {
    if (isEditMode) {
      console.log('üîç –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, ID:', id);
      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞:', reviewData);
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞:', reviewLoading);
      console.log('‚ùå –û—à–∏–±–∫–∞:', reviewError);
    }
  }, [isEditMode, id, reviewData, reviewLoading, reviewError]);
  const [updateReview, { isLoading: isUpdating }] = useUpdateReviewMutation();
  const [deleteReview, { isLoading: isDeleting }] = useDeleteReviewMutation();

  // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userRole = useSelector((state: RootState) => state.auth.user?.role);
  const isAdmin = userRole === 'admin';
  const userId = useSelector((state: RootState) => state.auth.user?.id);

  // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ reviewData
  React.useEffect(() => {
    if (isEditMode && reviewData) {
      console.log('üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reviewData);
      setSelectedClientId(String(reviewData.client?.id || ''));
      setSelectedBookingId(reviewData.booking?.id ? String(reviewData.booking.id) : '');
      setSelectedServicePointId(String(reviewData.service_point?.id || ''));
      setRating(reviewData.rating || 0);
      setComment(reviewData.comment || '');
      setStatus(reviewData.status || 'published');
    }
  }, [isEditMode, reviewData]);

  const handleBack = () => {
    navigate('/my-reviews');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormValid = () => {
    if (!selectedClientId) return false;
    if (!selectedBookingId && !selectedServicePointId) return false;
    if (!rating || rating === 0) return false;
    if (!comment || comment.trim() === '') return false;
    return true;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const getRequiredFieldErrors = () => {
    const errors: string[] = [];
    
    if (!selectedClientId) {
      errors.push(t('forms.review.requiredFields.client'));
    }
    
    if (!selectedBookingId && !selectedServicePointId) {
      errors.push(t('forms.review.requiredFields.bookingOrServicePoint'));
    }
    
    if (!rating || rating === 0) {
      errors.push(t('forms.review.requiredFields.rating'));
    }
    
    if (!comment || comment.trim() === '') {
      errors.push(t('forms.review.requiredFields.reviewText'));
    }
    
    return errors;
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π submit –¥–ª—è –∞–¥–º–∏–Ω–∞
  const handleAdminSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError(null);
    try {
      let service_point_id = selectedServicePointId;
      if (selectedBookingId && clientBookingsData?.data) {
        const booking = clientBookingsData.data.find(b => String(b.id) === selectedBookingId);
        if (booking) {
          service_point_id = String(booking.service_point_id);
        }
      }
      if (!isFormValid()) {
        setFormError(t('forms.review.validation.fillAllFields'));
        return;
      }
      if (isEditMode && id) {
        await updateReview({
          id,
          data: {
            service_point_id: service_point_id,
            rating,
            comment,
            ...(selectedBookingId ? { booking_id: selectedBookingId } : {}),
            client_id: selectedClientId,
            status,
          } as any,
        }).unwrap();
        setSuccess(true);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(() => navigate('/admin/reviews'), 1500);
      } else {
        if (selectedBookingId) {
          // –°—Ç–∞—Ä—ã–π –ø—É—Ç—å ‚Äî —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await createReview({
            client_id: Number(selectedClientId),
            data: {
              booking_id: Number(selectedBookingId),
              rating,
              comment,
            }
          }).unwrap();
        } else {
          // –ù–æ–≤—ã–π –ø—É—Ç—å ‚Äî –±–µ–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (POST /reviews)
          await createReview({
            data: {
              client_id: selectedClientId,
              service_point_id: service_point_id,
              rating,
              comment,
              status,
            }
          }).unwrap();
        }
        setSuccess(true);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        setTimeout(() => navigate('/admin/reviews'), 1500);
        setSelectedClientId('');
        setSelectedBookingId('');
        setSelectedServicePointId('');
        setRating(0);
        setComment('');
        setStatus('published');
      }
    } catch (error: any) {
      setFormError(error?.data?.message || t('forms.review.messages.saveError'));
    }
  };

  const handleDelete = async () => {
    if (!id) return;
    try {
      await deleteReview(id).unwrap();
      setDeleteDialogOpen(false);
      navigate('/admin/reviews');
    } catch (error: any) {
      setFormError(error?.data?.message || t('forms.review.messages.deleteError'));
    }
  };

  if (isAdmin) {
    if (clientsLoading || adminBookingsLoading || (isEditMode && reviewLoading)) {
      return <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px"><CircularProgress /></Box>;
    }

    return (
      <Box sx={{ padding: SIZES.spacing.xl }}>
        <Typography variant="h4" sx={{ mb: 2 }}>
          {isEditMode ? t('forms.review.title.editAdmin') : t('forms.review.title.createAdmin')}
        </Typography>
        {success && (
          <Alert severity="success" sx={{ mb: 2 }}>
            {isEditMode ? t('forms.review.messages.updateSuccess') : t('forms.review.messages.createSuccess')} {t('forms.review.messages.redirecting')}
          </Alert>
        )}
        {formError && (
          <Alert severity="error" sx={{ mb: 2 }}>{formError}</Alert>
        )}
        <Paper sx={{ ...cardStyles, maxWidth: 600 }}>
          <form onSubmit={handleAdminSubmit}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: SIZES.spacing.xl }}>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>{t('forms.review.fields.client')}</InputLabel>
                <Select
                  value={selectedClientId}
                  label={t("forms.review.fields.client")}
                  onChange={e => {
                    setSelectedClientId(e.target.value);
                    setSelectedBookingId('');
                  }}
                  disabled={isEditMode}
                >
                  <MenuItem value="">{t('forms.review.placeholders.selectClient')}</MenuItem>
                  {clientsData?.data.map((client: any) => (
                    <MenuItem key={client.id} value={client.id}>
                      {client.user?.last_name || '–§–∞–º–∏–ª–∏—è'} {client.user?.first_name || '–ò–º—è'} ({client.user?.email || 'email'})
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>{t('forms.review.fields.booking')}</InputLabel>
                <Select
                  value={selectedBookingId}
                  label={t("forms.review.fields.booking")}
                  onChange={e => setSelectedBookingId(e.target.value)}
                  disabled={!selectedClientId || !clientBookingsData?.data?.length || isEditMode}
                >
                  <MenuItem value="">{t('forms.review.placeholders.withoutBooking')}</MenuItem>
                  {clientBookingsData?.data?.map(booking => (
                    <MenuItem key={booking.id} value={booking.id}>
                      {booking.service_point?.name} - {new Date(booking.booking_date).toLocaleDateString()}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>{t('forms.review.fields.servicePoint')}</InputLabel>
                <Select
                  value={selectedServicePointId}
                  label={t("forms.review.fields.servicePoint")}
                  onChange={e => setSelectedServicePointId(e.target.value)}
                  disabled={!!selectedBookingId || isEditMode}
                >
                  <MenuItem value="">{t('forms.review.placeholders.selectServicePoint')}</MenuItem>
                  {servicePointsData?.data?.map((point: ServicePoint) => (
                    <MenuItem key={point.id} value={point.id}>{point.name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Box>
                <Typography component="legend" sx={{ fontSize: SIZES.fontSize.md, fontWeight: 500, marginBottom: SIZES.spacing.sm }}>
                  {t('forms.review.fields.rating')}
                </Typography>
                <Rating
                  name="rating"
                  value={rating}
                  onChange={(_e, newValue) => setRating(newValue || 0)}
                  size="large"
                  sx={{ '& .MuiRating-iconFilled': { color: theme.palette.primary.main }, '& .MuiRating-iconHover': { color: theme.palette.primary.light } }}
                />
              </Box>
              <TextField
                fullWidth
                multiline
                rows={4}
                name="comment"
                label={t("forms.review.fields.reviewText")}
                value={comment}
                onChange={e => setComment(e.target.value)}
                sx={textFieldStyles}
              />
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>{t('forms.review.fields.status')}</InputLabel>
                <Select
                  value={status}
                  label={t("forms.review.fields.status")}
                  onChange={e => setStatus(e.target.value as ReviewStatus)}
                >
                  <MenuItem value="published">{t('forms.review.statuses.published')}</MenuItem>
                  <MenuItem value="pending">{t('forms.review.statuses.pending')}</MenuItem>
                  <MenuItem value="rejected">{t('forms.review.statuses.rejected')}</MenuItem>
                </Select>
              </FormControl>

              {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö */}
              {(!isFormValid()) && (
                <Alert severity="warning" sx={{ mt: 3 }}>
                  <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
                    {t('forms.review.validation.fillAllFields')}:
                  </Typography>
                  <Box component="ul" sx={{ pl: 2, mb: 0, mt: 1 }}>
                    {getRequiredFieldErrors().map((field, index) => (
                      <Typography variant="body2" component="li" key={index}>
                        {field}
                      </Typography>
                    ))}
                  </Box>
                </Alert>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ */}
              {isFormValid() && !success && (
                <Alert severity="info" sx={{ mt: 3 }}>
                  {t('forms.review.validation.allFieldsFilled')}
                </Alert>
              )}

              <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: SIZES.spacing.md, marginTop: SIZES.spacing.lg }}>
                <Button onClick={() => navigate('/admin/reviews')} sx={secondaryButtonStyles}>{t('forms.review.buttons.cancel')}</Button>
                <Box>
                  {isEditMode && (
                    <Button color="error" sx={{ mr: 2 }} onClick={() => setDeleteDialogOpen(true)} disabled={isDeleting}>
                      {isDeleting ? t('forms.review.messages.deleting') : t('forms.review.buttons.delete')}
                    </Button>
                  )}
                  <Button type="submit" variant="contained" disabled={isSubmitting || isUpdating || !isFormValid()} startIcon={<StarIcon />} sx={primaryButtonStyles}>
                    {isEditMode ? (isUpdating ? t('forms.review.messages.saving') : t('forms.review.buttons.saveChanges')) : (isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : t('forms.review.buttons.save'))}
                  </Button>
                </Box>
              </Box>
            </Box>
          </form>
        </Paper>
        <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
          <DialogTitle>{t('common.confirmDelete')}</DialogTitle>
          <DialogContent>
            <Typography>{t('forms.review.messages.deleteConfirm')}</Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button onClick={handleDelete} color="error" disabled={isDeleting}>–£–¥–∞–ª–∏—Ç—å</Button>
          </DialogActions>
        </Dialog>
      </Box>
    );
  }

  // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç formik, —É–¥–∞–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é formik
  if (!isAdmin && adminBookingsLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }
  const bookings = clientBookingsData?.data || [];
  if (!isAdmin && bookings.length === 0) {
    return (
      <Box sx={{ padding: SIZES.spacing.xl }}>
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: SIZES.spacing.sm, 
          marginBottom: SIZES.spacing.xl 
        }}>
          <Button 
            startIcon={<ArrowBackIcon />} 
            onClick={handleBack}
            sx={secondaryButtonStyles}
          >
            –ù–∞–∑–∞–¥
          </Button>
          <Typography 
            variant="h4"
            sx={{
              fontSize: SIZES.fontSize.xl,
              fontWeight: 600,
            }}
          >
            –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤
          </Typography>
        </Box>
        <Alert severity="info">
          {t('forms.review.messages.noBookings')}
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ padding: SIZES.spacing.xl }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ 
        display: 'flex', 
        alignItems: 'center', 
        gap: SIZES.spacing.sm, 
        marginBottom: SIZES.spacing.xl 
      }}>
        <Button 
          startIcon={<ArrowBackIcon />} 
          onClick={handleBack}
          sx={secondaryButtonStyles}
        >
          –ù–∞–∑–∞–¥
        </Button>
        <Typography 
          variant="h4"
          sx={{
            fontSize: SIZES.fontSize.xl,
            fontWeight: 600,
          }}
        >
          –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤
        </Typography>
      </Box>

      {/* –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <Paper sx={{ ...cardStyles, maxWidth: 600 }}>
        <form
          onSubmit={async (e) => {
            e.preventDefault();
            setFormError(null);
            setSuccess(false);
            if (!selectedBookingId || !rating || !comment) {
              setFormError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
              return;
            }
            try {
              await createReview({
                client_id: userId!,
                data: {
                  booking_id: Number(selectedBookingId),
                  rating,
                  comment,
                } as any
              }).unwrap();
              setSuccess(true);
              setSelectedBookingId('');
              setRating(0);
              setComment('');
            } catch (error: any) {
              setFormError(error?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
            }
          }}
        >
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: SIZES.spacing.xl 
          }}>
            {success && (
              <Alert severity="success">{t('forms.review.messages.createSuccess')}</Alert>
            )}
            {formError && (
              <Alert severity="error">{formError}</Alert>
            )}
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>{t('forms.review.placeholders.selectBooking')}</InputLabel>
              <Select
                name="booking_id"
                value={selectedBookingId}
                onChange={e => setSelectedBookingId(e.target.value)}
                label={t("forms.review.placeholders.selectBooking")}
                sx={{
                  ...textFieldStyles,
                  '& .MuiSelect-select': {
                    borderRadius: SIZES.borderRadius.sm,
                  }
                }}
              >
                {bookings.map((booking: Booking) => (
                  <MenuItem key={booking.id} value={booking.id}>
                    {booking.service_point?.name} - {new Date(booking.booking_date).toLocaleDateString()}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <Box>
              <Typography 
                component="legend"
                sx={{
                  fontSize: SIZES.fontSize.md,
                  fontWeight: 500,
                  marginBottom: SIZES.spacing.sm,
                }}
              >
                {t('forms.review.fields.yourRating')}
              </Typography>
              <Rating
                name="rating"
                value={rating}
                onChange={(_event, newValue) => setRating(newValue || 0)}
                size="large"
                sx={{
                  '& .MuiRating-iconFilled': {
                    color: theme.palette.primary.main,
                  },
                  '& .MuiRating-iconHover': {
                    color: theme.palette.primary.light,
                  },
                }}
              />
            </Box>

            <TextField
              fullWidth
              multiline
              rows={4}
              name="comment"
              label="–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞"
              value={comment}
              onChange={e => setComment(e.target.value)}
              sx={textFieldStyles}
            />

            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'flex-end', 
              gap: SIZES.spacing.md, 
              marginTop: SIZES.spacing.lg 
            }}>
              <Button 
                onClick={handleBack}
                sx={secondaryButtonStyles}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                type="submit"
                variant="contained"
                disabled={isSubmitting}
                startIcon={<StarIcon />}
                sx={primaryButtonStyles}
              >
                {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : t('forms.review.buttons.publish')}
              </Button>
            </Box>
          </Box>
        </form>
      </Paper>
    </Box>
  );
};

export default ReviewFormPage;