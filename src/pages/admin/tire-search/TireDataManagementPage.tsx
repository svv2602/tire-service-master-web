import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  LinearProgress,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Tooltip,
  CircularProgress
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  Update as UpdateIcon,
  History as HistoryIcon,
  Delete as DeleteIcon,
  Analytics as AnalyticsIcon,
  CloudUpload as CloudUploadIcon,
  Undo as UndoIcon,
  CleaningServices as CleaningServicesIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface TireDataVersion {
  id: string;
  version: string;
  source_description: string;
  imported_at: string;
  is_active: boolean;
  configurations_count: number;
  brands_count: number;
  models_count: number;
  file_checksums: Record<string, string>;
}

interface TireDataStatistics {
  current_version: string;
  last_updated: string;
  totals: {
    configurations: number;
    brands: number;
    models: number;
    versions: number;
  };
  distributions: {
    years: Record<string, number>;
    diameters: Record<string, number>;
    top_brands: Record<string, number>;
  };
  data_quality: {
    active_configurations: number;
    deprecated_configurations: number;
    configurations_with_aliases: number;
  };
}

const TireDataManagementPage: React.FC = () => {
  const { t } = useTranslation(['admin', 'common']);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [versions, setVersions] = useState<TireDataVersion[]>([]);
  const [currentVersion, setCurrentVersion] = useState<TireDataVersion | null>(null);
  const [statistics, setStatistics] = useState<TireDataStatistics | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
  const [updateDialogOpen, setUpdateDialogOpen] = useState(false);
  const [rollbackDialogOpen, setRollbackDialogOpen] = useState(false);
  const [cleanupDialogOpen, setCleanupDialogOpen] = useState(false);
  const [selectedVersion, setSelectedVersion] = useState<string>('');
  const [sourceDescription, setSourceDescription] = useState('');
  const [csvDirectory, setCsvDirectory] = useState('');
  const [keepVersions, setKeepVersions] = useState(5);

  // API –±–∞–∑–æ–≤—ã–π URL
  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  const makeApiRequest = async (endpoint: string, method: string = 'GET', body?: any) => {
    const token = localStorage.getItem('token');
    
    const config: RequestInit = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    };

    if (body) {
      config.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `HTTP ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadVersions = async () => {
    try {
      setLoading(true);
      const data = await makeApiRequest('/admin/tire_data/versions');
      setVersions(data.versions || []);
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const loadCurrentVersion = async () => {
    try {
      const data = await makeApiRequest('/admin/tire_data/current_version');
      setCurrentVersion(data.version);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏:', error);
    }
  };

  const loadStatistics = async () => {
    try {
      const data = await makeApiRequest('/admin/tire_data/statistics');
      setStatistics(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  // –î–µ–π—Å—Ç–≤–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
  const handleUpdateData = async () => {
    if (!sourceDescription.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const body: any = { source_description: sourceDescription };
      if (csvDirectory.trim()) {
        body.csv_directory = csvDirectory;
      }

      const result = await makeApiRequest('/admin/tire_data/update', 'POST', body);
      
      setSuccess(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${result.version}`);
      setUpdateDialogOpen(false);
      setSourceDescription('');
      setCsvDirectory('');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await Promise.all([loadVersions(), loadCurrentVersion(), loadStatistics()]);
      
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const handleRollback = async () => {
    if (!selectedVersion) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const result = await makeApiRequest(`/admin/tire_data/rollback?version=${encodeURIComponent(selectedVersion)}`, 'DELETE');
      
      setSuccess(`–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ ${result.version}`);
      setRollbackDialogOpen(false);
      setSelectedVersion('');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await Promise.all([loadVersions(), loadCurrentVersion(), loadStatistics()]);
      
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const handleCleanup = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await makeApiRequest('/admin/tire_data/cleanup', 'POST', { keep_versions: keepVersions });
      
      setSuccess(`–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –≤–µ—Ä—Å–∏–π: ${result.deleted_versions}`);
      setCleanupDialogOpen(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadVersions();
      
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–µ—Ä—Å–∏–π: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    Promise.all([loadVersions(), loadCurrentVersion(), loadStatistics()]);
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleCloseError = () => setError(null);
  const handleCloseSuccess = () => setSuccess(null);

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∏—Å–∫–∞ —à–∏–Ω
        </Typography>
        <Typography variant="body1" color="text.secondary">
          –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —à–∏–Ω
        </Typography>
      </Box>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {error && (
        <Alert severity="error" onClose={handleCloseError} sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}
      
      {success && (
        <Alert severity="success" onClose={handleCloseSuccess} sx={{ mb: 2 }}>
          {success}
        </Alert>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && <LinearProgress sx={{ mb: 2 }} />}

      <Grid container spacing={3}>
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Grid item xs={12} md={8}>
          {/* –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <CheckCircleIcon color="success" sx={{ mr: 1 }} />
                <Typography variant="h6">–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è</Typography>
              </Box>
              
              {currentVersion ? (
                <Box>
                  <Typography variant="h5" color="primary" gutterBottom>
                    {currentVersion.version}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    {currentVersion.source_description}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {new Date(currentVersion.imported_at).toLocaleString('ru')}
                  </Typography>
                  
                  <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>
                    <Chip 
                      label={`${currentVersion.configurations_count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π`} 
                      color="primary" 
                      size="small" 
                    />
                    <Chip 
                      label={`${currentVersion.brands_count} –±—Ä–µ–Ω–¥–æ–≤`} 
                      color="secondary" 
                      size="small" 
                    />
                    <Chip 
                      label={`${currentVersion.models_count} –º–æ–¥–µ–ª–µ–π`} 
                      color="info" 
                      size="small" 
                    />
                  </Box>
                </Box>
              ) : (
                <Typography color="text.secondary">
                  –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                </Typography>
              )}
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          {statistics && (
            <Card sx={{ mb: 3 }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <AnalyticsIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="h6">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</Typography>
                </Box>
                
                <Grid container spacing={2}>
                  <Grid item xs={6} sm={3}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" color="primary">
                        {statistics.totals.configurations}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" color="secondary">
                        {statistics.totals.brands}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        –ë—Ä–µ–Ω–¥–æ–≤
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" color="info.main">
                        {statistics.totals.models}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        –ú–æ–¥–µ–ª–µ–π
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" color="success.main">
                        {statistics.totals.versions}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        –í–µ—Ä—Å–∏–π
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>

                <Divider sx={{ my: 2 }} />

                {/* –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ */}
                <Typography variant="subtitle1" gutterBottom>
                  –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:
                </Typography>
                <List dense>
                  {Object.entries(statistics.distributions.top_brands)
                    .slice(0, 5)
                    .map(([brand, count]) => (
                      <ListItem key={brand} sx={{ py: 0.5 }}>
                        <ListItemIcon sx={{ minWidth: 36 }}>
                          <Box 
                            sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'primary.main' 
                            }} 
                          />
                        </ListItemIcon>
                        <ListItemText 
                          primary={`${brand}: ${count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π`}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                </List>
              </CardContent>
            </Card>
          )}

          {/* –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π */}
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <HistoryIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="h6">–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π</Typography>
                </Box>
                <Button
                  startIcon={<RefreshIcon />}
                  onClick={loadVersions}
                  disabled={loading}
                >
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </Box>

              <TableContainer component={Paper} variant="outlined">
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>–í–µ—Ä—Å–∏—è</TableCell>
                      <TableCell>–û–ø–∏—Å–∞–Ω–∏–µ</TableCell>
                      <TableCell>–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞</TableCell>
                      <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                      <TableCell align="right">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</TableCell>
                      <TableCell align="center">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {versions.map((version) => (
                      <TableRow key={version.id}>
                        <TableCell>
                          <Typography variant="body2" fontWeight="medium">
                            {version.version}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2" color="text.secondary">
                            {version.source_description}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2">
                            {new Date(version.imported_at).toLocaleDateString('ru')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Chip
                            label={version.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞—è' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è'}
                            color={version.is_active ? 'success' : 'default'}
                            size="small"
                          />
                        </TableCell>
                        <TableCell align="right">
                          <Typography variant="body2">
                            {version.configurations_count}
                          </Typography>
                        </TableCell>
                        <TableCell align="center">
                          {!version.is_active && (
                            <Tooltip title="–û—Ç–∫–∞—Ç–∏—Ç—å –∫ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏">
                              <IconButton
                                size="small"
                                onClick={() => {
                                  setSelectedVersion(version.version);
                                  setRollbackDialogOpen(true);
                                }}
                              >
                                <UndoIcon />
                              </IconButton>
                            </Tooltip>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </Grid>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–µ–π—Å—Ç–≤–∏—è */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                {/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö */}
                <Button
                  variant="contained"
                  color="primary"
                  startIcon={<UpdateIcon />}
                  onClick={() => setUpdateDialogOpen(true)}
                  disabled={loading}
                  fullWidth
                >
                  –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>

                {/* –û—Ç–∫–∞—Ç –≤–µ—Ä—Å–∏–∏ */}
                <Button
                  variant="outlined"
                  color="warning"
                  startIcon={<UndoIcon />}
                  onClick={() => setRollbackDialogOpen(true)}
                  disabled={loading || versions.length <= 1}
                  fullWidth
                >
                  –û—Ç–∫–∞—Ç–∏—Ç—å –≤–µ—Ä—Å–∏—é
                </Button>

                {/* –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π */}
                <Button
                  variant="outlined"
                  color="error"
                  startIcon={<CleaningServicesIcon />}
                  onClick={() => setCleanupDialogOpen(true)}
                  disabled={loading || versions.length <= 2}
                  fullWidth
                >
                  –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
                </Button>

                <Divider />

                {/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
                <Button
                  variant="text"
                  startIcon={<RefreshIcon />}
                  onClick={loadStatistics}
                  disabled={loading}
                  fullWidth
                >
                  –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –î–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
      <Dialog
        open={updateDialogOpen}
        onClose={() => setUpdateDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <CloudUploadIcon sx={{ mr: 1 }} />
            –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ —à–∏–Ω
          </Box>
        </DialogTitle>
        <DialogContent>
          <Alert severity="warning" sx={{ mb: 2 }}>
            <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ.
          </Alert>
          
          <TextField
            label="–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            value={sourceDescription}
            onChange={(e) => setSourceDescription(e.target.value)}
            fullWidth
            required
            margin="normal"
            placeholder="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"
          />
          
          <TextField
            label="–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            value={csvDirectory}
            onChange={(e) => setCsvDirectory(e.target.value)}
            fullWidth
            margin="normal"
            placeholder="/path/to/csv/files"
            helperText="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—É—Ç–∏"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setUpdateDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleUpdateData}
            variant="contained"
            disabled={loading || !sourceDescription.trim()}
            startIcon={loading ? <CircularProgress size={20} /> : <UpdateIcon />}
          >
            {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –æ—Ç–∫–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ */}
      <Dialog
        open={rollbackDialogOpen}
        onClose={() => setRollbackDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <UndoIcon sx={{ mr: 1 }} />
            –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
          </Box>
        </DialogTitle>
        <DialogContent>
          <Alert severity="error" sx={{ mb: 2 }}>
            <strong>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!</strong> –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö. 
            –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π.
          </Alert>
          
          <Typography variant="body2" gutterBottom>
            –û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏: <strong>{selectedVersion}</strong>
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setRollbackDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleRollback}
            variant="contained"
            color="warning"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : <UndoIcon />}
          >
            {loading ? '–û—Ç–∫–∞—Ç...' : '–û—Ç–∫–∞—Ç–∏—Ç—å –≤–µ—Ä—Å–∏—é'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –≤–µ—Ä—Å–∏–π */}
      <Dialog
        open={cleanupDialogOpen}
        onClose={() => setCleanupDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <CleaningServicesIcon sx={{ mr: 1 }} />
            –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
          </Box>
        </DialogTitle>
        <DialogContent>
          <Alert severity="error" sx={{ mb: 2 }}>
            <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
          </Alert>
          
          <TextField
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            type="number"
            value={keepVersions}
            onChange={(e) => setKeepVersions(parseInt(e.target.value) || 5)}
            inputProps={{ min: 2, max: 20 }}
            fullWidth
            margin="normal"
            helperText="–ú–∏–Ω–∏–º—É–º 2 –≤–µ—Ä—Å–∏–∏ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"
          />
          
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –≤–µ—Ä—Å–∏–π: {Math.max(0, versions.length - keepVersions)}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCleanupDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleCleanup}
            variant="contained"
            color="error"
            disabled={loading || versions.length <= keepVersions}
            startIcon={loading ? <CircularProgress size={20} /> : <CleaningServicesIcon />}
          >
            {loading ? '–û—á–∏—Å—Ç–∫–∞...' : '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Ä—Å–∏–∏'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default TireDataManagementPage;