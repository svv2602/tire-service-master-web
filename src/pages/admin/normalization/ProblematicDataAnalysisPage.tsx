import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  IconButton,
  Tooltip,
  Grid,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Search as SearchIcon,
  Refresh as RefreshIcon,
  Warning as WarningIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon,
  ExpandMore as ExpandMoreIcon,
  Add as AddIcon,
  Edit as EditIcon,
  FlagOutlined as CountryIcon,
  LocalCarWash as BrandIcon,
  DirectionsCar as ModelIcon,
  Visibility as ViewIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useTheme } from '@mui/material/styles';
import { getTablePageStyles } from '../../../styles/tablePageStyles';
import AdminPageWrapper from '../../../components/admin/AdminPageWrapper';
import { Pagination } from '../../../components/ui';
import {
  useGetTopUnprocessedQuery,
  useGetUnprocessedProductsQuery,
} from '../../../api/normalization.api';

interface ProblematicItem {
  name: string;
  count: number;
  examples?: string[];
  suggested_aliases?: string[];
  similarity_score?: number;
  suppliers?: Array<{
    name: string;
    count: number;
  }>;
}

interface DetailedProblematicData {
  countries: ProblematicItem[];
  brands: ProblematicItem[];
  models: ProblematicItem[];
  total_counts: {
    countries: number;
    brands: number;
    models: number;
  };
}

const ProblematicDataAnalysisPage: React.FC = () => {
  const navigate = useNavigate();
  const { t } = useTranslation(['admin', 'common']);
  const theme = useTheme();
  const tablePageStyles = getTablePageStyles(theme);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [selectedCategory, setSelectedCategory] = useState<'countries' | 'brands' | 'models'>('countries');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedItem, setSelectedItem] = useState<ProblematicItem | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [aliasDialogOpen, setAliasDialogOpen] = useState(false);
  const [newAlias, setNewAlias] = useState('');

  // API —Ö—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const { data: countriesData } = useGetTopUnprocessedQuery({
    type: 'countries',
    limit: 20,
  });

  const { data: brandsData } = useGetTopUnprocessedQuery({
    type: 'brands',
    limit: 20,
  });

  const { data: modelsData } = useGetTopUnprocessedQuery({
    type: 'models',
    limit: 20,
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const {
    data: problematicProductsData,
    isLoading: isLoadingProducts,
  } = useGetUnprocessedProductsQuery({
    page: 1,
    per_page: 50,
    missing_type: selectedCategory === 'countries' ? 'country' : selectedCategory === 'brands' ? 'brand' : 'model',
    search: selectedItem?.name,
  }, {
    skip: !selectedItem,
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const getCurrentData = () => {
    switch (selectedCategory) {
      case 'countries':
        return countriesData?.data || [];
      case 'brands':
        return brandsData?.data || [];
      case 'models':
        return modelsData?.data || [];
      default:
        return [];
    }
  };

  const getFilteredData = () => {
    const data = getCurrentData();
    if (!searchTerm) return data;
    
    return data.filter(item => 
      item.name && item.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'countries':
        return <CountryIcon />;
      case 'brands':
        return <BrandIcon />;
      case 'models':
        return <ModelIcon />;
      default:
        return <ErrorIcon />;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'countries':
        return 'info';
      case 'brands':
        return 'warning';
      case 'models':
        return 'error';
      default:
        return 'default';
    }
  };

  const handleItemClick = (item: ProblematicItem) => {
    setSelectedItem(item);
    setDialogOpen(true);
  };

  const handleAddAlias = () => {
    setAliasDialogOpen(true);
  };

  const handleSaveAlias = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞
    console.log('–î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å:', newAlias, '–¥–ª—è', selectedItem?.name);
    setNewAlias('');
    setAliasDialogOpen(false);
  };

  const getProblemSeverity = (count: number) => {
    if (count >= 100) return { severity: 'error' as const, label: '–ö—Ä–∏—Ç–∏—á–Ω–æ' };
    if (count >= 50) return { severity: 'warning' as const, label: '–í–∞–∂–Ω–æ' };
    if (count >= 10) return { severity: 'info' as const, label: '–í–Ω–∏–º–∞–Ω–∏–µ' };
    return { severity: 'success' as const, label: '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ' };
  };

  return (
    <AdminPageWrapper>
      <Box sx={tablePageStyles.pageContainer}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <Box display="flex" alignItems="center" mb={2}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/admin/normalization')}
            sx={{ mr: 2 }}
          >
            –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
          </Button>
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h4" component="h1" gutterBottom>
              üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            </Typography>
            <Typography variant="subtitle1" color="text.secondary">
              –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω, –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
            </Typography>
          </Box>
        </Box>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2" gutterBottom>
            <strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É:</strong>
          </Typography>
          <Typography variant="body2">
            1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–°—Ç—Ä–∞–Ω—ã/–ë—Ä–µ–Ω–¥—ã/–ú–æ–¥–µ–ª–∏)<br/>
            2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤<br/>
            3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤<br/>
            4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –∞–ª–∏–∞—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
          </Typography>
        </Alert>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} sm={4}>
                <FormControl fullWidth size="small">
                  <InputLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö</InputLabel>
                  <Select
                    value={selectedCategory}
                    label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö"
                    onChange={(e) => setSelectedCategory(e.target.value as any)}
                  >
                    <MenuItem value="countries">
                      <Box display="flex" alignItems="center">
                        <CountryIcon sx={{ mr: 1 }} />
                        –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
                      </Box>
                    </MenuItem>
                    <MenuItem value="brands">
                      <Box display="flex" alignItems="center">
                        <BrandIcon sx={{ mr: 1 }} />
                        –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
                      </Box>
                    </MenuItem>
                    <MenuItem value="models">
                      <Box display="flex" alignItems="center">
                        <ModelIcon sx={{ mr: 1 }} />
                        –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  size="small"
                  placeholder={`–ü–æ–∏—Å–∫ –ø–æ ${selectedCategory === 'countries' ? '—Å—Ç—Ä–∞–Ω–∞–º' : selectedCategory === 'brands' ? '–±—Ä–µ–Ω–¥–∞–º' : '–º–æ–¥–µ–ª—è–º'}...`}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: <SearchIcon sx={{ mr: 1, color: 'action.active' }} />,
                    endAdornment: searchTerm && (
                      <IconButton size="small" onClick={() => setSearchTerm('')}>
                        <ClearIcon />
                      </IconButton>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={2}>
                <Button
                  fullWidth
                  variant="outlined"
                  startIcon={<RefreshIcon />}
                  onClick={() => window.location.reload()}
                >
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" mb={1}>
                  <CountryIcon sx={{ mr: 1, color: 'info.main' }} />
                  <Typography variant="h6">–°—Ç—Ä–∞–Ω—ã</Typography>
                </Box>
                <Typography variant="h4" color="info.main">
                  {countriesData?.data?.length || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" mb={1}>
                  <BrandIcon sx={{ mr: 1, color: 'warning.main' }} />
                  <Typography variant="h6">–ë—Ä–µ–Ω–¥—ã</Typography>
                </Box>
                <Typography variant="h4" color="warning.main">
                  {brandsData?.data?.length || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" mb={1}>
                  <ModelIcon sx={{ mr: 1, color: 'error.main' }} />
                  <Typography variant="h6">–ú–æ–¥–µ–ª–∏</Typography>
                </Box>
                <Typography variant="h4" color="error.main">
                  {modelsData?.data?.length || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        {/* –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
        <Card>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="between" mb={2}>
              <Typography variant="h6">
                {getCategoryIcon(selectedCategory)}
                <Box component="span" sx={{ ml: 1 }}>
                  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ {selectedCategory === 'countries' ? '—Å—Ç—Ä–∞–Ω—ã' : selectedCategory === 'brands' ? '–±—Ä–µ–Ω–¥—ã' : '–º–æ–¥–µ–ª–∏'}
                </Box>
              </Typography>
              <Chip
                label={`–ù–∞–π–¥–µ–Ω–æ: ${getFilteredData().length}`}
                color={getCategoryColor(selectedCategory) as any}
                variant="outlined"
              />
            </Box>

            <TableContainer component={Paper} variant="outlined">
              <Table size="medium">
                <TableHead>
                  <TableRow>
                    <TableCell><strong>–ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</strong></TableCell>
                    <TableCell><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤</strong></TableCell>
                    <TableCell><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏</strong></TableCell>
                    <TableCell><strong>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã</strong></TableCell>
                    <TableCell><strong>–î–µ–π—Å—Ç–≤–∏—è</strong></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {getFilteredData().length > 0 ? (
                    getFilteredData().map((item, index) => {
                      const severity = getProblemSeverity(item.count);
                      return (
                        <TableRow key={`${item.name || 'empty'}-${index}`} hover>
                          <TableCell>
                            <Typography variant="body1" fontWeight="medium">
                              {!item.name || item.name.trim() === '' ? (
                                <Box component="span" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
                                  (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                                </Box>
                              ) : (
                                `"${item.name}"`
                              )}
                            </Typography>
                            <Typography variant="caption" color="text.secondary" display="block">
                              –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø—Ä–∞–π—Å–æ–≤
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Box display="flex" alignItems="center">
                              <Typography variant="h6" sx={{ mr: 1 }}>
                                {item.count.toLocaleString()}
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                —Ç–æ–≤–∞—Ä–æ–≤
                              </Typography>
                            </Box>
                          </TableCell>
                          <TableCell>
                            <Box>
                              {item.suppliers ? (
                                <Box display="flex" flexWrap="wrap" gap={0.5}>
                                  {item.suppliers.slice(0, 3).map((supplier: { name: string; count: number; id: number }, idx: number) => (
                                    <Chip
                                      key={idx}
                                      label={`${supplier.name} (${supplier.count})`}
                                      size="small"
                                      variant="outlined"
                                      color="default"
                                    />
                                  ))}
                                  {item.suppliers.length > 3 && (
                                    <Chip
                                      label={`+${item.suppliers.length - 3} –µ—â–µ`}
                                      size="small"
                                      variant="outlined"
                                      color="default"
                                    />
                                  )}
                                </Box>
                              ) : (
                                <Typography variant="body2" color="text.secondary">
                                  –ó–∞–≥—Ä—É–∑–∫–∞...
                                </Typography>
                              )}
                            </Box>
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={severity.label}
                              size="small"
                              color={severity.severity}
                              variant="outlined"
                            />
                          </TableCell>
                          <TableCell>
                            <Box display="flex" gap={1}>
                              <Tooltip title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã">
                                <IconButton
                                  size="small"
                                  onClick={() => handleItemClick(item)}
                                  color="primary"
                                >
                                  <ViewIcon />
                                </IconButton>
                              </Tooltip>
                              <Tooltip title="–î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å">
                                <IconButton
                                  size="small"
                                  onClick={handleAddAlias}
                                  color="success"
                                >
                                  <AddIcon />
                                </IconButton>
                              </Tooltip>
                            </Box>
                          </TableCell>
                        </TableRow>
                      );
                    })
                  ) : (
                    <TableRow>
                      <TableCell colSpan={4} align="center">
                        <Box display="flex" flexDirection="column" alignItems="center" py={4}>
                          <CheckIcon sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
                          <Typography variant="h6" color="success.main">
                            –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö {selectedCategory === 'countries' ? '—Å—Ç—Ä–∞–Ω' : selectedCategory === 'brands' ? '–±—Ä–µ–Ω–¥–æ–≤' : '–º–æ–¥–µ–ª–µ–π'}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
                          </Typography>
                        </Box>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      </Box>

      {/* –î–∏–∞–ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <Dialog
        open={dialogOpen}
        onClose={() => setDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          <Box display="flex" alignItems="center">
            {getCategoryIcon(selectedCategory)}
            <Box sx={{ ml: 1 }}>
              –¢–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º {selectedCategory === 'countries' ? '–Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã' : selectedCategory === 'brands' ? '–±—Ä–µ–Ω–¥–æ–º' : '–º–æ–¥–µ–ª—å—é'}: {
                !selectedItem?.name || selectedItem.name.trim() === '' ? (
                  <Box component="span" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
                    (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                  </Box>
                ) : (
                  `"${selectedItem.name}"`
                )
              }
            </Box>
          </Box>
        </DialogTitle>
        <DialogContent>
          {isLoadingProducts ? (
            <Box py={4}>
              <LinearProgress />
              <Typography variant="body2" color="text.secondary" align="center" sx={{ mt: 2 }}>
                –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...
              </Typography>
            </Box>
          ) : problematicProductsData?.data?.length ? (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>–¢–æ–≤–∞—Ä</TableCell>
                    <TableCell>–†–∞–∑–º–µ—Ä</TableCell>
                    <TableCell>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</TableCell>
                    <TableCell>–ü–æ—Å—Ç–∞–≤—â–∏–∫</TableCell>
                    <TableCell>–¶–µ–Ω–∞</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {problematicProductsData.data.slice(0, 10).map((product) => (
                    <TableRow key={product.id}>
                      <TableCell>
                        <Typography variant="body2" fontWeight="medium">
                          {product.name}
                        </Typography>
                        <Typography variant="caption" color="text.secondary" display="block">
                          ID: {product.external_id || product.id}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2" fontFamily="monospace">
                          {product.size_designation}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Box>
                          <Typography variant="body2" sx={{ mb: 0.5 }}>
                            <strong>–ë—Ä–µ–Ω–¥:</strong> "{product.original_brand}"
                          </Typography>
                          <Typography variant="body2" sx={{ mb: 0.5 }}>
                            <strong>–ú–æ–¥–µ–ª—å:</strong> "{product.original_model}"
                          </Typography>
                          <Typography variant="body2">
                            <strong>–°—Ç—Ä–∞–Ω–∞:</strong> "{product.original_country}"
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2" fontWeight="medium">
                          {product.supplier.name}
                        </Typography>
                        <Typography variant="caption" color="text.secondary" display="block">
                          –ü–æ—Å—Ç–∞–≤—â–∏–∫ #{product.supplier.id}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {product.price_uah?.toLocaleString() || '‚Äî'} –≥—Ä–Ω
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          ) : (
            <Alert severity="info">
              –¢–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
            </Alert>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button
            variant="contained"
            onClick={handleAddAlias}
            startIcon={<AddIcon />}
          >
            –î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞ */}
      <Dialog
        open={aliasDialogOpen}
        onClose={() => setAliasDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          –î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å –¥–ª—è "{selectedItem?.name || '(–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)'}"
        </DialogTitle>
        <DialogContent>
          <Alert severity="info" sx={{ mb: 2 }}>
            –ê–ª–∏–∞—Å –ø–æ–º–æ–∂–µ—Ç —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
          </Alert>
          <TextField
            autoFocus
            margin="dense"
            label="–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
            fullWidth
            variant="outlined"
            value={newAlias}
            onChange={(e) => setNewAlias(e.target.value)}
            placeholder={`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ${selectedCategory === 'countries' ? '—Å—Ç—Ä–∞–Ω—ã' : selectedCategory === 'brands' ? '–±—Ä–µ–Ω–¥–∞' : '–º–æ–¥–µ–ª–∏'}`}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAliasDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            variant="contained"
            onClick={handleSaveAlias}
            disabled={!newAlias.trim()}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–∏–∞—Å
          </Button>
        </DialogActions>
      </Dialog>
    </AdminPageWrapper>
  );
};

export default ProblematicDataAnalysisPage;