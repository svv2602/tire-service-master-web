import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Tabs,
  Tab,
  TextField,
  Button,
  Switch,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Snackbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  IconButton,
  Tooltip,
  Grid,
  Card,
  CardContent,
  CardActions,
  CircularProgress,
  InputAdornment,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import {
  Settings as SettingsIcon,
  Search as SearchIcon,
  Link as LinkIcon,
  Storage as StorageIcon,
  Analytics as AnalyticsIcon,
  Speed as SpeedIcon,
  Save as SaveIcon,
  Refresh as RefreshIcon,
  RestoreFromTrash as RestoreIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Science as TestIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  ExpandMore as ExpandMoreIcon,
  DirectionsCar as TireDataIcon
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'react-redux';
import TireDataManagement from '../../../components/admin/TireDataManagement';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface SystemSetting {
  key: string;
  value: string | boolean | number; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
  description: string;
  category: string;
  type?: 'string' | 'integer' | 'boolean' | 'password' | 'url' | 'select';
  options?: string[];
  min_value?: number;
  max_value?: number;
  required?: boolean;
  default?: boolean;
  updated_at?: string;
  updated_by?: string;
}

interface SettingCategory {
  name: string;
  description: string;
  icon: string;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => (
  <div role="tabpanel" hidden={value !== index}>
    {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
  </div>
);

const SystemSettingsPage: React.FC = () => {
  const { t } = useTranslation(['admin', 'common']);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [currentTab, setCurrentTab] = useState(0);
  const [settings, setSettings] = useState<Record<string, Record<string, SystemSetting>>>({});
  const [categories, setCategories] = useState<Record<string, SettingCategory>>({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState<string | null>(null);
  const [testing, setTesting] = useState<string | null>(null);
  const [showPasswords, setShowPasswords] = useState<Record<string, boolean>>({});
  const [pendingChanges, setPendingChanges] = useState<Record<string, string>>({});
  const [notification, setNotification] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'info' | 'warning';
  }>({ open: false, message: '', severity: 'info' });
  const [confirmDialog, setConfirmDialog] = useState<{
    open: boolean;
    title: string;
    message: string;
    onConfirm: () => void;
  }>({ open: false, title: '', message: '', onConfirm: () => {} });

  // API –±–∞–∑–æ–≤—ã–π URL
  const API_BASE_URL = `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const authToken = useSelector((state: any) => state.auth?.accessToken);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  const getAuthHeaders = () => {
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };
    
    if (authToken) {
      (headers as any)['Authorization'] = `Bearer ${authToken}`;
    }
    
    return headers;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = async () => {
    setLoading(true);
    try {
      const [settingsResponse, categoriesResponse] = await Promise.all([
        fetch(`${API_BASE_URL}/admin/system_settings`, {
          credentials: 'include',
          headers: getAuthHeaders()
        }),
        fetch(`${API_BASE_URL}/admin/system_settings/categories`, {
          credentials: 'include',
          headers: getAuthHeaders()
        })
      ]);

      if (settingsResponse.ok && categoriesResponse.ok) {
        const settingsData = await settingsResponse.json();
        const categoriesData = await categoriesResponse.json();
        
        setSettings(settingsData.settings || {});
        setCategories(categoriesData.categories || {});
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (error) {
      console.error('Error loading settings:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    } finally {
      setLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const saveSetting = async (key: string, value: string | boolean | number) => {
    console.log('üíæ Saving setting:', { key, value });
    setSaving(key);
    try {
      const response = await fetch(`${API_BASE_URL}/admin/system_settings/${key}`, {
        method: 'PUT',
        credentials: 'include',
        headers: getAuthHeaders(),
        body: JSON.stringify({ value })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Setting saved successfully:', data);
        console.log('üìù Updating settings state:', { 
          key, 
          category: data.setting?.category, 
          newValue: data.setting?.value,
          oldValue: getCurrentValue(key, '') 
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        setSettings(prev => {
          const newSettings = { ...prev };
          const category = data.setting.category;
          if (newSettings[category] && data.setting) {
            console.log('üîÑ Before update:', newSettings[category][key]);
            newSettings[category][key] = data.setting;
            console.log('üîÑ After update:', newSettings[category][key]);
          } else {
            console.warn('‚ö†Ô∏è Category not found or setting missing:', { category, settingExists: !!data.setting });
          }
          return newSettings;
        });
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setPendingChanges(prev => {
          const newChanges = { ...prev };
          delete newChanges[key];
          return newChanges;
        });
        
        showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${key}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`, 'success');
      } else {
        const errorData = await response.json();
        console.error('‚ùå Server error response:', { status: response.status, error: errorData });
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('‚ùå Error saving setting:', error);
      showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error}`, 'error');
    } finally {
      setSaving(null);
    }
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const testConnection = async (key: string, value: string | boolean | number) => {
    setTesting(key);
    try {
      const response = await fetch(`${API_BASE_URL}/admin/system_settings/test_connection`, {
        method: 'POST',
        credentials: 'include',
        headers: getAuthHeaders(),
        body: JSON.stringify({ key, value })
      });

      if (response.ok) {
        const data = await response.json();
        showNotification(data.message, data.success ? 'success' : 'error');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    } catch (error) {
      console.error('Error testing connection:', error);
      showNotification(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error}`, 'error');
    } finally {
      setTesting(null);
    }
  };

  // –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetToDefaults = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/admin/system_settings/reset_defaults`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' }
      });

      if (response.ok) {
        const data = await response.json();
        setSettings(data.settings || {});
        setPendingChanges({});
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'success');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (error) {
      console.error('Error resetting settings:', error);
      showNotification(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error}`, 'error');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
  const handleValueChange = (key: string, value: string) => {
    setPendingChanges(prev => ({
      ...prev,
      [key]: value
    }));
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å debounced –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const getCurrentValue = (key: string, originalValue: string | boolean | number) => {
    return pendingChanges[key] !== undefined ? pendingChanges[key] : originalValue;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasChanges = (key: string) => {
    return pendingChanges[key] !== undefined;
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const showNotification = (message: string, severity: 'success' | 'error' | 'info' | 'warning') => {
    setNotification({ open: true, message, severity });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = (iconName: string) => {
    const icons: Record<string, React.ReactNode> = {
      search: <SearchIcon />,
      link: <LinkIcon />,
      storage: <StorageIcon />,
      analytics: <AnalyticsIcon />,
      speed: <SpeedIcon />,
      settings: <SettingsIcon />,
      tire_data: <TireDataIcon />
    };
    return icons[iconName] || <SettingsIcon />;
  };

  // –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const renderSettingField = (setting: SystemSetting, isSaving: boolean, isTesting: boolean) => {
    const currentValue = getCurrentValue(setting.key, setting.value);
    const isChanged = hasChanges(setting.key);

    switch (setting.type) {
      case 'boolean':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ boolean –∑–Ω–∞—á–µ–Ω–∏–π - API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ boolean, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫—É
        const isBooleanChecked = currentValue === true || currentValue === 'true' || currentValue === '1';
        return (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Switch
              checked={isBooleanChecked}
              onChange={(e) => {
                const newValue = e.target.checked ? 'true' : 'false';
                handleValueChange(setting.key, newValue);
                // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è boolean –ø–æ–ª–µ–π
                saveSetting(setting.key, newValue);
              }}
              disabled={isSaving}
            />
            <Typography variant="body2" color={isBooleanChecked ? 'success.main' : 'text.secondary'}>
              {isBooleanChecked ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </Typography>
            {isSaving && (
              <CircularProgress size={16} />
            )}
          </Box>
        );

      case 'select':
        return (
          <FormControl fullWidth size="small">
            <Select
              value={String(currentValue)}
              onChange={(e) => handleValueChange(setting.key, e.target.value)}
              disabled={isSaving}
            >
              {setting.options?.map(option => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </Select>
          </FormControl>
        );

      case 'password':
        return (
          <TextField
            fullWidth
            size="small"
            type={showPasswords[setting.key] ? 'text' : 'password'}
            value={String(currentValue)}
            onChange={(e) => handleValueChange(setting.key, e.target.value)}
            disabled={isSaving}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton
                    onClick={() => setShowPasswords(prev => ({
                      ...prev,
                      [setting.key]: !prev[setting.key]
                    }))}
                    size="small"
                  >
                    {showPasswords[setting.key] ? <VisibilityOffIcon /> : <VisibilityIcon />}
                  </IconButton>
                </InputAdornment>
              )
            }}
          />
        );

      case 'integer':
        return (
          <TextField
            fullWidth
            size="small"
            type="number"
            value={String(currentValue)}
            onChange={(e) => handleValueChange(setting.key, e.target.value)}
            disabled={isSaving}
            inputProps={{
              min: setting.min_value,
              max: setting.max_value
            }}
          />
        );

      default:
        return (
          <TextField
            fullWidth
            size="small"
            value={String(currentValue)}
            onChange={(e) => handleValueChange(setting.key, e.target.value)}
            disabled={isSaving}
            multiline={setting.type === 'url' && String(currentValue).length > 50}
            rows={setting.type === 'url' && String(currentValue).length > 50 ? 2 : 1}
          />
        );
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const canTestConnection = (key: string) => {
    return ['redis_url', 'openai_api_key'].includes(key);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadSettings();
  }, []);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–æ–≤
  const tabGroups = [
    {
      name: '–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      icon: <SearchIcon />,
      categories: ['tire_search', 'integrations', 'database'],
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —à–∏–Ω, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
    },
    {
      name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 
      icon: <AnalyticsIcon />,
      categories: ['analytics', 'performance'],
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'
    }
  ];

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–±–∞
  const getCurrentTabSettings = () => {
    const currentGroup = tabGroups[currentTab];
    if (!currentGroup) return {};
    
    const groupSettings: Record<string, SystemSetting> = {};
    currentGroup.categories.forEach(categoryKey => {
      const categorySettings = settings[categoryKey] || {};
      Object.entries(categorySettings).forEach(([key, setting]) => {
        groupSettings[key] = setting;
      });
    });
    
    return groupSettings;
  };

  const currentTabSettings = getCurrentTabSettings();

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <SettingsIcon color="primary" sx={{ fontSize: 32 }} />
          <Typography variant="h4" component="h1">
            –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={loadSettings}
            disabled={loading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button
            variant="outlined"
            color="warning"
            startIcon={<RestoreIcon />}
            onClick={() => setConfirmDialog({
              open: true,
              title: '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
              message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
              onConfirm: () => {
                resetToDefaults();
                setConfirmDialog(prev => ({ ...prev, open: false }));
              }
            })}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        </Box>
      </Box>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö */}
      {Object.keys(pendingChanges).length > 0 && (
        <Alert severity="info" sx={{ mb: 3 }}>
          –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {Object.keys(pendingChanges).length} –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
          –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö.
        </Alert>
      )}

      {/* –¢–∞–±—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={currentTab}
          onChange={(_, newValue) => setCurrentTab(newValue)}
          variant="scrollable"
          scrollButtons="auto"
        >
          {tabGroups.map((group, index) => {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≥—Ä—É–ø–ø–µ
            const groupSettingsCount = group.categories.reduce((count, categoryKey) => {
              return count + Object.keys(settings[categoryKey] || {}).length;
            }, 0);
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
            const changedInGroup = Object.keys(pendingChanges).filter(key => {
              return group.categories.some(categoryKey => 
                Object.keys(settings[categoryKey] || {}).includes(key)
              );
            }).length;
            
            return (
              <Tab
                key={`group-${index}`}
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    {group.icon}
                    <Typography variant="body2">
                      {group.name}
                    </Typography>
                    <Chip 
                      label={groupSettingsCount} 
                      size="small" 
                      color="primary" 
                      variant="outlined"
                    />
                    {changedInGroup > 0 && (
                      <Chip 
                        label={changedInGroup} 
                        size="small" 
                        color="warning"
                      />
                    )}
                  </Box>
                }
              />
            );
          })}
          
          {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞–± –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —à–∏–Ω */}
          <Tab
            label={
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <TireDataIcon />
                <Typography variant="body2">
                  –î–∞–Ω–Ω—ã–µ —à–∏–Ω
                </Typography>
              </Box>
            }
          />
        </Tabs>
      </Paper>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
      {tabGroups.map((group, index) => (
        <TabPanel key={`tab-${index}`} value={currentTab} index={index}>
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                {group.name}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {group.description}
              </Typography>
            </Box>

            {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
            {group.categories.map((categoryKey) => {
              const categorySettings = settings[categoryKey] || {};
              const categoryInfo = categories[categoryKey];
              
              if (Object.keys(categorySettings).length === 0) return null;
              
              return (
                <Box key={categoryKey} sx={{ mb: 4 }}>
                  <Box sx={{ 
                    mb: 2, 
                    pb: 1, 
                    borderBottom: '2px solid', 
                    borderColor: 'primary.main',
                    borderRadius: '2px'
                  }}>
                    <Typography variant="h6" sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1, 
                      fontSize: '1.1rem',
                      fontWeight: 600,
                      color: 'primary.main'
                    }}>
                      {getCategoryIcon(categoryInfo?.icon || 'settings')}
                      {categoryInfo?.name || categoryKey}
                    </Typography>
                    {categoryInfo?.description && (
                      <Typography variant="body2" color="text.secondary" sx={{ ml: 4, mt: 0.5 }}>
                        {categoryInfo.description}
                      </Typography>
                    )}
                  </Box>
                  
                  <Grid container spacing={2}>
                    {Object.entries(categorySettings).map(([key, setting]) => {
                      const isSaving = saving === key;
                      const isTesting = testing === key;
                      
                      return (
                      <Grid item xs={12} md={6} lg={4} key={key}>
                  <Card variant="outlined" sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                    <CardContent sx={{ flex: 1 }}>
                      <Box sx={{ mb: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1, flexWrap: 'wrap' }}>
                          <Typography variant="subtitle2" fontWeight="medium" sx={{ fontSize: '0.9rem' }}>
                            {key}
                          </Typography>
                          {setting.default && (
                            <Chip label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" size="small" variant="outlined" />
                          )}
                          {hasChanges(key) && (
                            <Chip label="–ò–∑–º–µ–Ω–µ–Ω–æ" size="small" color="warning" />
                          )}
                        </Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2, fontSize: '0.8rem' }}>
                          {setting.description}
                        </Typography>
                        
                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        {(setting.min_value !== undefined || setting.max_value !== undefined) && (
                          <Typography variant="caption" color="text.secondary">
                            –î–∏–∞–ø–∞–∑–æ–Ω: {setting.min_value || '‚àû'} - {setting.max_value || '‚àû'}
                          </Typography>
                        )}
                      </Box>

                      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                      <Box sx={{ mb: 2 }}>
                        {renderSettingField(setting, isSaving, isTesting)}
                      </Box>
                      
                      {setting.updated_at && (
                        <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 1 }}>
                          –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(setting.updated_at).toLocaleDateString()}
                        </Typography>
                      )}
                    </CardContent>
                    
                    <CardActions sx={{ justifyContent: 'space-between', pt: 0 }}>
                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        {/* –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è boolean –ø–æ–ª–µ–π (–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) */}
                        {setting.type !== 'boolean' && (
                          <Button
                            variant="contained"
                            size="small"
                            startIcon={isSaving ? <CircularProgress size={16} /> : <SaveIcon />}
                            onClick={() => saveSetting(key, getCurrentValue(key, setting.value))}
                            disabled={!hasChanges(key) || isSaving}
                            sx={{ fontSize: '0.75rem' }}
                          >
                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                          </Button>
                        )}
                        
                        {canTestConnection(key) && (
                          <Button
                            variant="outlined"
                            size="small"
                            startIcon={isTesting ? <CircularProgress size={16} /> : <TestIcon />}
                            onClick={() => testConnection(key, getCurrentValue(key, setting.value))}
                            disabled={isTesting}
                            sx={{ fontSize: '0.75rem' }}
                          >
                            {isTesting ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç'}
                          </Button>
                        )}
                        
                        {hasChanges(key) && setting.type !== 'boolean' && (
                          <Button
                            size="small"
                            onClick={() => setPendingChanges(prev => {
                              const newChanges = { ...prev };
                              delete newChanges[key];
                              return newChanges;
                            })}
                            sx={{ fontSize: '0.75rem' }}
                          >
                            –û—Ç–º–µ–Ω–∏—Ç—å
                          </Button>
                        )}
                      </Box>
                    </CardActions>
                  </Card>
                </Grid>
                      );
                    })}
                  </Grid>
                </Box>
              );
            })}
        </TabPanel>
      ))}

      {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞–± –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —à–∏–Ω */}
      <TabPanel value={currentTab} index={tabGroups.length}>
        <TireDataManagement />
      </TabPanel>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      <Dialog
        open={confirmDialog.open}
        onClose={() => setConfirmDialog(prev => ({ ...prev, open: false }))}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>{confirmDialog.title}</DialogTitle>
        <DialogContent>
          <Typography>{confirmDialog.message}</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialog(prev => ({ ...prev, open: false }))}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={confirmDialog.onConfirm} color="warning" variant="contained">
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={() => setNotification(prev => ({ ...prev, open: false }))}
      >
        <Alert
          onClose={() => setNotification(prev => ({ ...prev, open: false }))}
          severity={notification.severity}
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default SystemSettingsPage;