import React, { useState, useMemo, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { 
  Box, 
  Container, 
  Typography, 
  Button, 
  Grid,
  Card,
  CardContent,
  CardMedia,
  CardActions,
  Chip,
  CircularProgress,
  Alert,
  Rating,
  Avatar,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Paper,
  Collapse,
  IconButton,
  Dialog,
  DialogContent,
  DialogTitle,
  DialogActions
} from '@mui/material';
import { 
  LocationOn as LocationIcon,
  Phone as PhoneIcon,
  Schedule as ScheduleIcon,
  Build as BuildIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  CalendarToday as CalendarIcon,
  BookOnline as BookIcon,
  Description as DescriptionIcon,
  ArrowBackIos as ArrowBackIosIcon,
  ArrowForwardIos as ArrowForwardIosIcon
} from '@mui/icons-material';
import { getButtonStyles, getThemeColors, getCardStyles } from '../../styles';
import { useTheme } from '@mui/material';
import { useSearchServicePointsQuery, useGetServicePointServicesQuery } from '../../api/servicePoints.api';
import { useGetServiceCategoriesByCityQuery } from '../../api/services.api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ –∏–∑ API –ø–æ–∏—Å–∫–∞
interface SearchServicePoint {
  id: number;
  name: string;
  address: string;
  description?: string;
  city: {
    id: number;
    name: string;
    region: string;
  };
  partner: {
    id: number;
    name: string;
  };
  contact_phone?: string;
  average_rating?: string | number;
  reviews_count?: number;
  posts_count?: number;
  work_status: string;
  distance?: number;
  photos?: {
    id: number;
    url: string;
    description?: string;
    is_main: boolean;
    sort_order: number;
  }[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Å–ª—É–≥–∏
interface ServicePointService {
  id: number;
  service_id: number;
  name: string;
  description?: string;
  price: number;
  duration: number;
  is_available?: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ —Å Dialog
const PhotoGallery: React.FC<{
  photos: { id: number; url: string; description?: string; is_main: boolean; sort_order: number; }[];
  height?: number | string;
  showCounter?: boolean;
  fallbackIcon?: React.ReactNode;
  servicePointName?: string;
}> = ({ photos = [], height = 200, showCounter = true, fallbackIcon = 'üöó', servicePointName }) => {
  const theme = useTheme();
  const [modalOpen, setModalOpen] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –≥–ª–∞–≤–Ω–∞—è –ø–µ—Ä–≤–∞—è, –∑–∞—Ç–µ–º –ø–æ sort_order
  const sortedPhotos = [...photos].sort((a, b) => {
    if (a.is_main && !b.is_main) return -1;
    if (!a.is_main && b.is_main) return 1;
    return a.sort_order - b.sort_order;
  });

  const mainPhoto = sortedPhotos[0];
  const hasPhotos = sortedPhotos.length > 0;

  const handleOpenModal = () => {
    console.log('Opening modal with photos:', sortedPhotos);
    if (hasPhotos) {
      setModalOpen(true);
      setCurrentPhotoIndex(0);
    }
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  const handleNextPhoto = () => {
    setCurrentPhotoIndex(prev => prev === sortedPhotos.length - 1 ? 0 : prev + 1);
  };

  const handlePrevPhoto = () => {
    setCurrentPhotoIndex(prev => prev === 0 ? sortedPhotos.length - 1 : prev - 1);
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (!modalOpen) return;
      
      if (event.key === 'ArrowLeft') {
        handlePrevPhoto();
      } else if (event.key === 'ArrowRight') {
        handleNextPhoto();
      } else if (event.key === 'Escape') {
        handleCloseModal();
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, [modalOpen, handlePrevPhoto, handleNextPhoto, handleCloseModal]);

  return (
    <>
      <Box>
        {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <Box
          sx={{
            position: 'relative',
            height,
            cursor: hasPhotos ? 'pointer' : 'default',
            overflow: 'hidden',
            borderRadius: 1,
            '&:hover .photo-overlay': {
              opacity: hasPhotos ? 1 : 0,
            }
          }}
          onClick={handleOpenModal}
        >
          {hasPhotos ? (
            <CardMedia
              component="img"
              image={mainPhoto.url.replace(/\?.*$/, '') + '?w=600&h=400&fit=crop&auto=format,compress&q=85'}
              alt={mainPhoto.description || '–§–æ—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏'}
              sx={{
                width: '100%',
                height: '100%',
                objectFit: 'cover',
                transition: 'transform 0.3s ease',
                '&:hover': {
                  transform: 'scale(1.05)'
                }
              }}
              onError={(e) => {
                // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                (e.target as HTMLImageElement).src = mainPhoto.url;
              }}
            />
          ) : (
            <Box
              sx={{
                height: '100%',
                background: `linear-gradient(135deg, ${theme.palette.primary.light} 0%, ${theme.palette.primary.main} 100%)`,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontSize: '4rem'
              }}
            >
              {fallbackIcon}
            </Box>
          )}

          {/* –û–≤–µ—Ä–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ */}
          {hasPhotos && sortedPhotos.length > 1 && showCounter && (
            <Box
              className="photo-overlay"
              sx={{
                position: 'absolute',
                top: 8,
                right: 8,
                bgcolor: 'rgba(0, 0, 0, 0.7)',
                color: 'white',
                px: 1.5,
                py: 0.5,
                borderRadius: 1,
                display: 'flex',
                alignItems: 'center',
                gap: 0.5,
                fontSize: '0.875rem',
                fontWeight: 500,
                opacity: 0,
                transition: 'opacity 0.3s ease'
              }}
            >
              üì∑ {sortedPhotos.length}
            </Box>
          )}

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
          {hasPhotos && mainPhoto.is_main && (
            <Box
              sx={{
                position: 'absolute',
                bottom: 8,
                left: 8,
                bgcolor: 'rgba(76, 175, 80, 0.9)',
                color: 'white',
                px: 1,
                py: 0.25,
                borderRadius: 0.5,
                fontSize: '0.75rem',
                fontWeight: 600
              }}
            >
              –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
            </Box>
          )}
        </Box>

        {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
        {hasPhotos && sortedPhotos.length > 1 && (
          <Box
            sx={{
              display: 'flex',
              gap: 0.5,
              mt: 1,
              overflowX: 'auto',
              pb: 0.5,
              '&::-webkit-scrollbar': {
                height: 4,
              },
              '&::-webkit-scrollbar-track': {
                bgcolor: 'grey.200',
                borderRadius: 2,
              },
              '&::-webkit-scrollbar-thumb': {
                bgcolor: 'grey.400',
                borderRadius: 2,
                '&:hover': {
                  bgcolor: 'grey.500',
                },
              },
            }}
          >
            {sortedPhotos.map((photo, index) => (
              <Box
                key={photo.id}
                sx={{
                  minWidth: 60,
                  height: 40,
                  borderRadius: 1,
                  overflow: 'hidden',
                  cursor: 'pointer',
                  border: index === 0 ? '2px solid' : '1px solid',
                  borderColor: index === 0 ? 'primary.main' : 'grey.300',
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    borderColor: 'primary.main',
                    transform: 'scale(1.05)'
                  }
                }}
                onClick={(e) => {
                  e.stopPropagation();
                  setCurrentPhotoIndex(index);
                  handleOpenModal();
                }}
              >
                <CardMedia
                  component="img"
                  image={photo.url.replace(/\?.*$/, '') + '?w=120&h=80&fit=crop&auto=format,compress&q=80'}
                  alt={photo.description || `–§–æ—Ç–æ ${index + 1}`}
                  sx={{
                    width: '100%',
                    height: '100%',
                    objectFit: 'cover'
                  }}
                  onError={(e) => {
                    // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                    (e.target as HTMLImageElement).src = photo.url;
                  }}
                />
              </Box>
            ))}
          </Box>
        )}
      </Box>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å Dialog */}
      <Dialog
        open={modalOpen}
        onClose={handleCloseModal}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: {
            maxHeight: '90vh',
            bgcolor: 'background.paper'
          }
        }}
      >
        <DialogTitle sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          pb: 1
        }}>
          <Typography variant="h6">
            {servicePointName ? `–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è - ${servicePointName}` : '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è'}
          </Typography>
          <IconButton onClick={handleCloseModal} size="small">
            ‚úï
          </IconButton>
        </DialogTitle>
        
        <DialogContent sx={{ p: 0, position: 'relative' }}>
          {hasPhotos && sortedPhotos[currentPhotoIndex] ? (
            <Box sx={{ 
              position: 'relative',
              bgcolor: theme.palette.mode === 'dark' ? 'grey.900' : 'grey.100',
              minHeight: '60vh'
            }}>
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ñ–æ—Ç–æ */}
              {sortedPhotos.length > 1 && (
                <Box
                  sx={{
                    position: 'absolute',
                    top: 16,
                    left: '50%',
                    transform: 'translateX(-50%)',
                    zIndex: 1,
                    bgcolor: theme.palette.mode === 'dark'
                      ? 'rgba(0, 0, 0, 0.8)'
                      : 'rgba(255, 255, 255, 0.95)',
                    color: theme.palette.mode === 'dark'
                      ? 'white'
                      : 'text.primary',
                    px: 2,
                    py: 1,
                    borderRadius: 2,
                    backdropFilter: 'blur(10px)',
                    boxShadow: theme.palette.mode === 'dark'
                      ? '0 4px 20px rgba(0, 0, 0, 0.4)'
                      : '0 4px 20px rgba(0, 0, 0, 0.15)',
                    border: '1px solid',
                    borderColor: theme.palette.mode === 'dark'
                      ? 'rgba(255, 255, 255, 0.2)'
                      : 'rgba(0, 0, 0, 0.1)',
                    fontSize: '0.875rem',
                    fontWeight: 500
                  }}
                >
                  {currentPhotoIndex + 1} / {sortedPhotos.length}
                </Box>
              )}
              <CardMedia
                component="img"
                image={sortedPhotos[currentPhotoIndex].url}
                alt={sortedPhotos[currentPhotoIndex].description || '–§–æ—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏'}
                sx={{
                  width: '100%',
                  maxHeight: '70vh',
                  objectFit: 'contain',
                  bgcolor: theme.palette.mode === 'dark' ? 'grey.900' : 'grey.100'
                }}
                onError={(e) => {
                  console.error('Failed to load image:', sortedPhotos[currentPhotoIndex].url);
                }}
                onLoad={() => {
                  console.log('Image loaded successfully:', sortedPhotos[currentPhotoIndex].url);
                }}
              />
              
              {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ñ–æ—Ç–æ */}
              {sortedPhotos.length > 1 && (
                <>
                  <IconButton
                    onClick={handlePrevPhoto}
                    sx={{
                      position: 'absolute',
                      left: 24,
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 64,
                      height: 64,
                      bgcolor: theme.palette.mode === 'dark' 
                        ? 'rgba(0, 0, 0, 0.8)' 
                        : 'rgba(255, 255, 255, 0.95)',
                      color: theme.palette.mode === 'dark' 
                        ? 'white' 
                        : 'primary.main',
                      border: '2px solid',
                      borderColor: theme.palette.mode === 'dark' 
                        ? 'rgba(255, 255, 255, 0.3)' 
                        : 'primary.main',
                      backdropFilter: 'blur(10px)',
                      boxShadow: theme.palette.mode === 'dark'
                        ? '0 8px 32px rgba(0, 0, 0, 0.4)'
                        : '0 8px 32px rgba(0, 0, 0, 0.15)',
                      fontSize: '1.5rem',
                      fontWeight: 'bold',
                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                      '&:hover': {
                        bgcolor: theme.palette.mode === 'dark'
                          ? 'rgba(255, 255, 255, 0.1)'
                          : 'primary.main',
                        color: theme.palette.mode === 'dark'
                          ? '#90CAF9'
                          : 'white',
                        transform: 'translateY(-50%) scale(1.1)',
                        boxShadow: theme.palette.mode === 'dark'
                          ? '0 12px 40px rgba(0, 0, 0, 0.6)'
                          : '0 12px 40px rgba(25, 118, 210, 0.4)',
                        borderColor: theme.palette.mode === 'dark'
                          ? '#90CAF9'
                          : 'primary.dark'
                      },
                      '&:active': {
                        transform: 'translateY(-50%) scale(0.95)'
                      }
                    }}
                  >
                    <ArrowBackIosIcon sx={{ 
                      fontSize: '2.5rem',
                      marginLeft: '4px' // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤–ª–µ–≤–æ
                    }} />
                  </IconButton>
                  
                  <IconButton
                    onClick={handleNextPhoto}
                    sx={{
                      position: 'absolute',
                      right: 24,
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 64,
                      height: 64,
                      bgcolor: theme.palette.mode === 'dark' 
                        ? 'rgba(0, 0, 0, 0.8)' 
                        : 'rgba(255, 255, 255, 0.95)',
                      color: theme.palette.mode === 'dark' 
                        ? 'white' 
                        : 'primary.main',
                      border: '2px solid',
                      borderColor: theme.palette.mode === 'dark' 
                        ? 'rgba(255, 255, 255, 0.3)' 
                        : 'primary.main',
                      backdropFilter: 'blur(10px)',
                      boxShadow: theme.palette.mode === 'dark'
                        ? '0 8px 32px rgba(0, 0, 0, 0.4)'
                        : '0 8px 32px rgba(0, 0, 0, 0.15)',
                      fontSize: '1.5rem',
                      fontWeight: 'bold',
                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                      '&:hover': {
                        bgcolor: theme.palette.mode === 'dark'
                          ? 'rgba(255, 255, 255, 0.1)'
                          : 'primary.main',
                        color: theme.palette.mode === 'dark'
                          ? '#90CAF9'
                          : 'white',
                        transform: 'translateY(-50%) scale(1.1)',
                        boxShadow: theme.palette.mode === 'dark'
                          ? '0 12px 40px rgba(0, 0, 0, 0.6)'
                          : '0 12px 40px rgba(25, 118, 210, 0.4)',
                        borderColor: theme.palette.mode === 'dark'
                          ? '#90CAF9'
                          : 'primary.dark'
                      },
                      '&:active': {
                        transform: 'translateY(-50%) scale(0.95)'
                      }
                    }}
                  >
                    <ArrowForwardIosIcon sx={{ 
                      fontSize: '2.5rem',
                      marginRight: '4px' // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤–ø—Ä–∞–≤–æ
                    }} />
                  </IconButton>
                </>
              )}
            </Box>
          ) : (
            <Box sx={{ p: 4, textAlign: 'center' }}>
              <Typography variant="h6" color="text.secondary">
                –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </Typography>
            </Box>
          )}
        </DialogContent>
        
                 <DialogActions sx={{ 
           flexDirection: 'column',
           px: 3, 
           py: 2,
           gap: 2
         }}>
           {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */}
           {sortedPhotos.length > 1 && (
             <Box
               sx={{
                 display: 'flex',
                 gap: 1,
                 overflowX: 'auto',
                 maxWidth: '100%',
                 pb: 1,
                 '&::-webkit-scrollbar': {
                   height: 6,
                 },
                 '&::-webkit-scrollbar-track': {
                   bgcolor: 'grey.200',
                   borderRadius: 3,
                 },
                 '&::-webkit-scrollbar-thumb': {
                   bgcolor: 'grey.400',
                   borderRadius: 3,
                   '&:hover': {
                     bgcolor: 'grey.500',
                   },
                 },
               }}
             >
               {sortedPhotos.map((photo, index) => (
                 <Box
                   key={photo.id}
                   sx={{
                     minWidth: 80,
                     height: 60,
                     borderRadius: 1,
                     overflow: 'hidden',
                     cursor: 'pointer',
                     border: index === currentPhotoIndex ? '3px solid' : '2px solid',
                     borderColor: index === currentPhotoIndex ? 'primary.main' : 'grey.300',
                     transition: 'all 0.2s ease',
                     '&:hover': {
                       borderColor: 'primary.main',
                       transform: 'scale(1.05)'
                     }
                   }}
                   onClick={() => setCurrentPhotoIndex(index)}
                 >
                   <CardMedia
                     component="img"
                     image={photo.url.replace(/\?.*$/, '') + '?w=160&h=120&fit=crop&auto=format,compress&q=80'}
                     alt={photo.description || `–§–æ—Ç–æ ${index + 1}`}
                     sx={{
                       width: '100%',
                       height: '100%',
                       objectFit: 'cover'
                     }}
                     onError={(e) => {
                       // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                       (e.target as HTMLImageElement).src = photo.url;
                     }}
                   />
                 </Box>
               ))}
             </Box>
           )}
           
           {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏ */}
           <Box sx={{ 
             display: 'flex', 
             justifyContent: 'space-between', 
             alignItems: 'center',
             width: '100%'
           }}>
             <Box sx={{ flex: 1 }}>
               {hasPhotos && sortedPhotos[currentPhotoIndex] && (
                 <Typography variant="body2" color="text.secondary">
                   {sortedPhotos[currentPhotoIndex].description || '–§–æ—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏'}
                 </Typography>
               )}
             </Box>
             <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
               {sortedPhotos.length > 1 && (
                 <Typography variant="body2" color="text.secondary">
                   {currentPhotoIndex + 1} –∏–∑ {sortedPhotos.length}
                 </Typography>
               )}
               <Button onClick={handleCloseModal} color="primary" variant="contained">
                 –ó–∞–∫—Ä—ã—Ç—å
               </Button>
             </Box>
           </Box>
         </DialogActions>
      </Dialog>
    </>
  );
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
interface WorkingSchedule {
  day: string;
  time: string;
  isWorkingDay: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏
const ServicePointCard: React.FC<{ servicePoint: SearchServicePoint }> = ({ servicePoint }) => {
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const cardStyles = getCardStyles(theme, 'primary');
  const navigate = useNavigate();
  
  const [showDetails, setShowDetails] = useState(false);
  const [descriptionExpanded, setDescriptionExpanded] = useState(false);
  const [servicesExpanded, setServicesExpanded] = useState(false);
  const [scheduleExpanded, setScheduleExpanded] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏
  const { 
    data: servicesData, 
    isLoading: servicesLoading 
  } = useGetServicePointServicesQuery(servicePoint.id.toString(), {
    skip: !showDetails // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥
  const services: ServicePointService[] = (servicesData || []).map(service => ({
    id: service.id,
    service_id: service.service_id,
    name: service.name,
    description: service.description,
    price: service.current_price || service.price || 0,
    duration: service.duration || 0,
    is_available: service.is_available
  }));

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (TODO: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
  const mockSchedule: WorkingSchedule[] = [
    { day: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ - –ü\'—è—Ç–Ω–∏—Ü—è', time: '09:00 - 18:00', isWorkingDay: true },
    { day: '–°—É–±–æ—Ç–∞', time: '09:00 - 16:00', isWorkingDay: true },
    { day: '–ù–µ–¥—ñ–ª—è', time: '–í–∏—Ö—ñ–¥–Ω–∏–π', isWorkingDay: false }
  ];

  const handleBooking = () => {
            navigate('/client/booking', { 
      state: { 
        servicePointId: servicePoint.id,
        servicePointName: servicePoint.name,
        cityId: servicePoint.city.id,
        cityName: servicePoint.city.name,
        partnerId: servicePoint.partner.id,
        partnerName: servicePoint.partner.name,
        step1Completed: true // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ 1 —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      } 
    });
  };

  const handleViewDetails = () => {
    navigate(`/client/service-point/${servicePoint.id}`);
  };

  return (
    <Card sx={{ 
      ...cardStyles, 
      mb: 3,
      transition: 'all 0.3s ease',
      '&:hover': {
        transform: 'translateY(-2px)',
        boxShadow: theme.shadows[4]
      }
    }}>
      {/* –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ */}
      <PhotoGallery
        photos={servicePoint.photos || []}
        height={200}
        showCounter={true}
        fallbackIcon="üöó"
        servicePointName={servicePoint.name}
      />

      <CardContent>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="h5" sx={{ fontWeight: 700, mb: 1, color: colors.textPrimary }}>
            {servicePoint.name}
          </Typography>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
            <LocationIcon sx={{ color: colors.textSecondary, fontSize: '1.2rem' }} />
            <Typography variant="body2" sx={{ color: colors.textSecondary }}>
              {servicePoint.address}, {servicePoint.city.name}
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <Rating 
                value={servicePoint.average_rating ? parseFloat(String(servicePoint.average_rating)) : 0} 
                readOnly 
                size="small" 
                precision={0.1}
              />
              <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                ({servicePoint.reviews_count} –≤—ñ–¥–≥—É–∫—ñ–≤)
              </Typography>
            </Box>
            
            <Chip 
              label={servicePoint.work_status} 
              size="small" 
              color={servicePoint.work_status.toLowerCase().includes('—Ä–∞–±–æ—Ç–∞–µ—Ç') || servicePoint.work_status.toLowerCase() === 'working' ? 'success' : 'default'}
              variant="outlined"
            />
          </Box>



          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω */}
          {servicePoint.contact_phone && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <PhoneIcon sx={{ color: colors.textSecondary, fontSize: '1.2rem' }} />
              <Typography variant="body2" sx={{ color: colors.textPrimary }}>
                {servicePoint.contact_phone}
              </Typography>
            </Box>
          )}
        </Box>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–≤–µ—Ä–Ω—É—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) */}
        <Collapse in={showDetails}>
          <Divider sx={{ my: 2 }} />
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {servicePoint.description && servicePoint.description.trim() && (
            <Paper sx={{ p: 2, mb: 2, bgcolor: colors.backgroundField }}>
              <Box 
                sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  justifyContent: 'space-between',
                  cursor: 'pointer' 
                }}
                onClick={() => setDescriptionExpanded(!descriptionExpanded)}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <DescriptionIcon sx={{ color: theme.palette.primary.main }} />
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    –û–ø–∏—Å
                  </Typography>
                </Box>
                {descriptionExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
              </Box>
              
              <Collapse in={descriptionExpanded}>
                <Typography 
                  variant="body2" 
                  sx={{ 
                    mt: 2, 
                    color: colors.textPrimary,
                    lineHeight: 1.6,
                    whiteSpace: 'pre-wrap' // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                  }}
                >
                  {servicePoint.description}
                </Typography>
              </Collapse>
            </Paper>
          )}
          
          {/* –£—Å–ª—É–≥–∏ */}
          <Paper sx={{ p: 2, mb: 2, bgcolor: colors.backgroundField }}>
            <Box 
              sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                cursor: 'pointer' 
              }}
              onClick={() => setServicesExpanded(!servicesExpanded)}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <BuildIcon sx={{ color: theme.palette.primary.main }} />
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  –ü–æ—Å–ª—É–≥–∏ ({servicesLoading ? '...' : services.length})
                </Typography>
              </Box>
              {servicesExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </Box>
            
            <Collapse in={servicesExpanded}>
              {servicesLoading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
                  <CircularProgress size={24} />
                </Box>
              ) : services.length > 0 ? (
                <List dense sx={{ mt: 1 }}>
                  {services.map((service) => (
                    <ListItem key={service.id} sx={{ py: 0.5 }}>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <BuildIcon sx={{ fontSize: '1rem', color: colors.textSecondary }} />
                      </ListItemIcon>
                      <ListItemText
                        primary={service.name}
                        secondary={`${service.price > 0 ? `${service.price} –≥—Ä–Ω` : '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É'} ‚Ä¢ ${service.duration > 0 ? `${service.duration} —Ö–≤` : '–í—Ä–µ–º—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}`}
                        primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
                        secondaryTypographyProps={{ variant: 'caption' }}
                      />
                    </ListItem>
                  ))}
                </List>
              ) : (
                <Typography variant="body2" sx={{ mt: 1, color: colors.textSecondary }}>
                  –£—Å–ª—É–≥–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                </Typography>
              )}
            </Collapse>
          </Paper>

          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã */}
          <Paper sx={{ p: 2, bgcolor: colors.backgroundField }}>
            <Box 
              sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                cursor: 'pointer' 
              }}
              onClick={() => setScheduleExpanded(!scheduleExpanded)}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <ScheduleIcon sx={{ color: theme.palette.primary.main }} />
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
                </Typography>
              </Box>
              {scheduleExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </Box>
            
            <Collapse in={scheduleExpanded}>
              <List dense sx={{ mt: 1 }}>
                {mockSchedule.map((schedule, index) => (
                  <ListItem key={index} sx={{ py: 0.5 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <CalendarIcon 
                        sx={{ 
                          fontSize: '1rem', 
                          color: schedule.isWorkingDay ? theme.palette.success.main : colors.textSecondary 
                        }} 
                      />
                    </ListItemIcon>
                    <ListItemText
                      primary={schedule.day}
                      secondary={schedule.time}
                      primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
                      secondaryTypographyProps={{ 
                        variant: 'caption',
                        color: schedule.isWorkingDay ? 'inherit' : 'error'
                      }}
                    />
                  </ListItem>
                ))}
              </List>
            </Collapse>
          </Paper>
        </Collapse>
      </CardContent>

      <CardActions sx={{ p: 2, pt: 0 }}>
        <Button
          size="small"
          onClick={() => setShowDetails(!showDetails)}
          sx={{ color: colors.textSecondary }}
        >
          {showDetails ? '–ó–≥–æ—Ä–Ω—É—Ç–∏' : '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ'}
        </Button>
        
        <Button
          size="small"
          variant="outlined"
          onClick={handleViewDetails}
          sx={{ 
            ml: 1,
            borderColor: theme.palette.primary.main,
            color: theme.palette.primary.main,
            '&:hover': { 
              borderColor: theme.palette.primary.dark,
              bgcolor: theme.palette.primary.main,
              color: 'white'
            }
          }}
        >
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        </Button>
        
        <Box sx={{ flexGrow: 1 }} />
        
        <Button
          variant="contained"
          size="small"
          startIcon={<BookIcon />}
          onClick={handleBooking}
          sx={{ 
            bgcolor: theme.palette.primary.main,
            '&:hover': { bgcolor: theme.palette.primary.dark }
          }}
        >
          –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è
        </Button>
      </CardActions>
    </Card>
  );
};

const ClientSearchPage: React.FC = () => {
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const location = useLocation();
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ URL
  const searchParams = useMemo(() => {
    const params = new URLSearchParams(location.search);
    return {
      city: params.get('city') || '',
      query: params.get('query') || ''
    };
  }, [location.search]);

  // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –ø–æ –≥–æ—Ä–æ–¥—É
  const { 
    data: categoriesResult, 
    isLoading: categoriesLoading,
    error: categoriesError 
  } = useGetServiceCategoriesByCityQuery(
    searchParams.city,
    { skip: !searchParams.city }
  );

  // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
  const { 
    data: searchResult, 
    isLoading, 
    error 
  } = useSearchServicePointsQuery(
    { 
      city: searchParams.city,
      query: searchParams.query 
    },
    { skip: !searchParams.city || selectedCategory === null } // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  );

  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  const servicePoints: SearchServicePoint[] = (searchResult?.data || []).map(point => {
    return {
      id: point.id,
      name: point.name,
      address: point.address,
      description: (point as any).description,
      city: {
        id: point.city?.id || 0,
        name: point.city?.name || '',
        region: point.city?.region?.name || ''
      },
      partner: {
        id: point.partner?.id || 0,
        name: point.partner?.company_name || point.partner?.name || ''
      },
      contact_phone: point.contact_phone,
      average_rating: (point as any).average_rating || 4.0,
      reviews_count: (point as any).reviews_count || 0,
      posts_count: point.post_count,
      work_status: point.work_status,
      distance: undefined, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      photos: ((point as any).photos || []).map((photo: any) => ({
        id: photo.id,
        url: photo.url,
        description: photo.description,
        is_main: photo.is_main,
        sort_order: photo.sort_order || 0
      }))
    };
  });
  const totalFound = searchResult?.total || 0;
  const cityFound = searchResult?.city_found ?? true;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (categoriesLoading) {
    return (
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>
            <CircularProgress size={60} />
            <Typography variant="h6" sx={{ ml: 2, color: colors.textSecondary }}>
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥...
            </Typography>
          </Box>
        </Container>
      </Box>
    );
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
      <Container maxWidth="lg" sx={{ py: 4 }}>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" sx={{ fontWeight: 700, mb: 1, color: colors.textPrimary }}>
            üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
          </Typography>
          
          {searchParams.city && (
            <Typography variant="h6" sx={{ color: colors.textSecondary, mb: 2 }}>
              –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ç–æ—á–∫–∏ –≤ –º—ñ—Å—Ç—ñ "{searchParams.city}"
              {searchParams.query && ` –∑–∞ –∑–∞–ø–∏—Ç–æ–º "${searchParams.query}"`}
            </Typography>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
              <Chip 
                label={`–ó–Ω–∞–π–¥–µ–Ω–æ: ${totalFound}`} 
                color="primary" 
                variant="outlined" 
              />
              {cityFound && searchParams.city && (
                <Chip 
                  label={`–ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ`} 
                  color="success" 
                  size="small" 
                  variant="outlined" 
                />
              )}
            </Box>
            
            <Button
              variant="outlined"
              onClick={() => window.location.href = '/client'}
              sx={secondaryButtonStyles}
            >
              –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </Button>
          </Box>
        </Box>

        {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ */}
        {categoriesResult && categoriesResult.data.length > 0 && (
          <Box sx={{ mb: 4 }}>
            <Typography variant="h5" sx={{ fontWeight: 600, mb: 3, color: colors.textPrimary }}>
              –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–ª—É–≥
            </Typography>
            <Typography variant="body1" sx={{ color: colors.textSecondary, mb: 3 }}>
              –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Å–ª—É–≥ –¥–ª—è –ø–æ—à—É–∫—É –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ç–æ—á–æ–∫
            </Typography>
            
            <Grid container spacing={3}>
              {categoriesResult.data.map((category) => (
                <Grid item xs={12} sm={6} md={4} key={category.id}>
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: selectedCategory === category.id ? `2px solid ${theme.palette.primary.main}` : '1px solid transparent',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: theme.shadows[4]
                      }
                    }}
                    onClick={() => setSelectedCategory(category.id)}
                  >
                    <CardContent sx={{ textAlign: 'center', py: 3 }}>
                      <Box sx={{ 
                        fontSize: '2.5rem', 
                        mb: 2,
                        color: selectedCategory === category.id ? theme.palette.primary.main : colors.textSecondary
                      }}>
                        {category.name.includes('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ') ? 'üîß' : 'üöó'}
                      </Box>
                      <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                        {category.name}
                      </Typography>
                      <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                        {category.description || '–ú–æ–π–∫–∞, –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏'}
                      </Typography>
                      <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, flexWrap: 'wrap' }}>
                        <Chip 
                          label={`–î–æ—Å—Ç—É–ø–Ω–æ —É—Å–ª—É–≥: ${category.services_count}`}
                          size="small"
                          variant="outlined"
                        />
                        <Chip 
                          label={`–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤: ${category.service_points_count}`}
                          size="small"
                          variant="outlined"
                        />
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        )}

        {/* –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */}
        {categoriesError && (
          <Alert severity="error" sx={{ mb: 4 }}>
            –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.
          </Alert>
        )}

        {error && (
          <Alert severity="error" sx={{ mb: 4 }}>
            –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.
          </Alert>
        )}

        {/* –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω */}
        {!cityFound && searchParams.city && (
          <Alert severity="warning" sx={{ mb: 4 }}>
            –ú—ñ—Å—Ç–æ "{searchParams.city}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤ –Ω—å–æ–º—É –Ω–µ–º–∞—î —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ç–æ—á–æ–∫.
          </Alert>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
        {selectedCategory && (
          <>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ */}
            {isLoading && (
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', py: 4 }}>
                <CircularProgress size={40} />
                <Typography variant="h6" sx={{ ml: 2, color: colors.textSecondary }}>
                  –ü–æ—à—É–∫ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ç–æ—á–æ–∫...
                </Typography>
              </Box>
            )}

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            {!isLoading && (
              <Box sx={{ mb: 3 }}>
                <Typography variant="h5" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                  üè¢ –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ç–æ—á–∫–∏
                </Typography>
                <Typography variant="body1" sx={{ color: colors.textSecondary }}>
                  –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ç–æ—á–∫–∏, —â–æ –Ω–∞–¥–∞—é—Ç—å –ø–æ—Å–ª—É–≥–∏ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –º—ñ—Å—Ç—ñ "{searchParams.city}"
                </Typography>
              </Box>
            )}

            {servicePoints.length === 0 && !isLoading && !error ? (
              <Box sx={{ textAlign: 'center', py: 8 }}>
                <Typography variant="h6" sx={{ color: colors.textSecondary, mb: 2 }}>
                  üòî –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ç–æ—á–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
                </Typography>
                <Typography variant="body1" sx={{ color: colors.textSecondary, mb: 4 }}>
                  –î–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ç–æ—á–æ–∫ —É —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ
                </Typography>
                <Button 
                  variant="outlined" 
                  onClick={() => setSelectedCategory(null)}
                  sx={secondaryButtonStyles}
                >
                  –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                </Button>
              </Box>
            ) : !isLoading && (
              <Grid container spacing={3}>
                {servicePoints.map((servicePoint) => (
                  <Grid item xs={12} md={6} lg={4} key={servicePoint.id}>
                    <ServicePointCard servicePoint={servicePoint} />
                  </Grid>
                ))}
              </Grid>
            )}
          </>
        )}
      </Container>
    </Box>
  );
};

export default ClientSearchPage;