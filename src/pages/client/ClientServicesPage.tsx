import React, { useState, useMemo, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Typography,
  Button,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  Chip,
  TextField,
  InputAdornment,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Fade,
  useTheme,
  Skeleton,
  Alert,
  Autocomplete,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  IconButton,
  Rating,
  Tooltip,
  Stack,
  Avatar,
  CardMedia,
  Pagination,
  CircularProgress
} from '@mui/material';
import {
  Search as SearchIcon,
  LocationOn as LocationIcon,
  Schedule as ScheduleIcon,
  AttachMoney as MoneyIcon,
  Star as StarIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon,
  BookOnline as BookIcon,
  Info as InfoIcon,
  Sort as SortIcon,
  Business as BusinessIcon,
  Phone as PhoneIcon,
  Reviews as ReviewsIcon,
  Category as CategoryIcon,
  Build as BuildIcon,
  Tune as TuneIcon
} from '@mui/icons-material';

import { 
  getCardStyles, 
  getButtonStyles, 
  getTextFieldStyles,
  getThemeColors,
  ANIMATIONS
} from '../../styles';
import ClientLayout from '../../components/client/ClientLayout';

// API –∏–º–ø–æ—Ä—Ç—ã
import { useGetServiceCategoriesQuery } from '../../api/services.api';
import { useGetServicesQuery } from '../../api/servicesList.api';
import { useGetRegionsQuery } from '../../api/regions.api';
import { useGetCitiesQuery } from '../../api/cities.api';
import { useSearchServicePointsQuery, useGetRegionsWithServicePointsQuery, useGetCitiesWithServicePointsQuery, useGetServicePointByIdQuery } from '../../api/servicePoints.api';
import { useDispatch } from 'react-redux';
import { baseApi } from '../../api/baseApi';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
import type { ServicePoint, ServiceCategory, City, ServicePointService, Region, Service } from '../../types/models';
import { useLocalizedName } from '../../utils/localizationHelpers';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { ServicePointCard, ServicePointData } from '../../components/ui/ServicePointCard';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏–∑ –ø–æ–∏—Å–∫–∞
interface ServicePointWithSearchData extends ServicePoint {
  average_rating?: number | string;
  reviews_count?: number;
  distance?: number;
  posts_count?: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
interface SortOption {
  value: string;
  label: string;
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ServicePoint –≤ ServicePointData
const convertServicePointToServicePointData = (servicePoint: ServicePointWithSearchData): ServicePointData => {
  return {
    id: servicePoint.id,
    name: servicePoint.name,
    address: servicePoint.address || '',
    description: servicePoint.description,
    city: servicePoint.city ? {
      id: servicePoint.city.id,
      name: servicePoint.city.name,
      region: servicePoint.city.region?.name
    } : undefined,
    partner: servicePoint.partner ? {
      id: servicePoint.partner.id,
      name: servicePoint.partner.company_name || servicePoint.partner.name || ''
    } : undefined,
    contact_phone: servicePoint.contact_phone || servicePoint.phone,
    average_rating: servicePoint.average_rating,
    reviews_count: servicePoint.reviews_count,
    work_status: servicePoint.work_status,
    is_active: servicePoint.is_active,
    photos: servicePoint.photos?.map(photo => ({
      id: photo.id,
      url: photo.url || '',
      description: photo.description,
      is_main: photo.is_main || false,
      sort_order: photo.sort_order || 0
    })) || [],
  };
};

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è ServicePointCard —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const ServicePointCardWrapper: React.FC<{
  servicePoint: ServicePointWithSearchData;
  onViewDetails: (servicePointData: ServicePointData) => void;
  onBook: (servicePointData: ServicePointData) => void;
}> = ({ servicePoint, onViewDetails, onBook }) => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ service_posts
  const { data: fullServicePointData, isLoading } = useGetServicePointByIdQuery(servicePoint.id.toString());
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const servicePointData = convertServicePointToServicePointData(fullServicePointData || servicePoint);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ service_posts
  const categories = useMemo(() => {
    if (!fullServicePointData?.service_posts) return [];
    
    const uniqueCategories = new Map();
    fullServicePointData.service_posts.forEach(post => {
      if (post.service_category && !uniqueCategories.has(post.service_category.id)) {
        uniqueCategories.set(post.service_category.id, {
          id: post.service_category.id,
          name: post.service_category.name,
          description: post.service_category.description,
          services_count: post.service_category.services_count || 0
        });
      }
    });
    
    return Array.from(uniqueCategories.values());
  }, [fullServicePointData?.service_posts]);

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω
  if (isLoading) {
    return (
      <Grid item xs={12} md={6} lg={4}>
        <Card sx={{ height: '100%' }}>
          <CardContent>
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
              <CircularProgress />
            </Box>
          </CardContent>
        </Card>
      </Grid>
    );
  }

  return (
    <Grid item xs={12} md={6} lg={4}>
      <ServicePointCard
        servicePoint={servicePointData}
        variant="compact"
        onViewDetails={() => onViewDetails(servicePointData)}
        onBook={() => onBook(servicePointData)}
        showDetailsLink={true}
        showBookButton={true}
        showFavoriteButton={true}
        categories={categories}
        isLoadingCategories={isLoading}
      />
    </Grid>
  );
};

const ClientServicesPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const localizedName = useLocalizedName();
  const dispatch = useDispatch();
  
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme, 'filled');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
  const [selectedService, setSelectedService] = useState<number | null>(null);
  const [selectedRegion, setSelectedRegion] = useState<number | null>(null);
  const [selectedCity, setSelectedCity] = useState<City | null>(null);
  const [sortBy, setSortBy] = useState<string>('name');
  const [showFilters, setShowFilters] = useState(false);
  const [expandedServicePoints, setExpandedServicePoints] = useState<Set<number>>(new Set());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12); // 12 –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

  // –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const sortOptions: SortOption[] = [
    { value: 'name', label: t('forms.clientPages.clientServicesPage.sortOptions.name') },
    { value: 'rating', label: t('forms.clientPages.clientServicesPage.sortOptions.rating') },
    { value: 'reviews_count', label: t('forms.clientPages.clientServicesPage.sortOptions.reviewsCount') },
    { value: 'distance', label: t('forms.clientPages.clientServicesPage.sortOptions.distance') }
  ];

  // API –∑–∞–ø—Ä–æ—Å—ã
  const { 
    data: categoriesResponse, 
    isLoading: categoriesLoading,
    error: categoriesError 
  } = useGetServiceCategoriesQuery({ 
    active: true,
    with_active_posts: true,
    per_page: 50 
  });

  const { 
    data: servicesResponse, 
    isLoading: servicesLoading 
  } = useGetServicesQuery({ 
    category_id: selectedCategory || undefined,
    per_page: 100 
  });

  // –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
  const { 
    data: regionsResponse, 
    isLoading: regionsLoading 
  } = useGetRegionsWithServicePointsQuery({ 
    category_id: selectedCategory || undefined,
    service_id: selectedService || undefined
  });

  // –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  const citiesQueryParams = useMemo(() => ({
    category_id: selectedCategory || undefined,
    service_id: selectedService || undefined,
    region_id: selectedRegion || undefined
  }), [selectedCategory, selectedService, selectedRegion]);

  // –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–æ–≤
  console.log('üèôÔ∏è Cities query params:', citiesQueryParams);
  console.log('üèôÔ∏è Selected region:', selectedRegion);

  const { 
    data: citiesResponse, 
    isLoading: citiesLoading,
    refetch: refetchCities
  } = useGetCitiesWithServicePointsQuery(citiesQueryParams, {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    refetchOnMountOrArgChange: true,
  });

  // –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤
  console.log('üèôÔ∏è Cities response:', citiesResponse);
  console.log('üèôÔ∏è Cities data:', citiesResponse?.data);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
  const searchParams = useMemo(() => {
    const params: any = {
      page: currentPage,
      per_page: itemsPerPage
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    if (selectedRegion) {
      params.region_id = selectedRegion;
    }
    
    if (selectedCity) {
      params.city = selectedCity.name;
    }
    
    if (searchQuery) {
      params.query = searchQuery;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
    if (selectedCategory) {
      params.category_id = selectedCategory;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ
    if (selectedService) {
      params.service_id = selectedService;
    }
    
    return params;
  }, [selectedRegion, selectedCity, searchQuery, selectedService, selectedCategory, currentPage, itemsPerPage]);

  // –ó–∞–ø—Ä–æ—Å —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
  const { 
    data: servicePointsResponse,
    isLoading: servicePointsLoading,
    error: servicePointsError
  } = useSearchServicePointsQuery(searchParams);

  // –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const categories = categoriesResponse?.data || [];
  const services = servicesResponse?.data || [];
  const regions = regionsResponse?.data || [];
  const cities = citiesResponse?.data || []; // –£–±–∏—Ä–∞–µ–º filteredCities, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é citiesResponse
  const servicePoints: ServicePointWithSearchData[] = servicePointsResponse?.data || [];

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedCategories = useMemo(() => {
    const categoryOrder = ['–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'];
    return [...categories].sort((a, b) => {
      const indexA = categoryOrder.indexOf(a.name);
      const indexB = categoryOrder.indexOf(b.name);
      
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ–º –µ—ë –≤ –∫–æ–Ω–µ—Ü
      if (indexA === -1 && indexB === -1) return 0;
      if (indexA === -1) return 1;
      if (indexB === -1) return -1;
      
      return indexA - indexB;
    });
  }, [categories]);

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
  const sortedServicePoints = useMemo(() => {
    if (!servicePoints.length) return [];

    const sorted = [...servicePoints].sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'rating':
          const ratingA = parseFloat(a.average_rating?.toString() || '0');
          const ratingB = parseFloat(b.average_rating?.toString() || '0');
          return ratingB - ratingA;
        case 'reviews_count':
          return (b.reviews_count || 0) - (a.reviews_count || 0);
        case 'distance':
          return (a.distance || 0) - (b.distance || 0);
        default:
          return 0;
      }
    });

    return sorted;
  }, [servicePoints, sortBy]);

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
  const totalItems = servicePointsResponse?.total || sortedServicePoints.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetPage = () => {
    setCurrentPage(1);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleClearFilters = () => {
    setSearchQuery('');
    setSelectedCategory(null);
    setSelectedService(null);
    setSelectedRegion(null);
    setSelectedCity(null);
    setSortBy('name');
    resetPage();
  };

  const handleCategoryChange = (categoryId: number | null) => {
    setSelectedCategory(categoryId);
    setSelectedService(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    // –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    setSelectedRegion(null);
    setSelectedCity(null);
    resetPage();
  };

  const handleRegionChange = (regionId: number | null) => {
    console.log('üîÑ Region change:', regionId);
    console.log('üîÑ Previous region:', selectedRegion);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –≥–æ—Ä–æ–¥–æ–≤
    dispatch(baseApi.util.invalidateTags(['City']));
    
    setSelectedRegion(regionId);
    setSelectedCity(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–≥–∏–æ–Ω–∞
    resetPage();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setTimeout(() => {
      refetchCities();
    }, 100);
  };

  const handleSearchChange = (query: string) => {
    setSearchQuery(query);
    resetPage();
  };

  const handleServiceChange = (serviceId: number | null) => {
    setSelectedService(serviceId);
    // –ü—Ä–∏ —Å–º–µ–Ω–µ —É—Å–ª—É–≥–∏ —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    setSelectedRegion(null);
    setSelectedCity(null);
    resetPage();
  };

  const handleCityChange = (city: City | null) => {
    setSelectedCity(city);
    resetPage();
  };

  const handleSortChange = (sort: string) => {
    setSortBy(sort);
    resetPage();
  };

  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    window.scrollTo({ top: 400, behavior: 'smooth' });
  };

  const handleBookService = (servicePointData: ServicePointData) => {
    // –õ–æ–≥–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ServicePointCard —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    console.log('üéØ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ServicePointCard –¥–ª—è:', servicePointData.name);
  };

  const handleViewDetails = (servicePointData: ServicePointData) => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏
    navigate(`/client/service-point/${servicePointData.id}`);
  };

  const toggleServicePointExpansion = (servicePointId: number) => {
    const newExpanded = new Set(expandedServicePoints);
    if (newExpanded.has(servicePointId)) {
      newExpanded.delete(servicePointId);
    } else {
      newExpanded.add(servicePointId);
    }
    setExpandedServicePoints(newExpanded);
  };

  const getServiceIcon = (categoryName: string) => {
    const iconMap: { [key: string]: string } = {
      '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂': t('forms.clientPages.clientServicesPage.serviceIcons.tireService'),
      '–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞': t('forms.clientPages.clientServicesPage.serviceIcons.balancing'),
      '–†–µ–º–æ–Ω—Ç –¥–∏—Å–∫–æ–≤': t('forms.clientPages.clientServicesPage.serviceIcons.wheelRepair'),
      '–ê–≤—Ç–æ–º–æ–π–∫–∞': t('forms.clientPages.clientServicesPage.serviceIcons.carWash'),
      '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': t('forms.clientPages.clientServicesPage.serviceIcons.diagnostics'),
      'default': t('forms.clientPages.clientServicesPage.serviceIcons.default')
    };
    return iconMap[categoryName] || iconMap.default;
  };

  const formatRating = (rating: string | number | undefined) => {
    if (!rating) return 0;
    return parseFloat(rating.toString());
  };

  return (
    <ClientLayout>
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Fade in timeout={300}>
            <Box sx={{ textAlign: 'center', mb: 6 }}>
              <Typography variant="h3" sx={{ fontWeight: 700, mb: 2, color: colors.textPrimary }}>
                {t('forms.clientPages.clientServicesPage.title')}
              </Typography>
              <Typography variant="h6" sx={{ color: colors.textSecondary, maxWidth: 600, mx: 'auto' }}>
                {t('forms.clientPages.clientServicesPage.subtitle')}
              </Typography>
            </Box>
          </Fade>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <Fade in timeout={500}>
            <Paper sx={{ ...cardStyles, mb: 4, p: 3 }}>
              <Grid container spacing={3} alignItems="center">
                {/* –ü–æ–∏—Å–∫ */}
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label={t('forms.clientPages.clientServicesPage.searchLabel')}
                    value={searchQuery}
                    onChange={(e) => handleSearchChange(e.target.value)}
                    placeholder={t('forms.clientPages.clientServicesPage.searchPlaceholder')}
                    sx={textFieldStyles}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <SearchIcon />
                        </InputAdornment>
                      ),
                      endAdornment: searchQuery && (
                        <InputAdornment position="end">
                          <IconButton size="small" onClick={() => setSearchQuery('')}>
                            <ClearIcon />
                          </IconButton>
                        </InputAdornment>
                      )
                    }}
                  />
                </Grid>
                
                {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
                <Grid item xs={12} md={3}>
                  <FormControl fullWidth sx={textFieldStyles}>
                    <InputLabel>{t('forms.clientPages.clientServicesPage.sortLabel')}</InputLabel>
                    <Select
                      value={sortBy}
                      onChange={(e) => handleSortChange(e.target.value)}
                      label={t('forms.clientPages.clientServicesPage.sortLabel')}
                      startAdornment={
                        <InputAdornment position="start">
                          <SortIcon />
                        </InputAdornment>
                      }
                    >
                      {sortOptions.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                <Grid item xs={12} md={3}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<TuneIcon />}
                    endIcon={showFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    onClick={() => setShowFilters(!showFilters)}
                    sx={{ ...secondaryButtonStyles, height: '56px' }}
                  >
                    {t('forms.clientPages.clientServicesPage.filtersButton')}
                  </Button>
                </Grid>
              </Grid>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
              <Collapse in={showFilters}>
                <Box sx={{ mt: 3, pt: 3, borderTop: `1px solid ${colors.backgroundSecondary}` }}>
                  <Grid container spacing={3}>
                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ */}
                    <Grid item xs={12} md={6} lg={3}>
                      <FormControl fullWidth sx={textFieldStyles}>
                        <InputLabel>{t('forms.clientPages.clientServicesPage.categoryLabel')}</InputLabel>
                        <Select
                          value={selectedCategory || ''}
                          onChange={(e) => handleCategoryChange(e.target.value ? Number(e.target.value) : null)}
                          label={t('forms.clientPages.clientServicesPage.categoryLabel')}
                          startAdornment={
                            <InputAdornment position="start">
                              <CategoryIcon />
                            </InputAdornment>
                          }
                        >
                          <MenuItem value="">{t('forms.clientPages.clientServicesPage.filters.allCategories')}</MenuItem>
                          {sortedCategories.map((category) => (
                            <MenuItem key={category.id} value={category.id}>
                              {getServiceIcon(category.name)} {category.name}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    {/* –£—Å–ª—É–≥–∏ */}
                    <Grid item xs={12} md={6} lg={3}>
                      <FormControl fullWidth sx={textFieldStyles} disabled={!selectedCategory}>
                        <InputLabel>{t('forms.clientPages.clientServicesPage.serviceLabel')}</InputLabel>
                        <Select
                          value={selectedService || ''}
                          onChange={(e) => handleServiceChange(e.target.value ? Number(e.target.value) : null)}
                          label={t('forms.clientPages.clientServicesPage.serviceLabel')}
                          startAdornment={
                            <InputAdornment position="start">
                              <BuildIcon />
                            </InputAdornment>
                          }
                        >
                          <MenuItem value="">{t('forms.clientPages.clientServicesPage.filters.allServices')}</MenuItem>
                          {services.map((service) => (
                            <MenuItem key={service.id} value={service.id}>
                              {service.name}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>

                    {/* –†–µ–≥–∏–æ–Ω */}
                    <Grid item xs={12} md={6} lg={3}>
                      <FormControl fullWidth sx={textFieldStyles}>
                        <InputLabel>{t('forms.clientPages.clientServicesPage.regionLabel')}</InputLabel>
                        <Select
                          value={selectedRegion || ''}
                          onChange={(e) => handleRegionChange(e.target.value ? Number(e.target.value) : null)}
                          label={t('forms.clientPages.clientServicesPage.regionLabel')}
                          startAdornment={
                            <InputAdornment position="start">
                              <LocationIcon />
                            </InputAdornment>
                          }
                        >
                          <MenuItem value="">{t('forms.clientPages.clientServicesPage.filters.allRegions')}</MenuItem>
                          {regions.map((region) => (
                            <MenuItem key={region.id} value={region.id}>
                              {localizedName(region)}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    {/* –ì–æ—Ä–æ–¥ */}
                    <Grid item xs={12} md={6} lg={3}>
                      <Autocomplete
                        options={cities}
                        getOptionLabel={(city) => localizedName(city)}
                        value={selectedCity}
                        onChange={(_, newValue) => handleCityChange(newValue)}
                        // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label={t('forms.clientPages.clientServicesPage.cityLabel')}
                            placeholder={t('forms.clientPages.clientServicesPage.cityPlaceholder')}
                            sx={textFieldStyles}
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <InputAdornment position="start">
                                  <LocationIcon />
                                </InputAdornment>
                              ),
                            }}
                          />
                        )}
                        loading={citiesLoading}
                        loadingText={t('forms.clientPages.clientServicesPage.loading.cities')}
                        noOptionsText={t('forms.clientPages.clientServicesPage.noOptions.cities')}
                      />
                    </Grid>
                  </Grid>

                  {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
                    <Button
                      variant="text"
                      startIcon={<ClearIcon />}
                      onClick={handleClearFilters}
                      sx={{ color: colors.textSecondary }}
                    >
                      {t('forms.clientPages.clientServicesPage.clearFiltersButton')}
                    </Button>
                  </Box>
                </Box>
              </Collapse>
            </Paper>
          </Fade>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
          {servicePointsLoading ? (
            <Grid container spacing={3}>
              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((i) => (
                <Grid item xs={12} md={6} lg={4} key={i}>
                  <Skeleton variant="rectangular" height={300} sx={{ borderRadius: 2 }} />
                </Grid>
              ))}
            </Grid>
          ) : servicePointsError ? (
            <Alert severity="error" sx={{ mb: 4 }}>
              {t('forms.clientPages.clientServicesPage.errors.loadingData')}
            </Alert>
          ) : sortedServicePoints.length === 0 ? (
            <Fade in timeout={700}>
              <Alert severity="warning" sx={{ mb: 4 }}>
                {t('forms.clientPages.clientServicesPage.results.noResults')}
                {(searchQuery || selectedCity || selectedCategory || selectedService) && 
                  t('forms.clientPages.clientServicesPage.results.tryChangeFilters')}
              </Alert>
            </Fade>
          ) : (
            <Fade in timeout={700}>
              <Box>
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
                <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 2 }}>
                  <Typography variant="h6" sx={{ color: colors.textPrimary }}>
                    {totalPages > 1 
                      ? t('forms.clientPages.clientServicesPage.results.foundWithPagination', { 
                          total: totalItems, 
                          current: currentPage, 
                          total_pages: totalPages 
                        })
                      : t('forms.clientPages.clientServicesPage.results.found', { count: totalItems })
                    }
                  </Typography>
                  <Stack direction="row" spacing={1} flexWrap="wrap">
                    {selectedCity && (
                      <Chip 
                        label={t('forms.clientPages.clientServicesPage.chips.city', { name: selectedCity.name })}
                        onDelete={() => handleCityChange(null)}
                        color="primary"
                        size="small"
                      />
                    )}
                    {selectedCategory && (
                      <Chip 
                        label={t('forms.clientPages.clientServicesPage.chips.category', { 
                          name: sortedCategories.find(c => c.id === selectedCategory)?.name 
                        })}
                        onDelete={() => handleCategoryChange(null)}
                        color="secondary"
                        size="small"
                      />
                    )}
                    {selectedService && (
                      <Chip 
                        label={t('forms.clientPages.clientServicesPage.chips.service', { 
                          name: services.find(s => s.id === selectedService)?.name 
                        })}
                        onDelete={() => handleServiceChange(null)}
                        color="info"
                        size="small"
                      />
                    )}
                  </Stack>
                </Box>

                {/* –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ */}
                <Grid container spacing={3}>
                  {sortedServicePoints.map((servicePoint) => (
                    <ServicePointCardWrapper
                      key={servicePoint.id}
                      servicePoint={servicePoint}
                      onViewDetails={handleViewDetails}
                      onBook={handleBookService}
                    />
                  ))}
                </Grid>

                {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                {totalPages > 1 && (
                  <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                    <Pagination
                      count={totalPages}
                      page={currentPage}
                      onChange={handlePageChange}
                      color="primary"
                      size="large"
                      showFirstButton
                      showLastButton
                      sx={{
                        '& .MuiPaginationItem-root': {
                          fontSize: '1rem',
                          fontWeight: 500,
                        },
                        '& .MuiPaginationItem-page.Mui-selected': {
                          backgroundColor: colors.primary,
                          color: 'white',
                          '&:hover': {
                            backgroundColor: colors.primary,
                            opacity: 0.8,
                          },
                        },
                      }}
                    />
                  </Box>
                )}
              </Box>
            </Fade>
          )}
        </Container>
      </Box>
    </ClientLayout>
  );
};

export default ClientServicesPage; 