import React, { useState, useMemo, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Typography,
  Button,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  Chip,
  TextField,
  InputAdornment,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Fade,
  useTheme,
  Skeleton,
  Alert,
  Autocomplete,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  IconButton,
  Rating,
  Tooltip
} from '@mui/material';
import {
  Search as SearchIcon,
  LocationOn as LocationIcon,
  Schedule as ScheduleIcon,
  AttachMoney as MoneyIcon,
  Star as StarIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon,
  BookOnline as BookIcon,
  Info as InfoIcon
} from '@mui/icons-material';

import { 
  getCardStyles, 
  getButtonStyles, 
  getTextFieldStyles,
  getThemeColors,
  ANIMATIONS
} from '../../styles';
import ClientLayout from '../../components/client/ClientLayout';

// API –∏–º–ø–æ—Ä—Ç—ã
import { useGetServiceCategoriesQuery } from '../../api/services.api';
import { useGetCitiesQuery } from '../../api/cities.api';
import { useSearchServicePointsQuery } from '../../api/servicePoints.api';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
import type { ServicePoint, ServiceCategory, City, ServicePointService } from '../../types/models';

const ClientServicesPage: React.FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme, 'filled');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
  const [selectedCity, setSelectedCity] = useState<City | null>(null);
  const [priceFilter, setPriceFilter] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [expandedServicePoints, setExpandedServicePoints] = useState<Set<number>>(new Set());

  // API –∑–∞–ø—Ä–æ—Å—ã
  const { 
    data: categoriesResponse, 
    isLoading: categoriesLoading,
    error: categoriesError 
  } = useGetServiceCategoriesQuery({ 
    active: true,
    per_page: 50 
  });

  const { 
    data: citiesResponse, 
    isLoading: citiesLoading 
  } = useGetCitiesQuery({ 
    per_page: 100 
  });

  const { 
    data: servicePointsResponse,
    isLoading: servicePointsLoading,
    error: servicePointsError
  } = useSearchServicePointsQuery(
    selectedCity ? { city: selectedCity.name } : {},
    { skip: !selectedCity }
  );

  // –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const categories = categoriesResponse?.data || [];
  const cities = citiesResponse?.data || [];
  const servicePoints = servicePointsResponse?.data || [];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å–ª—É–≥
  const filteredServices = useMemo(() => {
    if (!servicePoints.length) return [];

    let allServices: (ServicePointService & { servicePoint: ServicePoint })[] = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
    servicePoints.forEach(servicePoint => {
      if (servicePoint.services) {
        servicePoint.services.forEach(service => {
          if (service.is_available && service.service) {
            allServices.push({
              ...service,
              servicePoint
            });
          }
        });
      }
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    return allServices.filter(service => {
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏
      const serviceName = service.service?.name || '';
      const matchesSearch = !searchQuery || 
        serviceName.toLowerCase().includes(searchQuery.toLowerCase());

      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const matchesCategory = !selectedCategory || 
        (service.service?.category && service.service.category.id === selectedCategory);

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
      const matchesPrice = !priceFilter || 
        (priceFilter === 'low' && service.price <= 500) ||
        (priceFilter === 'medium' && service.price > 500 && service.price <= 1500) ||
        (priceFilter === 'high' && service.price > 1500);

      return matchesSearch && matchesCategory && matchesPrice;
    });
  }, [servicePoints, searchQuery, selectedCategory, priceFilter]);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å–ª—É–≥ –ø–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Ç–æ—á–∫–∞–º
  const servicesByServicePoint = useMemo(() => {
    const grouped = new Map<number, {
      servicePoint: ServicePoint;
      services: ServicePointService[];
    }>();

    filteredServices.forEach(service => {
      const spId = service.servicePoint.id;
      if (!grouped.has(spId)) {
        grouped.set(spId, {
          servicePoint: service.servicePoint,
          services: []
        });
      }
      grouped.get(spId)!.services.push(service);
    });

    return Array.from(grouped.values());
  }, [filteredServices]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleClearFilters = () => {
    setSearchQuery('');
    setSelectedCategory(null);
    setSelectedCity(null);
    setPriceFilter('');
  };

  const handleBookService = (service: ServicePointService, servicePoint: ServicePoint) => {
    if (!servicePoint.city || !service.service) return;
    
    navigate('/client/booking/new-with-availability', {
      state: {
        preselected: {
          city_id: servicePoint.city.id,
          service_point_id: servicePoint.id,
          service_id: service.service_id,
          service_name: service.service.name,
          service_price: service.price,
          service_duration: service.duration
        }
      }
    });
  };

  const toggleServicePointExpansion = (servicePointId: number) => {
    const newExpanded = new Set(expandedServicePoints);
    if (newExpanded.has(servicePointId)) {
      newExpanded.delete(servicePointId);
    } else {
      newExpanded.add(servicePointId);
    }
    setExpandedServicePoints(newExpanded);
  };

  const getServiceIcon = (categoryName: string) => {
    const iconMap: { [key: string]: string } = {
      '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': 'üîß',
      '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂': 'üöó',
      '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'üîç',
      '—Ä–µ–º–æ–Ω—Ç': '‚öôÔ∏è',
      '–º–æ–π–∫–∞': 'üíß',
      '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': 'üè™'
    };
    return iconMap[categoryName.toLowerCase()] || 'üîß';
  };

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  if (categoriesLoading || citiesLoading) {
    return (
      <ClientLayout>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          <Skeleton variant="text" width="60%" height={60} sx={{ mb: 2 }} />
          <Skeleton variant="text" width="40%" height={40} sx={{ mb: 4 }} />
          <Grid container spacing={3}>
            {[1, 2, 3, 4, 5, 6].map((i) => (
              <Grid item xs={12} md={6} lg={4} key={i}>
                <Skeleton variant="rectangular" height={300} sx={{ borderRadius: 2 }} />
              </Grid>
            ))}
          </Grid>
        </Container>
      </ClientLayout>
    );
  }

  return (
    <ClientLayout>
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Fade in timeout={300}>
            <Box sx={{ textAlign: 'center', mb: 6 }}>
              <Typography variant="h3" sx={{ fontWeight: 700, mb: 2, color: colors.textPrimary }}>
                üîß –ü–æ–∏—Å–∫ —É—Å–ª—É–≥
              </Typography>
              <Typography variant="h6" sx={{ color: colors.textSecondary, maxWidth: 600, mx: 'auto' }}>
                –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
              </Typography>
            </Box>
          </Fade>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <Fade in timeout={500}>
            <Paper sx={{ ...cardStyles, mb: 4, p: 3 }}>
              <Grid container spacing={3} alignItems="center">
                {/* –ü–æ–∏—Å–∫ */}
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="–ù–∞–π—Ç–∏ —É—Å–ª—É–≥—É..."
                    sx={textFieldStyles}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <SearchIcon />
                        </InputAdornment>
                      ),
                      endAdornment: searchQuery && (
                        <InputAdornment position="end">
                          <IconButton size="small" onClick={() => setSearchQuery('')}>
                            <ClearIcon />
                          </IconButton>
                        </InputAdornment>
                      )
                    }}
                  />
                </Grid>
                
                {/* –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ */}
                <Grid item xs={12} md={4}>
                  <Autocomplete
                    options={cities}
                    getOptionLabel={(city) => `${city.name}${city.region ? `, ${city.region.name}` : ''}`}
                    value={selectedCity}
                    onChange={(_, newValue) => setSelectedCity(newValue)}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        label="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
                        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
                        sx={textFieldStyles}
                        InputProps={{
                          ...params.InputProps,
                          startAdornment: (
                            <InputAdornment position="start">
                              <LocationIcon />
                            </InputAdornment>
                          ),
                        }}
                      />
                    )}
                    loading={citiesLoading}
                    loadingText="–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤..."
                    noOptionsText="–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                  />
                </Grid>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                <Grid item xs={12} md={4}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<FilterIcon />}
                    endIcon={showFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    onClick={() => setShowFilters(!showFilters)}
                    sx={{ ...secondaryButtonStyles, height: '56px' }}
                  >
                    –§–∏–ª—å—Ç—Ä—ã
                  </Button>
                </Grid>
              </Grid>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
              <Collapse in={showFilters}>
                <Box sx={{ mt: 3, pt: 3, borderTop: `1px solid ${colors.backgroundSecondary}` }}>
                  <Grid container spacing={3}>
                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ */}
                    <Grid item xs={12} md={6}>
                      <FormControl fullWidth sx={textFieldStyles}>
                        <InputLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥</InputLabel>
                        <Select
                          value={selectedCategory || ''}
                          onChange={(e) => setSelectedCategory(e.target.value ? Number(e.target.value) : null)}
                          label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥"
                        >
                          <MenuItem value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</MenuItem>
                          {categories.map((category) => (
                            <MenuItem key={category.id} value={category.id}>
                              {getServiceIcon(category.name)} {category.name}
                              {category.services_count && ` (${category.services_count})`}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    {/* –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω */}
                    <Grid item xs={12} md={6}>
                      <FormControl fullWidth sx={textFieldStyles}>
                        <InputLabel>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</InputLabel>
                        <Select
                          value={priceFilter}
                          onChange={(e) => setPriceFilter(e.target.value)}
                          label="–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω"
                        >
                          <MenuItem value="">–õ—é–±–∞—è —Ü–µ–Ω–∞</MenuItem>
                          <MenuItem value="low">–î–æ 500 ‚Ç¥</MenuItem>
                          <MenuItem value="medium">500 - 1500 ‚Ç¥</MenuItem>
                          <MenuItem value="high">–°–≤—ã—à–µ 1500 ‚Ç¥</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                  </Grid>

                  {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
                    <Button
                      variant="text"
                      startIcon={<ClearIcon />}
                      onClick={handleClearFilters}
                      sx={{ color: colors.textSecondary }}
                    >
                      –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </Button>
                  </Box>
                </Box>
              </Collapse>
            </Paper>
          </Fade>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
          {!selectedCity ? (
            <Fade in timeout={700}>
              <Alert 
                severity="info" 
                sx={{ 
                  mb: 4,
                  '& .MuiAlert-message': { 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: 1 
                  }
                }}
              >
                <LocationIcon />
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
              </Alert>
            </Fade>
          ) : servicePointsLoading ? (
            <Grid container spacing={3}>
              {[1, 2, 3, 4].map((i) => (
                <Grid item xs={12} key={i}>
                  <Skeleton variant="rectangular" height={200} sx={{ borderRadius: 2 }} />
                </Grid>
              ))}
            </Grid>
          ) : servicePointsError ? (
            <Alert severity="error" sx={{ mb: 4 }}>
              –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </Alert>
          ) : servicesByServicePoint.length === 0 ? (
            <Fade in timeout={700}>
              <Alert severity="warning" sx={{ mb: 4 }}>
                –í –≥–æ—Ä–æ–¥–µ {selectedCity.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.
              </Alert>
            </Fade>
          ) : (
            <Fade in timeout={700}>
              <Box>
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
                <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Typography variant="h6" sx={{ color: colors.textPrimary }}>
                    –ù–∞–π–¥–µ–Ω–æ {filteredServices.length} —É—Å–ª—É–≥ –≤ {servicesByServicePoint.length} —Ç–æ—á–∫–∞—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                  </Typography>
                  <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                    –ì–æ—Ä–æ–¥: {selectedCity.name}
                  </Typography>
                </Box>

                {/* –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å —É—Å–ª—É–≥–∞–º–∏ */}
                <Grid container spacing={3}>
                  {servicesByServicePoint.map(({ servicePoint, services }, index) => (
                    <Grid item xs={12} key={servicePoint.id}>
                      <Fade in timeout={800 + index * 100}>
                        <Card sx={{ 
                          ...cardStyles,
                          transition: ANIMATIONS.transition.medium,
                          '&:hover': {
                            transform: 'translateY(-2px)',
                            boxShadow: theme.shadows[4]
                          }
                        }}>
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ */}
                          <CardContent sx={{ pb: 1 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                              <Box sx={{ flex: 1 }}>
                                <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                                  {servicePoint.name}
                                </Typography>
                                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                                  <Chip 
                                    icon={<LocationIcon />}
                                    label={servicePoint.address}
                                    size="small"
                                    variant="outlined"
                                  />
                                  {servicePoint.contact_phone && (
                                    <Chip 
                                      icon={<LocationIcon />}
                                      label={servicePoint.contact_phone}
                                      size="small"
                                      variant="outlined"
                                    />
                                  )}
                                </Box>
                                <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                                  {servicePoint.partner?.name || servicePoint.partner?.company_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä'}
                                </Typography>
                              </Box>
                              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: 1 }}>
{/* –†–µ–π—Ç–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç - –Ω–µ—Ç –≤ —Ç–∏–ø–µ ServicePoint */}
                                <Chip 
                                  label={`${services.length} —É—Å–ª—É–≥`}
                                  size="small"
                                  color="primary"
                                />
                              </Box>
                            </Box>

                            {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å */}
                            <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                              <IconButton
                                onClick={() => toggleServicePointExpansion(servicePoint.id)}
                                sx={{ color: colors.primary }}
                              >
                                {expandedServicePoints.has(servicePoint.id) ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                              </IconButton>
                            </Box>
                          </CardContent>

                          {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
                          <Collapse in={expandedServicePoints.has(servicePoint.id)}>
                            <Divider />
                            <CardContent sx={{ pt: 2 }}>
                              <List sx={{ p: 0 }}>
                                {services.map((service, serviceIndex) => (
                                  <ListItem
                                    key={service.id}
                                    sx={{
                                      border: `1px solid ${colors.backgroundSecondary}`,
                                      borderRadius: 2,
                                      mb: serviceIndex < services.length - 1 ? 2 : 0,
                                      bgcolor: colors.backgroundSecondary,
                                      '&:hover': {
                                        bgcolor: colors.backgroundField
                                      }
                                    }}
                                  >
                                    <ListItemIcon>
                                      <Box sx={{ 
                                        fontSize: '1.5rem',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        width: 40,
                                        height: 40,
                                        borderRadius: '50%',
                                        bgcolor: colors.primary,
                                        color: 'white'
                                      }}>
                                        {service.service?.category ? getServiceIcon(service.service.category.name) : 'üîß'}
                                      </Box>
                                    </ListItemIcon>
                                    <ListItemText
                                      primary={
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                          <Typography variant="subtitle1" sx={{ fontWeight: 600, color: colors.textPrimary }}>
                                            {service.service?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'}
                                          </Typography>
                                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                            <Chip
                                              icon={<MoneyIcon />}
                                              label={`${service.price} ‚Ç¥`}
                                              size="small"
                                              color="primary"
                                              variant="filled"
                                            />
                                            <Chip
                                              icon={<ScheduleIcon />}
                                              label={`${service.duration} –º–∏–Ω`}
                                              size="small"
                                              variant="outlined"
                                            />
                                          </Box>
                                        </Box>
                                      }
                                      secondary={
                                        <Box sx={{ mt: 1 }}>
                                          {service.service?.category && (
                                            <Chip
                                              label={service.service.category.name}
                                              size="small"
                                              variant="outlined"
                                              sx={{ mr: 1 }}
                                            />
                                          )}
                                          <Button
                                            variant="contained"
                                            size="small"
                                            startIcon={<BookIcon />}
                                            onClick={() => handleBookService(service, servicePoint)}
                                            sx={{ 
                                              ...buttonStyles,
                                              mt: 1,
                                              minWidth: 140
                                            }}
                                          >
                                            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                                          </Button>
                                        </Box>
                                      }
                                    />
                                  </ListItem>
                                ))}
                              </List>
                            </CardContent>
                          </Collapse>
                        </Card>
                      </Fade>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            </Fade>
          )}
        </Container>
      </Box>
    </ClientLayout>
  );
};

export default ClientServicesPage; 