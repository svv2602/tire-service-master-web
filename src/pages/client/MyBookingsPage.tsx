import React, { useState } from 'react';
import { Container, Typography, Box, Paper, Tabs, Tab, CircularProgress, Alert, useTheme } from '@mui/material';
import { useGetBookingsByClientQuery } from '../../api/bookings.api';
import { useSelector } from 'react-redux';
import { selectCurrentUser } from '../../store/slices/authSlice';
import BookingsList from '../../components/bookings/BookingsList';
import BookingFilters from '../../components/bookings/BookingFilters';
import LoginPrompt from '../../components/auth/LoginPrompt';
import { BookingStatusEnum } from '../../types/booking';
import { useTranslation } from 'react-i18next';
import { Booking as ModelBooking } from '../../types/models';
import { Booking } from '../../types/booking';
import { getThemeColors, getButtonStyles } from '../../styles';
import ClientLayout from '../../components/client/ClientLayout';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ Booking
const convertBooking = (modelBooking: ModelBooking): Booking => {
  return {
    id: String(modelBooking.id),
    client_id: String(modelBooking.client_id),
    service_point_id: String(modelBooking.service_point_id),
    car_id: modelBooking.car_id ? String(modelBooking.car_id) : null,
    car_type_id: String(modelBooking.car_type_id),
    slot_id: String(modelBooking.slot_id || 0),
    booking_date: modelBooking.booking_date,
    start_time: modelBooking.start_time,
    end_time: modelBooking.end_time,
    notes: modelBooking.notes,
    status_id: modelBooking.status_id,
    services: modelBooking.services?.map(s => ({
      service_id: String(s.service_id),
      quantity: s.quantity,
      price: s.price
    })) || [],
    status: modelBooking.status_id as BookingStatusEnum,
    scheduled_at: modelBooking.booking_date + ' ' + modelBooking.start_time,
    created_at: modelBooking.created_at,
    updated_at: modelBooking.updated_at
  };
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
interface BookingsFilter {
  status?: BookingStatusEnum;
  dateFrom?: string;
  dateTo?: string;
}

const MyBookingsPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  
  const currentUser = useSelector(selectCurrentUser);
  const [tabValue, setTabValue] = useState<number>(0);
  const [filters, setFilters] = useState<BookingsFilter>({
    status: BookingStatusEnum.PENDING,
  });

  // –ü–æ–ª—É—á–∞–µ–º client_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è client_id
  const clientId = currentUser?.role === 'client' ? '1' : null; // Hardcode –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('MyBookingsPage - currentUser:', currentUser);
  console.log('MyBookingsPage - currentUser.id:', currentUser?.id);
  console.log('MyBookingsPage - currentUser.role:', currentUser?.role);
  console.log('MyBookingsPage - clientId:', clientId);
  
  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
  const { data: bookingsData, isLoading, isError, error } = useGetBookingsByClientQuery(
    clientId ? String(clientId) : '', 
    { skip: !clientId }
  );

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  console.log('MyBookingsPage - RTK Query state:', {
    data: bookingsData,
    isLoading,
    isError,
    error,
    currentUserId: currentUser?.id,
    skip: !currentUser?.id
  });

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  if (bookingsData?.data) {
    console.log('MyBookingsPage - Raw bookings data:', bookingsData.data);
    console.log('MyBookingsPage - Current filters:', filters);
    console.log('MyBookingsPage - Filter status:', filters.status);
    console.log('MyBookingsPage - BookingStatusEnum values:', BookingStatusEnum);
    
    bookingsData.data.forEach((booking, index) => {
      console.log(`Booking ${index}:`, {
        id: booking.id,
        status_id: booking.status_id,
        status: booking.status_id as BookingStatusEnum,
        filterStatus: filters.status,
        matches: booking.status_id === filters.status
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    if (newValue === 0) {
      setFilters({ ...filters, status: BookingStatusEnum.PENDING });
    } else if (newValue === 1) {
      setFilters({ ...filters, status: BookingStatusEnum.CONFIRMED });
    } else if (newValue === 2) {
      setFilters({ ...filters, status: BookingStatusEnum.COMPLETED });
    } else if (newValue === 3) {
      setFilters({ ...filters, status: BookingStatusEnum.CANCELLED });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFilterChange = (newFilters: Partial<BookingsFilter>) => {
    setFilters({ ...filters, ...newFilters });
  };

  // RTK Query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // useEffect —Å refetch –Ω–µ –Ω—É–∂–µ–Ω

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ–π—Ç–∏
  if (!currentUser) {
    return <LoginPrompt />;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const convertedBookings = bookingsData?.data
    ? bookingsData.data.map(convertBooking)
        .filter(booking => booking.status === filters.status)
    : [];

  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const allConvertedBookings = bookingsData?.data
    ? bookingsData.data.map(convertBooking)
    : [];

  console.log('MyBookingsPage - convertedBookings:', convertedBookings);
  console.log('MyBookingsPage - allConvertedBookings (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞):', allConvertedBookings);

  return (
    <ClientLayout>
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            {t('–ú–æ–∏ –∑–∞–ø–∏—Å–∏')}
          </Typography>

          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
          {process.env.NODE_ENV === 'development' && (
            <Paper sx={{ p: 2, mb: 3, bgcolor: '#f5f5f5' }}>
              <Typography variant="h6" gutterBottom>üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
              <Typography variant="body2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {currentUser?.id || '–ù–µ –Ω–∞–π–¥–µ–Ω'}</Typography>
              <Typography variant="body2">–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {currentUser?.role || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}</Typography>
              <Typography variant="body2">Client ID: {clientId || '–ù–µ –Ω–∞–π–¥–µ–Ω'}</Typography>
              <Typography variant="body2">–ó–∞–≥—Ä—É–∑–∫–∞: {isLoading ? '–î–∞' : '–ù–µ—Ç'}</Typography>
              <Typography variant="body2">–û—à–∏–±–∫–∞: {isError ? '–î–∞' : '–ù–µ—Ç'}</Typography>
              <Typography variant="body2">–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {bookingsData ? '–î–∞' : '–ù–µ—Ç'}</Typography>
              <Typography variant="body2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {bookingsData?.data?.length || 0}</Typography>
              <Typography variant="body2">–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å: {filters.status}</Typography>
              <Typography variant="body2">–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {convertedBookings.length}</Typography>
              <Typography variant="body2">–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: {tabValue}</Typography>
              {bookingsData?.data && bookingsData.data.length > 0 && (
                <Box sx={{ mt: 1 }}>
                  <Typography variant="body2" fontWeight="bold">–°—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π:</Typography>
                  {bookingsData.data.map((booking, index) => (
                    <Typography key={index} variant="body2" sx={{ ml: 2 }}>
                      –ó–∞–ø–∏—Å—å {booking.id}: status_id={booking.status_id} 
                      {booking.status_id === filters.status ? ' ‚úÖ' : ' ‚ùå'}
                    </Typography>
                  ))}
                </Box>
              )}
              {error && (
                <Typography variant="body2" color="error">
                  –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {JSON.stringify(error)}
                </Typography>
              )}
            </Paper>
          )}
          
          <Paper sx={{ mb: 3 }}>
            <Tabs 
              value={tabValue} 
              onChange={handleTabChange}
              indicatorColor="primary"
              textColor="primary"
              variant="fullWidth"
            >
              <Tab label={t('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ')} />
              <Tab label={t('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ')} />
              <Tab label={t('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ')} />
              <Tab label={t('–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ')} />
            </Tabs>
          </Paper>
          
          <BookingFilters 
            filters={filters} 
            onFilterChange={handleFilterChange} 
          />
          
          <Box mt={3}>
            {isLoading ? (
              <Box display="flex" justifyContent="center" my={4}>
                <CircularProgress />
              </Box>
            ) : isError ? (
              <Alert severity="error">‚ùå {t('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π')}</Alert>
            ) : convertedBookings.length > 0 ? (
              <BookingsList 
                bookings={convertedBookings} 
              />
            ) : allConvertedBookings.length > 0 ? (
              <Box>
                <Alert severity="warning" sx={{ mb: 2 }}>
                  ‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É. –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
                </Alert>
                <BookingsList 
                  bookings={allConvertedBookings} 
                />
              </Box>
            ) : (
              <Alert severity="info">üí° {t('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')}</Alert>
            )}
          </Box>
        </Container>
      </Box>
    </ClientLayout>
  );
};

export default MyBookingsPage; 