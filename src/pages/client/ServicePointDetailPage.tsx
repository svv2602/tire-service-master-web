import React, { useState, useMemo } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  Chip,
  Rating,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Container,
  Breadcrumbs,
  Link,
  Collapse
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  LocationOn as LocationIcon,
  Phone as PhoneIcon,
  Business as BusinessIcon,
  Schedule as ScheduleIcon,
  Build as BuildIcon,
  Star as StarIcon,
  BookOnline as BookIcon,
  Description as DescriptionIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  CalendarToday as CalendarIcon,
  NavigateNext as NavigateNextIcon,
  Home as HomeIcon
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';
import { useTheme } from '@mui/material/styles';
import {
  useGetServicePointByIdQuery,
  useGetCityByIdQuery,
  useGetServicePointServicesQuery
} from '../../api';
import { getThemeColors } from '../../styles';
import ClientLayout from '../../components/client/ClientLayout';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ServicePointService {
  id: number;
  service_id: number;
  name: string;
  description?: string;
  price: number;
  duration: number;
  is_available?: boolean;
}

interface ServiceCategory {
  id: number;
  name: string;
  description?: string;
  services: ServicePointService[];
}

interface WorkingSchedule {
  day: string;
  time: string;
  isWorkingDay: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏
const PhotoGallery: React.FC<{
  photos: any[];
  servicePointName: string;
}> = ({ photos = [], servicePointName }) => {
  const theme = useTheme();
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –≥–ª–∞–≤–Ω–∞—è –ø–µ—Ä–≤–∞—è, –∑–∞—Ç–µ–º –ø–æ sort_order
  const sortedPhotos = [...photos].sort((a, b) => {
    if (a.is_main && !b.is_main) return -1;
    if (!a.is_main && b.is_main) return 1;
    return a.sort_order - b.sort_order;
  });

  const hasPhotos = sortedPhotos.length > 0;

  if (!hasPhotos) {
    return (
      <Card sx={{ mb: 3 }}>
        <Box
          sx={{
            height: 400,
            background: `linear-gradient(135deg, ${theme.palette.primary.light} 0%, ${theme.palette.primary.main} 100%)`,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: 'white',
            fontSize: '4rem'
          }}
        >
          üöó
        </Box>
      </Card>
    );
  }

  return (
    <Card sx={{ mb: 3 }}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      <Box sx={{ position: 'relative', height: 400 }}>
        <img
          src={sortedPhotos[currentPhotoIndex]?.url}
          alt={`${servicePointName} - —Ñ–æ—Ç–æ ${currentPhotoIndex + 1}`}
          style={{
            width: '100%',
            height: '100%',
            objectFit: 'cover'
          }}
        />
        
        {/* –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
        {sortedPhotos.length > 1 && (
          <Chip
            label={`${currentPhotoIndex + 1} / ${sortedPhotos.length}`}
            sx={{
              position: 'absolute',
              top: 16,
              right: 16,
              bgcolor: 'rgba(0, 0, 0, 0.7)',
              color: 'white'
            }}
          />
        )}
      </Box>
      
      {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã */}
      {sortedPhotos.length > 1 && (
        <Box sx={{ p: 2 }}>
          <Grid container spacing={1}>
            {sortedPhotos.map((photo, index) => (
              <Grid item xs={2} sm={1.5} md={1} key={photo.id}>
                <Box
                  sx={{
                    width: '100%',
                    height: 60,
                    borderRadius: 1,
                    overflow: 'hidden',
                    cursor: 'pointer',
                    border: currentPhotoIndex === index ? `2px solid ${theme.palette.primary.main}` : '2px solid transparent',
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      transform: 'scale(1.05)'
                    }
                  }}
                  onClick={() => setCurrentPhotoIndex(index)}
                >
                  <img
                    src={photo.url}
                    alt={`–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ${index + 1}`}
                    style={{
                      width: '100%',
                      height: '100%',
                      objectFit: 'cover'
                    }}
                  />
                </Box>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}
    </Card>
  );
};

const ServicePointDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const [servicesExpanded, setServicesExpanded] = useState(true);
  const [scheduleExpanded, setScheduleExpanded] = useState(false);

  const { data: servicePointData, isLoading, error } = useGetServicePointByIdQuery(id || '', {
    skip: !id
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å–µ
  const { data: cityData } = useGetCityByIdQuery(servicePointData?.city?.id || 0, {
    skip: !servicePointData?.city?.id
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏
  const { data: servicesData, isLoading: isLoadingServicesData } = useGetServicePointServicesQuery(id || '', {
    skip: !id
  });

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ —Å –∏—Ö —É—Å–ª—É–≥–∞–º–∏
  const serviceCategories = useMemo(() => {
    if (!servicesData) return [];
    
    const categoriesMap = new Map();
    servicesData.forEach(service => {
      if (service.category && service.is_available) {
        const categoryId = service.category.id;
        if (!categoriesMap.has(categoryId)) {
          categoriesMap.set(categoryId, {
            id: service.category.id,
            name: service.category.name,
            description: service.category.description,
            services: []
          });
        }
        categoriesMap.get(categoryId).services.push({
          id: service.id,
          name: service.name,
          description: service.description,
          price: service.current_price,
          duration: service.duration
        });
      }
    });
    
    return Array.from(categoriesMap.values()).sort((a, b) => a.name.localeCompare(b.name));
  }, [servicesData]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ API –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const schedule: WorkingSchedule[] = useMemo(() => {
    if (!servicePointData?.working_hours) return [];
    
    const days = [
      { key: 'monday', name: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { key: 'tuesday', name: '–í—Ç–æ—Ä–Ω–∏–∫' },
      { key: 'wednesday', name: '–°—Ä–µ–¥–∞' },
      { key: 'thursday', name: '–ß–µ—Ç–≤–µ—Ä–≥' },
      { key: 'friday', name: '–ü—è—Ç–Ω–∏—Ü–∞' },
      { key: 'saturday', name: '–°—É–±–±–æ—Ç–∞' },
      { key: 'sunday', name: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' }
    ];
    
    return days.map(day => {
      const dayData = servicePointData.working_hours[day.key as keyof typeof servicePointData.working_hours];
      return {
        day: day.name,
        time: dayData?.is_working_day ? `${dayData.start} - ${dayData.end}` : '–í—ã—Ö–æ–¥–Ω–æ–π',
        isWorkingDay: dayData?.is_working_day || false
      };
    });
  }, [servicePointData?.working_hours]);



  const handleBack = () => {
    navigate(-1);
  };

  const handleBooking = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    // –®–∞–≥ 2 - –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (–≥–æ—Ä–æ–¥ –∏ —Ç–æ—á–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã)
    navigate('/client/booking', {
      state: { 
        servicePointId: parseInt(id || '0'),
        cityId: servicePointData?.city?.id,
        step1Completed: true // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
      }
    });
  };

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Alert severity="error" sx={{ mb: 2 }}>
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–µ
        </Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
        </Button>
      </Container>
    );
  }

  if (isLoading) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  if (!servicePointData) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Alert severity="info">
          –°–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        </Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
        </Button>
      </Container>
    );
  }

  return (
    <ClientLayout>
      <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
      <Breadcrumbs 
        separator={<NavigateNextIcon fontSize="small" />} 
        sx={{ mb: 3 }}
        aria-label="breadcrumb"
      >
        <Link 
          color="inherit" 
          href="/client" 
          sx={{ display: 'flex', alignItems: 'center', textDecoration: 'none' }}
        >
          <HomeIcon sx={{ mr: 0.5 }} fontSize="inherit" />
          –ì–ª–∞–≤–Ω–∞—è
        </Link>
        <Link 
          color="inherit" 
          href="/client/search"
          sx={{ textDecoration: 'none' }}
        >
          –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        </Link>
        <Typography color="text.primary">{servicePointData.name}</Typography>
      </Breadcrumbs>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3, flexWrap: 'wrap', gap: 2 }}>
        <Box>
          <Typography variant="h4" component="h1" sx={{ fontWeight: 600, mb: 1 }}>
            {servicePointData.name}
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <LocationIcon sx={{ color: 'text.secondary', fontSize: '1.2rem' }} />
              <Typography variant="body1" color="text.secondary">
                {cityData?.data?.name ? `${cityData.data.name}, ${servicePointData.address}` : servicePointData.address}
              </Typography>
            </Box>
            <Chip 
              label={servicePointData.work_status === 'working' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ'} 
              color={servicePointData.work_status === 'working' ? 'success' : 'warning'}
              size="small"
            />
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          <Button
            variant="outlined"
            startIcon={<ArrowBackIcon />}
            onClick={handleBack}
          >
            –ù–∞–∑–∞–¥
          </Button>
          <Button
            variant="contained"
            startIcon={<BookIcon />}
            onClick={handleBooking}
            sx={{ 
              bgcolor: theme.palette.primary.main,
              '&:hover': { bgcolor: theme.palette.primary.dark }
            }}
          >
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
          </Button>
        </Box>
      </Box>

      <Grid container spacing={3}>
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
        <Grid item xs={12} lg={8}>
          {/* –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è */}
          <PhotoGallery 
            photos={servicePointData.photos || []} 
            servicePointName={servicePointData.name}
          />

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {servicePointData.description && (
            <Paper sx={{ p: 3, mb: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <DescriptionIcon sx={{ mr: 1, color: 'primary.main' }} />
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </Typography>
              </Box>
              <Typography 
                variant="body1" 
                sx={{ 
                  lineHeight: 1.6,
                  whiteSpace: 'pre-wrap'
                }}
              >
                {servicePointData.description}
              </Typography>
            </Paper>
          )}

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Box 
              sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                cursor: 'pointer',
                mb: 2
              }}
              onClick={() => setServicesExpanded(!servicesExpanded)}
            >
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <BuildIcon sx={{ mr: 1, color: 'primary.main' }} />
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ ({isLoadingServicesData ? '...' : serviceCategories.length})
                </Typography>
              </Box>
              {servicesExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </Box>
            
            <Collapse in={servicesExpanded}>
              {isLoadingServicesData ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
                  <CircularProgress size={24} />
                </Box>
              ) : serviceCategories.length > 0 ? (
                <List>
                  {serviceCategories.map((category, categoryIndex) => (
                    <React.Fragment key={category.id}>
                      <ListItem sx={{ px: 0, flexDirection: 'column', alignItems: 'flex-start' }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', mb: 1 }}>
                          <ListItemIcon sx={{ minWidth: 36 }}>
                            <BuildIcon sx={{ color: 'primary.main' }} />
                          </ListItemIcon>
                          <Box sx={{ flex: 1 }}>
                            <Typography variant="body1" sx={{ fontWeight: 600, mb: 0.5 }}>
                              {category.name}
                            </Typography>
                            {category.description && (
                              <Typography variant="body2" color="text.secondary">
                                {category.description}
                              </Typography>
                            )}
                          </Box>
                        </Box>
                        
                        {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                        <Box sx={{ width: 'calc(100% - 36px)', ml: 4.5, overflow: 'hidden' }}>
                          {category.services.map((service: ServicePointService, serviceIndex: number) => (
                            <Paper 
                              key={service.id} 
                              variant="outlined" 
                              sx={{ 
                                p: 2, 
                                mb: serviceIndex < category.services.length - 1 ? 1 : 0,
                                bgcolor: 'action.hover',
                                maxWidth: '100%',
                                overflow: 'hidden'
                              }}
                            >
                              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', gap: 2 }}>
                                <Box sx={{ flex: 1, minWidth: 0, overflow: 'hidden' }}>
                                  <Typography 
                                    variant="body2" 
                                    sx={{ 
                                      fontWeight: 500, 
                                      mb: 0.5,
                                      overflow: 'hidden',
                                      textOverflow: 'ellipsis',
                                      whiteSpace: 'nowrap'
                                    }}
                                  >
                                    {service.name}
                                  </Typography>
                                  {service.description && (
                                    <Typography 
                                      variant="caption" 
                                      color="text.secondary" 
                                      sx={{ 
                                        display: 'block', 
                                        mb: 1,
                                        overflow: 'hidden',
                                        textOverflow: 'ellipsis',
                                        whiteSpace: 'nowrap'
                                      }}
                                    >
                                      {service.description}
                                    </Typography>
                                  )}
                                  <Typography variant="caption" color="text.secondary">
                                    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service.duration} –º–∏–Ω
                                  </Typography>
                                </Box>
                                <Box sx={{ flexShrink: 0 }}>
                                  <Typography variant="body2" sx={{ fontWeight: 600, color: 'primary.main' }}>
                                    {service.price} –≥—Ä–Ω
                                  </Typography>
                                </Box>
                              </Box>
                            </Paper>
                          ))}
                        </Box>
                      </ListItem>
                      {categoryIndex < serviceCategories.length - 1 && <Divider sx={{ my: 2 }} />}
                    </React.Fragment>
                  ))}
                </List>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Typography>
              )}
            </Collapse>
          </Paper>
        </Grid>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
        <Grid item xs={12} lg={4}>
          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
              –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </Typography>
            
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <LocationIcon sx={{ mr: 2, color: 'text.secondary' }} />
                <Box>
                  <Typography variant="subtitle2" color="text.secondary">
                    –ê–¥—Ä–µ—Å
                  </Typography>
                  <Typography variant="body2">
                    {cityData?.data?.name ? `${cityData.data.name}, ${servicePointData.address}` : servicePointData.address}
                  </Typography>
                </Box>
              </Box>
              
              {servicePointData.contact_phone && (
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <PhoneIcon sx={{ mr: 2, color: 'text.secondary' }} />
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      –¢–µ–ª–µ—Ñ–æ–Ω
                    </Typography>
                    <Typography variant="body2">
                      <Link href={`tel:${servicePointData.contact_phone}`} color="primary">
                        {servicePointData.contact_phone}
                      </Link>
                    </Typography>
                  </Box>
                </Box>
              )}
              
              {servicePointData.partner?.company_name && (
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <BusinessIcon sx={{ mr: 2, color: 'text.secondary' }} />
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      –ü–∞—Ä—Ç–Ω–µ—Ä
                    </Typography>
                    <Typography variant="body2">
                      {servicePointData.partner.company_name}
                    </Typography>
                  </Box>
                </Box>
              )}
            </Box>
          </Paper>

          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Box 
              sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                cursor: 'pointer',
                mb: 2
              }}
              onClick={() => setScheduleExpanded(!scheduleExpanded)}
            >
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <ScheduleIcon sx={{ mr: 1, color: 'primary.main' }} />
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
                </Typography>
              </Box>
              {scheduleExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </Box>
            
            <Collapse in={scheduleExpanded}>
              <List dense>
                {schedule.map((scheduleItem, index) => (
                  <ListItem key={index} sx={{ px: 0, py: 0.5 }}>
                    <ListItemIcon sx={{ minWidth: 36 }}>
                      <CalendarIcon 
                        sx={{ 
                          fontSize: '1rem', 
                          color: scheduleItem.isWorkingDay ? theme.palette.success.main : 'text.secondary' 
                        }} 
                      />
                    </ListItemIcon>
                    <ListItemText
                      primary={scheduleItem.day}
                      secondary={scheduleItem.time}
                      primaryTypographyProps={{ variant: 'body2', fontWeight: 500 }}
                      secondaryTypographyProps={{ 
                        variant: 'caption',
                        color: scheduleItem.isWorkingDay ? 'inherit' : 'error'
                      }}
                    />
                  </ListItem>
                ))}
              </List>
            </Collapse>
          </Paper>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ */}
          <Button
            variant="contained"
            fullWidth
            size="large"
            startIcon={<BookIcon />}
            onClick={handleBooking}
            sx={{ 
              py: 1.5,
              bgcolor: theme.palette.primary.main,
              '&:hover': { bgcolor: theme.palette.primary.dark }
            }}
          >
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
          </Button>
        </Grid>
      </Grid>
    </Container>
    </ClientLayout>
  );
};

export default ServicePointDetailPage; 