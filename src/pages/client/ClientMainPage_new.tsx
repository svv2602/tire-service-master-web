import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import {
  Box,
  Container,
  Typography,
  Button,
  TextField,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  Chip,
  IconButton,
  InputAdornment,
  Autocomplete,
  Fade,
  useTheme
} from '@mui/material';
import {
  Search as SearchIcon,
  LocationOn as LocationIcon,
  Article as ArticleIcon,
  BookOnline as BookIcon,
  Person as PersonIcon,
  Phone as PhoneIcon,
  Email as EmailIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∏–ª–µ–π
import { 
  getCardStyles, 
  getButtonStyles, 
  SIZES,
  getThemeColors,
  ANIMATIONS
} from '../../styles';

// –ò–º–ø–æ—Ä—Ç API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
import { useGetPageContentsQuery } from '../../api/pageContent.api';
import { useGetFeaturedArticlesQuery } from '../../api/articles.api';
import ClientLayout from '../../components/client/ClientLayout';

const ClientMainPage: React.FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCity, setSelectedCity] = useState<string | null>('–ö–∏—ó–≤');
  
  // API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const { data: pageContentData, isLoading: contentLoading } = useGetPageContentsQuery({
    // –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä page
  });
  const { data: articlesData } = useGetFeaturedArticlesQuery();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ API
  const pageContent = pageContentData?.data || [];
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∏–ø–∞–º
  const heroContent = pageContent.find(item => item.content_type === 'hero');
  const ctaContent = pageContent.find(item => item.content_type === 'cta');
  const footerContent = pageContent.find(item => item.content_type === 'text_block' && item.settings?.type === 'footer');
  
  // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (fallback –µ—Å–ª–∏ –Ω–µ—Ç –≤ API)
  const cities = [
    '–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–õ—å–≤—ñ–≤', '–ö—Ä–∏–≤–∏–π –†—ñ–≥', '–ú–∏–∫–æ–ª–∞—ó–≤'
  ];

  const handleSearch = () => {
    navigate(`/client/search?city=${selectedCity}&query=${searchQuery}`);
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ fallback
  const currentHero = heroContent || {
    title: '–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø–æ—Ä—É—á –∑ –≤–∞–º–∏',
    content: '–®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ',
    settings: {
      subtitle: '–®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ',
      button_text: '–ó–Ω–∞–π—Ç–∏',
      search_placeholder: '–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–æ—Å–ª—É–≥—É',
      city_placeholder: '–ú—ñ—Å—Ç–æ'
    }
  };
  
  // –î–ª—è —Å—Ç–∞—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ fallback
  const currentArticles = articlesData?.data || [
    {
      title: '–Ø–∫ –≤–∏–±—Ä–∞—Ç–∏ –∑–∏–º–æ–≤—ñ —à–∏–Ω–∏',
      excerpt: '–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫ –∑ –≤–∏–±–æ—Ä—É –∑–∏–º–æ–≤–∏—Ö —à–∏–Ω –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ó–∑–¥–∏',
      reading_time: 5,
      author: '–ï–∫—Å–ø–µ—Ä—Ç –∑ —à–∏–Ω'
    },
    {
      title: '–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏—Å–∫ —É —à–∏–Ω–∞—Ö',
      excerpt: '–í–ø–ª–∏–≤ —Ç–∏—Å–∫—É –Ω–∞ –±–µ–∑–ø–µ–∫—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç—É –ø–∞–ª–∏–≤–∞',
      reading_time: 3,
      author: '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç'
    },
    {
      title: '–°–µ–∑–æ–Ω–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —à–∏–Ω',
      excerpt: '–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —à–∏–Ω–∏ –≤ –º—ñ–∂—Å–µ–∑–æ–Ω–Ω—è',
      reading_time: 4,
      author: '–ú–∞–π—Å—Ç–µ—Ä —Å–µ—Ä–≤—ñ—Å—É'
    }
  ];

  if (contentLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <Typography>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Typography>
      </Box>
    );
  }

  return (
    <ClientLayout>
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        {/* Hero —Å–µ–∫—Ü–∏—è */}
        <Fade in timeout={500}>
          <Box sx={{
            background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
            color: 'white',
            py: 8,
            position: 'relative',
            overflow: 'hidden',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: 'radial-gradient(circle at 30% 70%, rgba(255,255,255,0.1) 0%, transparent 50%)',
              pointerEvents: 'none'
            }
          }}>
            <Container maxWidth="lg">
              <Grid container spacing={4} alignItems="center">
                <Grid item xs={12} md={6}>
                  <Typography variant="h2" sx={{ fontWeight: 700, mb: 2, fontSize: { xs: '2.5rem', md: '3.5rem' } }}>
                    {currentHero.title}
                  </Typography>
                  <Typography variant="h6" sx={{ mb: 4, opacity: 0.9, lineHeight: 1.6 }}>
                    {currentHero.settings?.subtitle || currentHero.content}
                  </Typography>
                  
                  {/* –ü–æ–∏—Å–∫ */}
                  <Paper sx={{ p: 2, borderRadius: SIZES.borderRadius.lg }}>
                    <Grid container spacing={2} alignItems="center">
                      <Grid item xs={12} sm={4}>
                        <Autocomplete
                          value={selectedCity}
                          onChange={(event, newValue) => setSelectedCity(newValue)}
                          options={cities}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label={currentHero.settings?.city_placeholder || '–ú—ñ—Å—Ç–æ'}
                              fullWidth
                              InputProps={{
                                ...params.InputProps,
                                startAdornment: <LocationIcon sx={{ mr: 1, color: colors.textSecondary }} />
                              }}
                            />
                          )}
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label={currentHero.settings?.search_placeholder || '–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–æ—Å–ª—É–≥—É'}
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                          InputProps={{
                            endAdornment: (
                              <InputAdornment position="end">
                                <SearchIcon />
                              </InputAdornment>
                            )
                          }}
                        />
                      </Grid>
                      <Grid item xs={12} sm={2}>
                        <Button
                          fullWidth
                          variant="contained"
                          size="large"
                          onClick={handleSearch}
                          sx={{ 
                            ...buttonStyles, 
                            height: 56,
                            bgcolor: theme.palette.primary.main,
                            '&:hover': { bgcolor: theme.palette.primary.dark }
                          }}
                        >
                          {currentHero.settings?.button_text || '–ó–Ω–∞–π—Ç–∏'}
                        </Button>
                      </Grid>
                    </Grid>
                  </Paper>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'center',
                    '& > *': { fontSize: { xs: '8rem', md: '12rem' } }
                  }}>
                    üöó
                  </Box>
                </Grid>
              </Grid>
            </Container>
          </Box>
        </Fade>

        {/* –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π */}
        <Fade in timeout={1100}>
          <Container maxWidth="lg" sx={{ py: 8 }}>
            <Typography variant="h3" sx={{ 
              textAlign: 'center', 
              mb: 6, 
              fontWeight: 700,
              color: colors.textPrimary 
            }}>
              üìö –ö–æ—Ä–∏—Å–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
            </Typography>
            
            <Grid container spacing={3}>
              {currentArticles.slice(0, 3).map((article, index) => (
                <Grid item xs={12} md={4} key={index}>
                  <Fade in timeout={1200 + index * 100}>
                    <Card sx={{ 
                      ...cardStyles, 
                      height: '100%',
                      cursor: 'pointer',
                      transition: ANIMATIONS.transition.medium,
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: theme.shadows[3]
                      }
                    }}>
                      <Box sx={{ 
                        height: 200, 
                        bgcolor: colors.backgroundField,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '4rem'
                      }}>
                        üìñ
                      </Box>
                      <CardContent>
                        <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                          {article.title}
                        </Typography>
                        <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                          {article.excerpt}
                        </Typography>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="caption" sx={{ color: colors.textSecondary }}>
                            {typeof article.author === 'string' ? article.author : article.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}
                          </Typography>
                          <Chip label={`${article.reading_time || 5} –º–∏–Ω`} size="small" variant="outlined" />
                        </Box>
                      </CardContent>
                      <CardActions>
                        <Button 
                          size="small" 
                          sx={{ color: theme.palette.primary.main }}
                          onClick={() => navigate(`/knowledge-base/${index}`)}
                        >
                          –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ
                        </Button>
                      </CardActions>
                    </Card>
                  </Fade>
                </Grid>
              ))}
            </Grid>
            
            <Box sx={{ textAlign: 'center', mt: 4 }}>
              <Button 
                variant="outlined" 
                size="large"
                startIcon={<ArticleIcon />}
                sx={secondaryButtonStyles}
                onClick={() => navigate('/knowledge-base')}
              >
                –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ
              </Button>
            </Box>
          </Container>
        </Fade>

        {/* CTA —Å–µ–∫—Ü–∏—è */}
        <Box sx={{
          background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
          color: 'white',
          py: 6
        }}>
          <Container maxWidth="md">
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h4" sx={{ fontWeight: 700, mb: 2 }}>
                {ctaContent?.title || '–ì–æ—Ç–æ–≤—ñ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è?'}
              </Typography>
              <Typography variant="h6" sx={{ mb: 4, opacity: 0.9 }}>
                {ctaContent?.content || '–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å —Ç–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Å–µ—Ä–≤—ñ—Å'}
              </Typography>
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
                <Button 
                  variant="contained" 
                  size="large"
                  startIcon={<BookIcon />}
                  sx={{ 
                    bgcolor: 'white', 
                    color: theme.palette.primary.main,
                    '&:hover': { bgcolor: 'rgba(255,255,255,0.9)' }
                  }}
                  onClick={() => navigate('/client/booking')}
                >
                  {ctaContent?.settings?.primary_button_text || '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –æ–Ω–ª–∞–π–Ω'}
                </Button>
                <Button 
                  variant="outlined" 
                  size="large"
                  startIcon={<PersonIcon />}
                  sx={{ 
                    borderColor: 'white', 
                    color: 'white',
                    '&:hover': { 
                      borderColor: 'white', 
                      bgcolor: 'rgba(255,255,255,0.1)' 
                    }
                  }}
                  onClick={() => navigate('/client/profile')}
                >
                  {ctaContent?.settings?.secondary_button_text || '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç'}
                </Button>
              </Box>
            </Box>
          </Container>
        </Box>

        {/* –§—É—Ç–µ—Ä */}
        <Box sx={{ 
          bgcolor: colors.backgroundCard, 
          pt: 8, // ‚úÖ –£–í–ï–õ–ò–ß–ï–ù–û: –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º (64px)
          pb: 4, // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
          borderTop: `1px solid ${colors.borderPrimary}` 
        }}>
          <Container maxWidth="lg">
            <Grid container spacing={4}>
              <Grid item xs={12} md={4}>
                <Typography variant="h6" sx={{ fontWeight: 700, mb: 2, color: colors.textPrimary }}>
                  {footerContent?.title || 'üöó –¢–≤–æ—è –®–∏–Ω–∞'}
                </Typography>
                <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                  {footerContent?.content || '–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø–æ—Ä—É—á –∑ –≤–∞–º–∏. –®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏.'}
                </Typography>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  <IconButton size="small">
                    <PhoneIcon />
                  </IconButton>
                  <IconButton size="small">
                    <EmailIcon />
                  </IconButton>
                </Box>
              </Grid>
              <Grid item xs={12} md={4}>
                <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: colors.textPrimary }}>
                  –ü–æ—Å–ª—É–≥–∏
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {(footerContent?.settings?.services_links || ['–ó–∞–º—ñ–Ω–∞ —à–∏–Ω', '–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è', '–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—ñ–≤']).map((link: string) => (
                    <Link key={link} to="/client/services" style={{ color: colors.textSecondary, textDecoration: 'none' }}>
                      {link}
                    </Link>
                  ))}
                </Box>
              </Grid>
              <Grid item xs={12} md={4}>
                <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: colors.textPrimary }}>
                  –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {(footerContent?.settings?.info_links || ['–ë–∞–∑–∞ –∑–Ω–∞–Ω—å', '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç', '–î–ª—è –±—ñ–∑–Ω–µ—Å—É']).map((link: string, index: number) => {
                    const routes = ['/knowledge-base', '/client/profile', '/login'];
                    return (
                      <Link key={link} to={routes[index]} style={{ color: colors.textSecondary, textDecoration: 'none' }}>
                        {link}
                      </Link>
                    );
                  })}
                </Box>
              </Grid>
            </Grid>
            
            <Box sx={{ 
              textAlign: 'center', 
              mt: 4, 
              pt: 4, 
              borderTop: `1px solid ${colors.borderPrimary}` 
            }}>
              <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                {footerContent?.settings?.copyright || '¬© 2024 –¢–≤–æ—è –®–∏–Ω–∞. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.'}
              </Typography>
            </Box>
          </Container>
        </Box>
      </Box>
    </ClientLayout>
  );
};

export default ClientMainPage;
