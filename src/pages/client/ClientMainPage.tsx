import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import ClientNavigation from '../../components/client/ClientNavigation';
import {
  Box,
  Container,
  Typography,
  Button,
  TextField,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  IconButton,
  Chip,
  Avatar,
  Rating,
  InputAdornment,
  Autocomplete,
  Fade,
  useTheme,
  AppBar,
  Toolbar,
  Badge,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider
} from '@mui/material';
import {
  Search as SearchIcon,
  LocationOn as LocationIcon,
  Build as BuildIcon,
  Speed as SpeedIcon,
  Schedule as ScheduleIcon,
  Star as StarIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  TireRepair as TireIcon,
  DirectionsCar as CarIcon,
  Assessment as AssessmentIcon,
  Article as ArticleIcon,
  BookOnline as BookIcon,
  Map as MapIcon,
  Person as PersonIcon,
  Login as LoginIcon,
  Menu as MenuIcon,
  Facebook as FacebookIcon,
  Instagram as InstagramIcon,
  Telegram as TelegramIcon,
  AccessTime as TimeIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∏–ª–µ–π
import { 
  getCardStyles, 
  getButtonStyles, 
  getTextFieldStyles,
  SIZES,
  getThemeColors,
  ANIMATIONS
} from '../../styles';

// –ò–º–ø–æ—Ä—Ç API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
import { useGetPageContentsQuery } from '../../api/pageContent.api';
import { useGetCitiesWithServicePointsQuery } from '../../api/cities.api';
import { useGetFeaturedArticlesQuery } from '../../api/articles.api';

const ClientMainPage: React.FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme, 'filled');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCity, setSelectedCity] = useState<string | null>('–ö–∏—ó–≤');
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ API
  const { data: pageContentData, isLoading: contentLoading, refetch } = useGetPageContentsQuery({
    section: 'client_main'
  }, {
    refetchOnMountOrArgChange: true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    refetchOnFocus: true, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –æ–∫–Ω–µ
  });
  
  const { data: citiesData } = useGetCitiesWithServicePointsQuery();
  const { data: articlesData } = useGetFeaturedArticlesQuery();
  
  const pageContent = pageContentData?.data || [];
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç ClientMainPage Debug Info:');
    console.log('üìä Page Content Data:', pageContentData);
    console.log('üìã Page Content Array:', pageContent);
    console.log('üî¢ Content Count:', pageContent.length);
    console.log('üéØ Services Content:', pageContent.filter(item => item.content_type === 'service'));
    console.log('üì∞ Articles Content:', pageContent.filter(item => item.content_type === 'article'));
    console.log('üé™ Hero Content:', pageContent.find(item => item.content_type === 'hero'));
    console.log('üì¢ CTA Content:', pageContent.find(item => item.content_type === 'cta'));
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∏–ø–∞–º
  const heroContent = pageContent.find(item => item.content_type === 'hero');
  const citiesContent = pageContent.find(item => item.content_type === 'text_block' && item.settings?.type === 'cities_list');
  const servicesContent = pageContent.filter(item => item.content_type === 'service');
  const articlesContent = pageContent.filter(item => item.content_type === 'article');
  const ctaContent = pageContent.find(item => item.content_type === 'cta');
  const footerContent = pageContent.find(item => item.content_type === 'text_block' && item.settings?.type === 'footer');
  
  // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (fallback –µ—Å–ª–∏ –Ω–µ—Ç –≤ API)
  const cities = citiesContent?.content?.split(',') || [
    '–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–õ—å–≤—ñ–≤', '–ö—Ä–∏–≤–∏–π –†—ñ–≥', '–ú–∏–∫–æ–ª–∞—ó–≤'
  ];
  
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ (fallback –µ—Å–ª–∏ –Ω–µ—Ç –≤ API)
  const popularServices = servicesContent.length > 0 ? servicesContent : [
    {
      id: 1,
      title: '–ó–∞–º—ñ–Ω–∞ —à–∏–Ω',
      settings: { price: '–≤—ñ–¥ 150 ‚Ç¥', duration: '30 —Ö–≤', icon: 'tire' },
      content: '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∑–∞–º—ñ–Ω–∞ –ª—ñ—Ç–Ω—ñ—Ö —Ç–∞ –∑–∏–º–æ–≤–∏—Ö —à–∏–Ω'
    },
    {
      id: 2,
      title: '–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –∫–æ–ª—ñ—Å',
      settings: { price: '–≤—ñ–¥ 80 ‚Ç¥', duration: '15 —Ö–≤', icon: 'balance' },
      content: '–£—Å—É–Ω–µ–Ω–Ω—è –≤—ñ–±—Ä–∞—Ü—ñ—ó —Ç–∞ –Ω–µ—Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ–≥–æ –∑–Ω–æ—Å—É'
    },
    {
      id: 3,
      title: '–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—ñ–≤',
      settings: { price: '–≤—ñ–¥ 100 ‚Ç¥', duration: '20 —Ö–≤', icon: 'repair' },
      content: '–®–≤–∏–¥–∫–∏–π —Ç–∞ —è–∫—ñ—Å–Ω–∏–π —Ä–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—ñ–≤'
    },
    {
      id: 4,
      title: '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
      settings: { price: '–≤—ñ–¥ 120 ‚Ç¥', duration: '25 —Ö–≤', icon: 'mount' },
      content: '–ó–Ω—è—Ç—Ç—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∏–Ω –Ω–∞ –¥–∏—Å–∫–∏'
    }
  ];
  
  // –ë–ª–∏–∂–∞–π—à–∏–µ —Å–µ—Ä–≤–∏—Å—ã (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ)
  const nearbyServices = [
    {
      id: 1,
      name: '–®–∏–Ω–ú–∞–π—Å—Ç–µ—Ä –¶–µ–Ω—Ç—Ä',
      address: '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 15',
      rating: 4.8,
      reviews: 156,
      distance: '0.8 –∫–º',
      workingHours: '08:00 - 20:00',
      phone: '+380 (44) 123-45-67',
      services: ['–ó–∞–º—ñ–Ω–∞ —à–∏–Ω', '–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è', '–†–µ–º–æ–Ω—Ç']
    },
    {
      id: 2,
      name: '–®–≤–∏–¥–∫–∏–π –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
      address: '–ø—Ä–æ—Å–ø. –ü–µ—Ä–µ–º–æ–≥–∏, 42',
      rating: 4.6,
      reviews: 98,
      distance: '1.2 –∫–º',
      workingHours: '09:00 - 19:00',
      phone: '+380 (44) 987-65-43',
      services: ['–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è']
    },
    {
      id: 3,
      name: '–ü—Ä–æ—Ñ—ñ–®–∏–Ω–∞',
      address: '–≤—É–ª. –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, 8',
      rating: 4.9,
      reviews: 203,
      distance: '1.5 –∫–º',
      workingHours: '07:00 - 21:00',
      phone: '+380 (44) 456-78-90',
      services: ['–ó–∞–º—ñ–Ω–∞ —à–∏–Ω', '–†–µ–º–æ–Ω—Ç', '–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è']
    }
  ];
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (fallback –µ—Å–ª–∏ –Ω–µ—Ç –≤ API)
  const recentArticles = articlesContent.length > 0 ? articlesContent : [
    {
      id: 1,
      title: '–Ø–∫ –≤–∏–±—Ä–∞—Ç–∏ –∑–∏–º–æ–≤—ñ —à–∏–Ω–∏',
      content: '–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫ –∑ –≤–∏–±–æ—Ä—É –∑–∏–º–æ–≤–∏—Ö —à–∏–Ω –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ó–∑–¥–∏',
      settings: { read_time: '5 —Ö–≤', author: '–ï–∫—Å–ø–µ—Ä—Ç –∑ —à–∏–Ω' }
    },
    {
      title: '–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏—Å–∫ —É —à–∏–Ω–∞—Ö',
      content: '–í–ø–ª–∏–≤ —Ç–∏—Å–∫—É –Ω–∞ –±–µ–∑–ø–µ–∫—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç—É –ø–∞–ª–∏–≤–∞',
      settings: { read_time: '3 —Ö–≤', author: '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç' }
    },
    {
      title: '–°–µ–∑–æ–Ω–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —à–∏–Ω',
      content: '–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —à–∏–Ω–∏ –≤ –º—ñ–∂—Å–µ–∑–æ–Ω–Ω—è',
      settings: { read_time: '4 —Ö–≤', author: '–ú–∞–π—Å—Ç–µ—Ä —Å–µ—Ä–≤—ñ—Å—É' }
    }
  ];

  const handleSearch = () => {
    navigate(`/client/search?city=${selectedCity}&query=${searchQuery}`);
  };

  const getServiceIcon = (iconType: string) => {
    switch (iconType) {
      case 'tire': return <TireIcon />;
      case 'balance': return <SpeedIcon />;
      case 'repair': return <BuildIcon />;
      case 'mount': return <CarIcon />;
      default: return <TireIcon />;
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ fallback
  const currentHero = heroContent || {
    title: '–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –ø–æ—Ä—É—á –∑ –≤–∞–º–∏',
    content: '–®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ',
    settings: {
      subtitle: '–®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ',
      button_text: '–ó–Ω–∞–π—Ç–∏',
      search_placeholder: '–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–æ—Å–ª—É–≥—É',
      city_placeholder: '–ú—ñ—Å—Ç–æ'
    }
  };

  const currentServices = servicesContent.length > 0 
    ? servicesContent.map(s => ({ ...s, dynamic_data: s.dynamic_data }))
    : popularServices;
  
  // –î–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ fallback
  const currentCities = citiesData?.data || [
    { name: '–ö–∏—ó–≤', service_points_count: 15 },
    { name: '–•–∞—Ä–∫—ñ–≤', service_points_count: 8 },
    { name: '–û–¥–µ—Å–∞', service_points_count: 6 },
    { name: '–õ—å–≤—ñ–≤', service_points_count: 5 },
    { name: '–î–Ω—ñ–ø—Ä–æ', service_points_count: 4 },
    { name: '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', service_points_count: 3 }
  ];
  
  // –î–ª—è —Å—Ç–∞—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ fallback
  const currentArticles = articlesData?.data || [
    {
      title: '–Ø–∫ –≤–∏–±—Ä–∞—Ç–∏ –∑–∏–º–æ–≤—ñ —à–∏–Ω–∏',
      excerpt: '–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫ –∑ –≤–∏–±–æ—Ä—É –∑–∏–º–æ–≤–∏—Ö —à–∏–Ω –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ó–∑–¥–∏',
      reading_time: 5,
      author: '–ï–∫—Å–ø–µ—Ä—Ç –∑ —à–∏–Ω'
    },
    {
      title: '–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏—Å–∫ —É —à–∏–Ω–∞—Ö',
      excerpt: '–í–ø–ª–∏–≤ —Ç–∏—Å–∫—É –Ω–∞ –±–µ–∑–ø–µ–∫—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç—É –ø–∞–ª–∏–≤–∞',
      reading_time: 3,
      author: '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç'
    },
    {
      title: '–°–µ–∑–æ–Ω–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —à–∏–Ω',
      excerpt: '–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —à–∏–Ω–∏ –≤ –º—ñ–∂—Å–µ–∑–æ–Ω–Ω—è',
      reading_time: 4,
      author: '–ú–∞–π—Å—Ç–µ—Ä —Å–µ—Ä–≤—ñ—Å—É'
    }
  ];

  if (contentLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <Typography>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
      {/* –ù–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <ClientNavigation colors={colors} secondaryButtonStyles={secondaryButtonStyles} />

      {/* Hero —Å–µ–∫—Ü–∏—è */}
      <Fade in timeout={500}>
        <Box sx={{
          background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
          color: 'white',
          py: 8,
          position: 'relative',
          overflow: 'hidden',
          '&::before': {
            content: '""',
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'radial-gradient(circle at 30% 70%, rgba(255,255,255,0.1) 0%, transparent 50%)',
            pointerEvents: 'none'
          }
        }}>
          <Container maxWidth="lg">
            <Grid container spacing={4} alignItems="center">
              <Grid item xs={12} md={6}>
                <Typography variant="h2" sx={{ fontWeight: 700, mb: 2, fontSize: { xs: '2.5rem', md: '3.5rem' } }}>
                  {currentHero.title}
                </Typography>
                <Typography variant="h6" sx={{ mb: 4, opacity: 0.9, lineHeight: 1.6 }}>
                  {currentHero.settings?.subtitle || currentHero.content}
                </Typography>
                
                {/* –ü–æ–∏—Å–∫ */}
                <Paper sx={{ p: 2, borderRadius: SIZES.borderRadius.lg }}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={4}>
                      <Autocomplete
                        value={selectedCity}
                        onChange={(event, newValue) => setSelectedCity(newValue)}
                        options={cities}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label={currentHero.settings?.city_placeholder || '–ú—ñ—Å—Ç–æ'}
                            fullWidth
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: <LocationIcon sx={{ mr: 1, color: colors.textSecondary }} />
                            }}
                          />
                        )}
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label={currentHero.settings?.search_placeholder || '–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–æ—Å–ª—É–≥—É'}
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                        InputProps={{
                          endAdornment: (
                            <InputAdornment position="end">
                              <SearchIcon />
                            </InputAdornment>
                          )
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} sm={2}>
                      <Button
                        fullWidth
                        variant="contained"
                        size="large"
                        onClick={handleSearch}
                        sx={{ 
                          ...buttonStyles, 
                          height: 56,
                          bgcolor: theme.palette.primary.main,
                          '&:hover': { bgcolor: theme.palette.primary.dark }
                        }}
                      >
                        {currentHero.settings?.button_text || '–ó–Ω–∞–π—Ç–∏'}
                      </Button>
                    </Grid>
                  </Grid>
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center',
                  '& > *': { fontSize: { xs: '8rem', md: '12rem' } }
                }}>
                  üöó
                </Box>
              </Grid>
            </Grid>
          </Container>
        </Box>
      </Fade>

      {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ */}
      <Fade in timeout={700}>
        <Container maxWidth="lg" sx={{ py: 8 }}>
          <Typography variant="h3" sx={{ 
            textAlign: 'center', 
            mb: 6, 
            fontWeight: 700,
            color: colors.textPrimary 
          }}>
            üîß –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–æ—Å–ª—É–≥–∏
          </Typography>
          
          <Grid container spacing={3}>
            {currentServices.map((service, index) => (
              <Grid item xs={12} sm={6} md={3} key={index}>
                <Fade in timeout={800 + index * 100}>
                  <Card sx={{ 
                    ...cardStyles, 
                    height: '100%',
                    cursor: 'pointer',
                    transition: ANIMATIONS.transition.medium,
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: theme.shadows[4]
                    }
                  }}>
                    <CardContent sx={{ textAlign: 'center', p: 3 }}>
                      <Box sx={{ 
                        color: theme.palette.primary.main, 
                        fontSize: 48, 
                        mb: 2,
                        display: 'flex',
                        justifyContent: 'center'
                      }}>
                        {getServiceIcon(service.settings?.icon || 'tire')}
                      </Box>
                      <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                        {service.title}
                      </Typography>
                      <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                        {service.content}
                      </Typography>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="h6" sx={{ fontWeight: 700, color: theme.palette.primary.main }}>
                          {service.settings?.price}
                        </Typography>
                        <Chip 
                          icon={<ScheduleIcon />} 
                          label={service.settings?.duration} 
                          size="small"
                          variant="outlined"
                        />
                      </Box>
                    </CardContent>
                    <CardActions sx={{ justifyContent: 'center', pb: 3 }}>
                      <Button 
                        variant="contained" 
                        sx={buttonStyles}
                        onClick={() => navigate('/client/booking', { state: { service } })}
                      >
                        –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è
                      </Button>
                    </CardActions>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
        </Container>
      </Fade>

      {/* –ë–ª–∏–∂–∞–π—à–∏–µ —Å–µ—Ä–≤–∏—Å—ã */}
      <Box sx={{ bgcolor: colors.backgroundSecondary, py: 8 }}>
        <Container maxWidth="lg">
          <Fade in timeout={900}>
            <Box>
              <Typography variant="h3" sx={{ 
                textAlign: 'center', 
                mb: 6, 
                fontWeight: 700,
                color: colors.textPrimary 
              }}>
                üìç –ù–∞–π–±–ª–∏–∂—á—ñ —Å–µ—Ä–≤—ñ—Å–∏
              </Typography>
              
              <Grid container spacing={3}>
                {currentCities.slice(0, 6).map((city, index) => (
                  <Grid item xs={12} md={4} key={index}>
                    <Fade in timeout={1000 + index * 100}>
                      <Card sx={{ 
                        ...cardStyles, 
                        height: '100%',
                        cursor: 'pointer',
                        transition: ANIMATIONS.transition.medium,
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: theme.shadows[3]
                        }
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                            <Typography variant="h6" sx={{ fontWeight: 600, color: colors.textPrimary }}>
                              {city.name}
                            </Typography>
                            <Chip label={city.service_points_count} size="small" color="primary" />
                          </Box>
                        </CardContent>
                        
                        <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>
                          <Button 
                            size="small" 
                            startIcon={<PhoneIcon />}
                            sx={{ color: colors.textSecondary }}
                          >
                            –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏
                          </Button>
                          <Button 
                            variant="contained" 
                            size="small"
                            sx={buttonStyles}
                            onClick={() => navigate('/client/booking', { state: { servicePoint: city } })}
                          >
                            –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è
                          </Button>
                        </CardActions>
                      </Card>
                    </Fade>
                  </Grid>
                ))}
              </Grid>
              
              <Box sx={{ textAlign: 'center', mt: 4 }}>
                <Button 
                  variant="outlined" 
                  size="large"
                  startIcon={<MapIcon />}
                  sx={secondaryButtonStyles}
                  onClick={() => navigate('/client/search')}
                >
                  –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞ –∫–∞—Ä—Ç—ñ
                </Button>
              </Box>
            </Box>
          </Fade>
        </Container>
      </Box>

      {/* –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π */}
      <Fade in timeout={1100}>
        <Container maxWidth="lg" sx={{ py: 8 }}>
          <Typography variant="h3" sx={{ 
            textAlign: 'center', 
            mb: 6, 
            fontWeight: 700,
            color: colors.textPrimary 
          }}>
            üìö –ö–æ—Ä–∏—Å–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
          </Typography>
          
          <Grid container spacing={3}>
            {currentArticles.slice(0, 3).map((article, index) => (
              <Grid item xs={12} md={4} key={index}>
                <Fade in timeout={1200 + index * 100}>
                  <Card sx={{ 
                    ...cardStyles, 
                    height: '100%',
                    cursor: 'pointer',
                    transition: ANIMATIONS.transition.medium,
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[3]
                    }
                  }}>
                    <Box sx={{ 
                      height: 200, 
                      bgcolor: colors.backgroundField,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '4rem'
                    }}>
                      üìñ
                    </Box>
                    <CardContent>
                      <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: colors.textPrimary }}>
                        {article.title}
                      </Typography>
                      <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                        {article.excerpt}
                      </Typography>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="caption" sx={{ color: colors.textSecondary }}>
                          {typeof article.author === 'string' ? article.author : article.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}
                        </Typography>
                        <Chip label={`${article.reading_time || 5} –º–∏–Ω`} size="small" variant="outlined" />
                      </Box>
                    </CardContent>
                    <CardActions>
                      <Button 
                        size="small" 
                        sx={{ color: theme.palette.primary.main }}
                        onClick={() => navigate(`/knowledge-base/${index}`)}
                      >
                        –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ
                      </Button>
                    </CardActions>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
          
          <Box sx={{ textAlign: 'center', mt: 4 }}>
            <Button 
              variant="outlined" 
              size="large"
              startIcon={<ArticleIcon />}
              sx={secondaryButtonStyles}
              onClick={() => navigate('/knowledge-base')}
            >
              –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ
            </Button>
          </Box>
        </Container>
      </Fade>

      {/* CTA —Å–µ–∫—Ü–∏—è */}
      <Box sx={{
        background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
        color: 'white',
        py: 6
      }}>
        <Container maxWidth="md">
          <Box sx={{ textAlign: 'center' }}>
            <Typography variant="h4" sx={{ fontWeight: 700, mb: 2 }}>
              {ctaContent?.title || '–ì–æ—Ç–æ–≤—ñ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è?'}
            </Typography>
            <Typography variant="h6" sx={{ mb: 4, opacity: 0.9 }}>
              {ctaContent?.content || '–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å —Ç–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Å–µ—Ä–≤—ñ—Å'}
            </Typography>
            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
              <Button 
                variant="contained" 
                size="large"
                startIcon={<BookIcon />}
                sx={{ 
                  bgcolor: 'white', 
                  color: theme.palette.primary.main,
                  '&:hover': { bgcolor: 'rgba(255,255,255,0.9)' }
                }}
                onClick={() => navigate('/client/booking')}
              >
                {ctaContent?.settings?.primary_button_text || '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –æ–Ω–ª–∞–π–Ω'}
              </Button>
              <Button 
                variant="outlined" 
                size="large"
                startIcon={<PersonIcon />}
                sx={{ 
                  borderColor: 'white', 
                  color: 'white',
                  '&:hover': { 
                    borderColor: 'white', 
                    bgcolor: 'rgba(255,255,255,0.1)' 
                  }
                }}
                onClick={() => navigate('/client/profile')}
              >
                {ctaContent?.settings?.secondary_button_text || '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç'}
              </Button>
            </Box>
          </Box>
        </Container>
      </Box>

      {/* –§—É—Ç–µ—Ä */}
      <Box sx={{ bgcolor: colors.backgroundCard, py: 4, borderTop: `1px solid ${colors.borderPrimary}` }}>
        <Container maxWidth="lg">
          <Grid container spacing={4}>
            <Grid item xs={12} md={4}>
              <Typography variant="h6" sx={{ fontWeight: 700, mb: 2, color: colors.textPrimary }}>
                {footerContent?.title || 'üöó –¢–≤–æ—è –®–∏–Ω–∞'}
              </Typography>
              <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 2 }}>
                {footerContent?.content || '–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –ø–æ—Ä—É—á –∑ –≤–∞–º–∏. –®–≤–∏–¥–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏.'}
              </Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <IconButton size="small">
                  <PhoneIcon />
                </IconButton>
                <IconButton size="small">
                  <EmailIcon />
                </IconButton>
              </Box>
            </Grid>
            <Grid item xs={12} md={4}>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: colors.textPrimary }}>
                –ü–æ—Å–ª—É–≥–∏
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                {(footerContent?.settings?.services_links || ['–ó–∞–º—ñ–Ω–∞ —à–∏–Ω', '–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è', '–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—ñ–≤']).map((link: string) => (
                  <Link key={link} to="/client/services" style={{ color: colors.textSecondary, textDecoration: 'none' }}>
                    {link}
                  </Link>
                ))}
              </Box>
            </Grid>
            <Grid item xs={12} md={4}>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: colors.textPrimary }}>
                –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                {(footerContent?.settings?.info_links || ['–ë–∞–∑–∞ –∑–Ω–∞–Ω—å', '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç', '–î–ª—è –±—ñ–∑–Ω–µ—Å—É']).map((link: string, index: number) => {
                  const routes = ['/knowledge-base', '/client/profile', '/login'];
                  return (
                    <Link key={link} to={routes[index]} style={{ color: colors.textSecondary, textDecoration: 'none' }}>
                      {link}
                    </Link>
                  );
                })}
              </Box>
            </Grid>
          </Grid>
          
          <Box sx={{ 
            textAlign: 'center', 
            mt: 4, 
            pt: 4, 
            borderTop: `1px solid ${colors.borderPrimary}` 
          }}>
            <Typography variant="body2" sx={{ color: colors.textSecondary }}>
              {footerContent?.settings?.copyright || '¬© 2024 –¢–≤–æ—è –®–∏–Ω–∞. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.'}
            </Typography>
          </Box>
        </Container>
      </Box>
    </Box>
  );
};

export default ClientMainPage; 