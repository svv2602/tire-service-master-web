import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import {
  Container, Typography, Box, Paper, Button, CircularProgress,
  Alert, Divider, useTheme
} from '@mui/material';
import { RootState } from '../../store';
import { useGetClientBookingQuery, useRescheduleClientBookingMutation } from '../../api/clientBookings.api';
import { useGetSlotsForCategoryQuery } from '../../api/availability.api';
import { useGetServicePointBasicInfoQuery } from '../../api/servicePoints.api';
import { useTranslation } from 'react-i18next';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import SaveIcon from '@mui/icons-material/Save';
import { format, parseISO, addDays } from 'date-fns';
import { ru } from 'date-fns/locale';
import { BookingFormData } from '../../types/booking';
import { AvailabilitySelector } from '../../components/availability';
import type { AvailableTimeSlot } from '../../types/availability';
import { getThemeColors, getButtonStyles } from '../../styles';
import ClientLayout from '../../components/client/ClientLayout';

const RescheduleBookingPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const primaryButtonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');

  // üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤
  const currentUser = useSelector((state: RootState) => state.auth.user);
  const isServiceUser = Boolean(currentUser && ['admin', 'partner', 'manager', 'operator'].includes(currentUser.role));

  console.log('üîç –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–µ–Ω–æ—Å–∞:', {
    userRole: currentUser?.role,
    isServiceUser,
    shouldShowAllSlots: isServiceUser
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string | null>(null);

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏
  const { data: booking, isLoading: isLoadingBooking, isError: isErrorBooking } = useGetClientBookingQuery(id || '');
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
  const [rescheduleBooking, { isLoading: isUpdating, isError: isUpdateError }] = useRescheduleClientBookingMutation();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–µ
  const { data: servicePointData } = useGetServicePointBasicInfoQuery(
    booking?.service_point?.id?.toString() || '0',
    { skip: !booking?.service_point?.id }
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const { data: availabilityData, isLoading: isLoadingAvailability } = useGetSlotsForCategoryQuery(
    {
      servicePointId: booking?.service_point?.id ? Number(booking.service_point.id) : 0,
      categoryId: booking?.service_category?.id || 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      date: selectedDate ? format(selectedDate, 'yyyy-MM-dd') : ''
    },
    { skip: !booking?.service_point?.id || !selectedDate }
  );

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AvailabilitySelector
  const availableTimeSlots: AvailableTimeSlot[] = useMemo(() => {
    if (!availabilityData?.slots || availabilityData.slots.length === 0) {
      return [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–µ –ø–æ–ª—è API
    let processedSlots = availabilityData.slots.map(slot => ({
      time: slot.start_time,
      available_posts: slot.available_posts || 0,
      total_posts: slot.total_posts || 0,
      bookings_count: slot.bookings_count || 0,
      duration_minutes: slot.duration_minutes,
      can_book: isServiceUser ? true : (slot.available_posts || 0) > 0, // –°–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —Å–ª–æ—Ç
      is_available: slot.is_available !== null ? slot.is_available : undefined, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null –∫–∞–∫ undefined
      occupancy_status: slot.occupancy_status || ((slot.available_posts || 0) === 0 ? 'full' : 'available') // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    }));

    // üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã, –¥–ª—è –Ω–µ-–∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—Å–µ —Å–ª–æ—Ç—ã
    if (!isServiceUser) {
      // –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
      processedSlots = processedSlots.filter(slot => (slot.available_posts || 0) > 0);
      console.log('üë§ –ö–ª–∏–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–ª–æ—Ç–æ–≤ —Å available_posts > 0:', processedSlots.length);
    } else {
      console.log('üîß –°–ª—É–∂–µ–±–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã:', processedSlots.length);
    }

    return processedSlots.sort((a, b) => a.time.localeCompare(b.time));
  }, [availabilityData, isServiceUser]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    if (booking?.booking_date && !selectedDate) {
      try {
        const bookingDate = parseISO(booking.booking_date);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤—Ç—Ä–∞ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        const tomorrow = addDays(new Date(), 1);
        setSelectedDate(bookingDate >= tomorrow ? bookingDate : tomorrow);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏:', error);
        setSelectedDate(addDays(new Date(), 1));
      }
    }
  }, [booking, selectedDate]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤ development)
  useEffect(() => {
    if (booking && process.env.NODE_ENV === 'development') {
      console.log('üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:', {
        id: booking.id,
        service_point: booking.service_point,
        service_point_id_from_object: booking.service_point?.id,
        booking_date: booking.booking_date,
        start_time: booking.start_time,
        end_time: booking.end_time
      });
    }
  }, [booking]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ development)
  useEffect(() => {
    if (selectedDate && booking && process.env.NODE_ENV === 'development') {
      const requestParams = {
        servicePointId: booking.service_point?.id ? Number(booking.service_point.id) : 0,
        categoryId: booking.service_category?.id || 1,
        date: format(selectedDate, 'yyyy-MM-dd')
      };
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–æ—Ç–æ–≤:', requestParams);
      console.log('üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.service_category);
      console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:', availabilityData);
    }
  }, [selectedDate, booking, availabilityData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–ø–∏—Å–∏
  const handleBack = () => {
    navigate(`/client/bookings/${id}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
  const handleDateChange = (date: Date | null) => {
    setSelectedDate(date);
    setSelectedTimeSlot(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeSlotChange = (timeSlot: string | null, slotData?: AvailableTimeSlot) => {
    setSelectedTimeSlot(timeSlot);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
  const handleReschedule = async () => {
    if (!booking || !selectedDate || !selectedTimeSlot) return;

    try {
      await rescheduleBooking({
        id: id || '',
        new_date: format(selectedDate, 'yyyy-MM-dd'),
        new_time: selectedTimeSlot
      }).unwrap();
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      navigate('/client/bookings');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏:', error);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const canSave = selectedDate && selectedTimeSlot && !isUpdating;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  const formatTime = (timeString: string) => {
    if (!timeString) return '';
    
    try {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (2000-01-01T09:35:00.000+02:00)
      if (timeString.includes('T')) {
        const date = new Date(timeString);
        return format(date, 'HH:mm');
      }
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm
      if (timeString.match(/^\d{2}:\d{2}$/)) {
        return timeString;
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ –≤—Ä–µ–º—è
      const date = new Date(`2000-01-01T${timeString}`);
      return format(date, 'HH:mm');
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', timeString);
      return timeString;
    }
  };

  if (isLoadingBooking) {
    return (
      <ClientLayout>
        <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
          <Container maxWidth="lg" sx={{ py: 4 }}>
            <Box display="flex" justifyContent="center" my={8}>
              <CircularProgress />
            </Box>
          </Container>
        </Box>
      </ClientLayout>
    );
  }

  if (isErrorBooking || !booking) {
    return (
      <ClientLayout>
        <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
          <Container maxWidth="lg" sx={{ py: 4 }}>
            <Alert severity="error" sx={{ mb: 2 }}>
              {t('forms.clientPages.rescheduleBooking.loadingError')}
            </Alert>
            <Button 
              startIcon={<ArrowBackIcon />} 
              onClick={handleBack}
              variant="outlined"
              sx={secondaryButtonStyles}
            >
              {t('forms.clientPages.rescheduleBooking.backToBooking')}
            </Button>
          </Container>
        </Box>
      </ClientLayout>
    );
  }

  return (
    <ClientLayout>
      <Box sx={{ minHeight: '100vh', bgcolor: colors.backgroundPrimary }}>
        <Container maxWidth="lg" sx={{ py: 4 }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Box mb={3} display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center">
              <Button 
                startIcon={<ArrowBackIcon />} 
                onClick={handleBack}
                sx={{ mr: 2, ...secondaryButtonStyles }}
                variant="outlined"
              >
                {t('forms.clientPages.rescheduleBooking.back')}
              </Button>
              <Typography variant="h4" component="h1">
                {t('forms.clientPages.rescheduleBooking.title')} ‚Ññ{booking.id}
              </Typography>
            </Box>

            <Button
              variant="contained"
              startIcon={isUpdating ? <CircularProgress size={20} /> : <SaveIcon />}
              onClick={handleReschedule}
              disabled={!canSave}
              sx={primaryButtonStyles}
            >
              {isUpdating ? t('forms.clientPages.rescheduleBooking.saving') : t('forms.clientPages.rescheduleBooking.confirmReschedule')}
            </Button>
          </Box>

          {/* –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
          {isUpdateError && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {t('forms.clientPages.rescheduleBooking.rescheduleError')}
            </Alert>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏ */}
          <Paper elevation={2} sx={{ p: 3, mb: 4 }}>
            <Typography variant="h6" gutterBottom>
              {t('forms.clientPages.rescheduleBooking.currentBooking')}
            </Typography>
            
            <Box mt={2} mb={2}>
              <Typography variant="body1" gutterBottom>
                <strong>{t('forms.clientPages.rescheduleBooking.date')}:</strong> {format(parseISO(booking.booking_date), 'dd.MM.yyyy')}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>{t('forms.clientPages.rescheduleBooking.time')}:</strong> {formatTime(booking.start_time)}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>{t('forms.clientPages.rescheduleBooking.servicePoint')}:</strong> {servicePointData?.name || booking.service_point?.name || `#${booking.service_point?.id}`}
              </Typography>
              {servicePointData?.address && (
                <Typography variant="body2" color="textSecondary">
                  {servicePointData.address}
                </Typography>
              )}
            </Box>
          </Paper>

          <Divider sx={{ my: 3 }} />

          {/* –í—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
          <Typography variant="h6" gutterBottom>
            {t('forms.clientPages.rescheduleBooking.selectNewDateTime')}
          </Typography>

          <Box sx={{ mt: 3 }}>
            <AvailabilitySelector
              servicePointId={booking.service_point?.id ? Number(booking.service_point.id) : undefined}
              selectedDate={selectedDate}
              onDateChange={handleDateChange}
              selectedTimeSlot={selectedTimeSlot}
              onTimeSlotChange={handleTimeSlotChange}
              availableTimeSlots={availableTimeSlots}
              isLoading={isLoadingAvailability}
              servicePointPhone={servicePointData?.contact_phone || servicePointData?.phone}
              categoryId={booking.service_category?.id || 1}
              totalSlotsForDay={availabilityData?.total_slots}
              isServiceUser={isServiceUser}
            />
          </Box>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
          {selectedDate && selectedTimeSlot && (
            <Paper elevation={1} sx={{ p: 3, mt: 3, bgcolor: colors.backgroundSecondary }}>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–ø—Ä–∞–≤–∞ */}
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                <Typography variant="h6">
                  {t('forms.clientPages.rescheduleBooking.newDateTime')}
                </Typography>
                
                {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ */}
                <Button
                  variant="contained"
                  startIcon={isUpdating ? <CircularProgress size={20} /> : <SaveIcon />}
                  onClick={handleReschedule}
                  disabled={!canSave}
                  sx={primaryButtonStyles}
                  size="large"
                >
                  {isUpdating ? t('forms.clientPages.rescheduleBooking.saving') : t('forms.clientPages.rescheduleBooking.confirmReschedule')}
                </Button>
              </Box>
              
              <Typography variant="body1" gutterBottom>
                <strong>{t('forms.clientPages.rescheduleBooking.date')}:</strong> {format(selectedDate, 'dd.MM.yyyy')}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>{t('forms.clientPages.rescheduleBooking.time')}:</strong> {selectedTimeSlot}
                {(() => {
                  const selectedSlotData = availableTimeSlots.find(slot => slot.time === selectedTimeSlot);
                  if (selectedSlotData?.duration_minutes) {
                    const [hours, minutes] = selectedTimeSlot.split(':').map(Number);
                    const endDate = new Date();
                    endDate.setHours(hours, minutes + selectedSlotData.duration_minutes);
                    const endTime = endDate.toTimeString().substring(0, 5);
                    return ` - ${endTime}`;
                  }
                  return '';
                })()}
              </Typography>
            </Paper>
          )}

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          {!selectedDate && (
            <Alert severity="warning" sx={{ mt: 3 }}>
              {t('forms.clientPages.rescheduleBooking.selectDate')} –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            </Alert>
          )}

          {selectedDate && !selectedTimeSlot && (
            <Alert severity="warning" sx={{ mt: 3 }}>
              {t('forms.clientPages.rescheduleBooking.selectTime')} –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            </Alert>
          )}
        </Container>
      </Box>
    </ClientLayout>
  );
};

export default RescheduleBookingPage; 