import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardHeader,
  CardContent,
  TextField,
  Button,
  Switch,
  FormControlLabel,
  Typography,
  Alert,
  Chip,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Divider,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Link,
} from '@mui/material';
import {
  Google as GoogleIcon,
  Settings as SettingsIcon,
  Security as SecurityIcon,
  Save as SaveIcon,
  Science as TestIcon,
  Launch as LaunchIcon,
  Info as InfoIcon,
  CheckCircle as CheckIcon,
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { getTablePageStyles } from '../../../styles';
import {
  useGetGoogleOauthSettingsQuery,
  useUpdateGoogleOauthSettingsMutation,
  useTestGoogleOauthConnectionMutation,
  type UpdateGoogleOauthSettingsRequest,
} from '../../../api/googleOauthSettings.api';

const GoogleOauthSettingsPage: React.FC = () => {
  const theme = useTheme();
  const tablePageStyles = getTablePageStyles(theme);

  // API —Ö—É–∫–∏
  const { data, isLoading, error, refetch } = useGetGoogleOauthSettingsQuery();
  const [updateSettings, { isLoading: updating }] = useUpdateGoogleOauthSettingsMutation();
  const [testConnection, { isLoading: testing }] = useTestGoogleOauthConnectionMutation();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [settings, setSettings] = useState<UpdateGoogleOauthSettingsRequest>({
    client_id: '',
    client_secret: '',
    redirect_uri: 'http://localhost:3008/auth/google/callback',
    enabled: false,
    allow_registration: true,
    auto_verify_email: true,
    scopes_list: 'email,profile',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);
  const [testResult, setTestResult] = useState<string | null>(null);
  const [testDialog, setTestDialog] = useState(false);
  const [setupDialog, setSetupDialog] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (data?.google_oauth_settings) {
      const oauthSettings = data.google_oauth_settings;
      setSettings({
        client_id: oauthSettings.client_id || '',
        client_secret: oauthSettings.client_secret || '',
        redirect_uri: oauthSettings.redirect_uri || 'http://localhost:3008/auth/google/callback',
        enabled: oauthSettings.enabled,
        allow_registration: oauthSettings.allow_registration,
        auto_verify_email: oauthSettings.auto_verify_email,
        scopes_list: oauthSettings.scopes_list || 'email,profile',
      });
    }
  }, [data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSettingChange = (field: keyof UpdateGoogleOauthSettingsRequest, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    setSaveSuccess(false);
    setSaveError(null);
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const validateSettings = (): string[] => {
    const errors: string[] = [];
    
    if (settings.enabled) {
      if (!settings.client_id?.trim()) {
        errors.push('Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      } else if (!settings.client_id.includes('.apps.googleusercontent.com')) {
        errors.push('Client ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: xxxxxx.apps.googleusercontent.com');
      }
      
      if (!settings.client_secret?.trim()) {
        errors.push('Client Secret –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      }
      
      if (!settings.redirect_uri?.trim()) {
        errors.push('Redirect URI –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      } else if (!settings.redirect_uri.match(/^https?:\/\/.+/)) {
        errors.push('Redirect URI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL');
      }
    }
    
    return errors;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSave = async () => {
    setSaveSuccess(false);
    setSaveError(null);

    const validationErrors = validateSettings();
    if (validationErrors.length > 0) {
      setSaveError(validationErrors.join('\n'));
      return;
    }

    try {
      await updateSettings(settings).unwrap();
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 5000);
      refetch();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      if (error?.data?.errors) {
        setSaveError(error.data.errors.join('\n'));
      } else {
        setSaveError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    }
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleTestConnection = async () => {
    setTestResult(null);
    
    try {
      const result = await testConnection().unwrap();
      
      if (result.success) {
        setTestResult(`‚úÖ ${result.message}`);
        if (result.authorization_url) {
          setTestResult(prev => `${prev}\nüîó URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        }
      } else {
        setTestResult(`‚ùå ${result.message}`);
      }
    } catch (error: any) {
      setTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.data?.message || error.message}`);
    }
  };

  if (isLoading) {
    return (
      <Box sx={tablePageStyles.pageContainer}>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>
          <CircularProgress size={60} />
        </Box>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={tablePageStyles.pageContainer}>
        <Alert severity="error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google OAuth. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </Alert>
      </Box>
    );
  }

  const oauthSettings = data?.google_oauth_settings;

  return (
    <Box sx={tablePageStyles.pageContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={tablePageStyles.headerContainer}>
        <Typography variant="h4" sx={tablePageStyles.title}>
          <GoogleIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
          Google OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </Typography>
        <Typography variant="body1" color="text.secondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Google OAuth –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç—ã
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      {oauthSettings && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Typography variant="h6">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</Typography>
              <Chip 
                label={oauthSettings.status_text}
                color={oauthSettings.status_color as any}
                icon={oauthSettings.system_status === 'production' ? <CheckIcon /> : undefined}
              />
              {!oauthSettings.valid_configuration && (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<InfoIcon />}
                  onClick={() => setSetupDialog(true)}
                >
                  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
                </Button>
              )}
            </Box>
          </CardContent>
        </Card>
      )}

      <Grid container spacing={3}>
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
              avatar={<SettingsIcon />}
            />
            <CardContent>
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enabled || false}
                    onChange={(e) => handleSettingChange('enabled', e.target.checked)}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å Google OAuth"
                sx={{ mb: 2 }}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.allow_registration || false}
                    onChange={(e) => handleSettingChange('allow_registration', e.target.checked)}
                    disabled={!settings.enabled}
                  />
                }
                label="–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                sx={{ mb: 2 }}
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={settings.auto_verify_email || false}
                    onChange={(e) => handleSettingChange('auto_verify_email', e.target.checked)}
                    disabled={!settings.enabled}
                  />
                }
                label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å email"
                sx={{ mb: 2 }}
              />
            </CardContent>
          </Card>
        </Grid>

        {/* OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="Google OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
              avatar={<SecurityIcon />}
            />
            <CardContent>
              <TextField
                fullWidth
                label="Client ID"
                value={settings.client_id || ''}
                onChange={(e) => handleSettingChange('client_id', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                placeholder="xxxxxx.apps.googleusercontent.com"
                helperText="Client ID –∏–∑ Google Cloud Console"
                disabled={!settings.enabled}
              />

              <TextField
                fullWidth
                label="Client Secret"
                value={settings.client_secret || ''}
                onChange={(e) => handleSettingChange('client_secret', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                type="password"
                helperText="Client Secret –∏–∑ Google Cloud Console"
                disabled={!settings.enabled}
              />

              <TextField
                fullWidth
                label="Redirect URI"
                value={settings.redirect_uri || ''}
                onChange={(e) => handleSettingChange('redirect_uri', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                helperText="URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                disabled={!settings.enabled}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <Grid container spacing={3} sx={{ mt: 1 }}>
        <Grid item xs={12}>
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'center',
            gap: 2,
            p: 3,
            backgroundColor: theme.palette.background.paper,
            borderRadius: 2,
            boxShadow: theme.shadows[3]
          }}>
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button
                variant="contained"
                size="large"
                onClick={handleSave}
                disabled={updating}
                startIcon={updating ? <CircularProgress size={20} /> : <SaveIcon />}
                sx={{
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  fontWeight: 'bold',
                  minWidth: 200,
                  background: 'linear-gradient(45deg, #4285f4 30%, #34a853 90%)',
                  boxShadow: theme.shadows[4],
                  '&:hover': {
                    background: 'linear-gradient(45deg, #3367d6 30%, #2d8f47 90%)',
                    boxShadow: theme.shadows[8],
                    transform: 'translateY(-1px)'
                  },
                  transition: 'all 0.2s ease-in-out'
                }}
              >
                üîë {updating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
              </Button>

              <Button
                variant="outlined"
                size="large"
                onClick={handleTestConnection}
                disabled={!settings.enabled || updating || testing}
                startIcon={testing ? <CircularProgress size={20} /> : <TestIcon />}
                sx={{ px: 3, py: 1.5 }}
              >
                üß™ {testing ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç'}
              </Button>
            </Box>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ */}
            {saveSuccess && (
              <Alert severity="success" sx={{ maxWidth: 400, width: '100%' }}>
                ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google OAuth —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
              </Alert>
            )}

            {saveError && (
              <Alert severity="error" sx={{ maxWidth: 600, width: '100%', whiteSpace: 'pre-line' }}>
                ‚ùå {saveError}
              </Alert>
            )}

            {testResult && (
              <Alert 
                severity={testResult.includes('‚úÖ') ? 'success' : 'error'} 
                sx={{ maxWidth: 600, width: '100%', whiteSpace: 'pre-line' }}
              >
                {testResult}
              </Alert>
            )}
          </Box>
        </Grid>
      </Grid>

      {/* –î–∏–∞–ª–æ–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ */}
      <Dialog open={setupDialog} onClose={() => setSetupDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google OAuth</DialogTitle>
        <DialogContent>
          <Typography variant="h6" gutterBottom>
            –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Google Cloud Console
          </Typography>
          <List>
            <ListItem>
              <ListItemIcon>1Ô∏è‚É£</ListItemIcon>
              <ListItemText 
                primary="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Cloud Console"
                secondary={
                  <Link href="https://console.cloud.google.com/" target="_blank" rel="noopener">
                    https://console.cloud.google.com/
                  </Link>
                }
              />
            </ListItem>
            <ListItem>
              <ListItemIcon>2Ô∏è‚É£</ListItemIcon>
              <ListItemText primary="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π" />
            </ListItem>
            <ListItem>
              <ListItemIcon>3Ô∏è‚É£</ListItemIcon>
              <ListItemText primary="–í–∫–ª—é—á–∏—Ç–µ Google+ API –∏ Google Identity Services" />
            </ListItem>
          </List>

          <Divider sx={{ my: 2 }} />

          <Typography variant="h6" gutterBottom>
            –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth 2.0
          </Typography>
          <List>
            <ListItem>
              <ListItemIcon>1Ô∏è‚É£</ListItemIcon>
              <ListItemText primary="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ APIs & Services ‚Üí Credentials" />
            </ListItem>
            <ListItem>
              <ListItemIcon>2Ô∏è‚É£</ListItemIcon>
              <ListItemText primary="–ù–∞–∂–º–∏—Ç–µ Create Credentials ‚Üí OAuth 2.0 Client IDs" />
            </ListItem>
            <ListItem>
              <ListItemIcon>3Ô∏è‚É£</ListItemIcon>
              <ListItemText primary="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø: Web application" />
            </ListItem>
            <ListItem>
              <ListItemIcon>4Ô∏è‚É£</ListItemIcon>
              <ListItemText 
                primary="–î–æ–±–∞–≤—å—Ç–µ Authorized redirect URIs:"
                secondary={settings.redirect_uri}
              />
            </ListItem>
          </List>

          <Divider sx={{ my: 2 }} />

          <Typography variant="h6" gutterBottom>
            –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è OAuth –∫–ª–∏–µ–Ω—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏ Client Secret –≤ —Ñ–æ—Ä–º—É –≤—ã—à–µ.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSetupDialog(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button 
            variant="contained" 
            href="https://console.cloud.google.com/apis/credentials" 
            target="_blank"
            startIcon={<LaunchIcon />}
          >
            –û—Ç–∫—Ä—ã—Ç—å Google Console
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default GoogleOauthSettingsPage; 