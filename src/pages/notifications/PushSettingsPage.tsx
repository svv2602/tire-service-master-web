import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardHeader,
  Switch,
  FormControlLabel,
  TextField,
  Button,
  Alert,
  Chip,
  Grid,
  Divider,
  useTheme,
  CircularProgress,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  NotificationsActive as PushIcon,
  Settings as SettingsIcon,
  CloudSync as FirebaseIcon,
  Code as ServiceWorkerIcon,
  Check as CheckIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Send as TestIcon,
  People as SubscriptionsIcon,
  Visibility as ViewIcon,
  Save as SaveIcon,
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { getTablePageStyles } from '../../styles/components';
import {
  useGetPushSettingsQuery,
  useUpdatePushSettingsMutation,
  useTestPushNotificationMutation,
  useGetPushSubscriptionsQuery,
  type PushSettings,
} from '../../api/pushSettings.api';

export const PushSettingsPage: React.FC = () => {
  const theme = useTheme();
  const { t } = useTranslation();
  const tablePageStyles = getTablePageStyles(theme);
  
  // API —Ö—É–∫–∏
  const { data: settingsData, isLoading: settingsLoading, error: settingsError } = useGetPushSettingsQuery();
  const { data: subscriptionsData, isLoading: subscriptionsLoading } = useGetPushSubscriptionsQuery();
  const [updateSettings, { isLoading: updating }] = useUpdatePushSettingsMutation();
  const [testNotification, { isLoading: testLoading }] = useTestPushNotificationMutation();
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [settings, setSettings] = useState<Partial<PushSettings>>({
    enabled: false,
    vapid_public_key: '',
    vapid_private_key: '',
    firebase_api_key: '',
    firebase_project_id: '',
    firebase_app_id: '',
    test_mode: false,
    daily_limit: 1000,
    rate_limit: 60,
  });
  
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);
  const [testResult, setTestResult] = useState<string | null>(null);
  const [subscriptionsDialog, setSubscriptionsDialog] = useState(false);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (settingsData?.push_settings) {
      const apiSettings = settingsData.push_settings;
      setSettings({
        enabled: apiSettings.enabled,
        // –ï—Å–ª–∏ –∫–ª—é—á–∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã (—Å–æ–¥–µ—Ä–∂–∞—Ç *** –∏–ª–∏ ... –∏–ª–∏ –∫–æ—Ä–æ—á–µ –ø–æ–ª–Ω–æ–π –¥–ª–∏–Ω—ã), –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        vapid_public_key: (apiSettings.vapid_public_key?.includes('***') || 
                           apiSettings.vapid_public_key?.includes('...') || 
                           (apiSettings.vapid_public_key && apiSettings.vapid_public_key.length < 88) ? '' : apiSettings.vapid_public_key) || '',
        vapid_private_key: (apiSettings.vapid_private_key?.includes('***') || 
                           apiSettings.vapid_private_key?.includes('...') ||
                           (apiSettings.vapid_private_key && apiSettings.vapid_private_key.length < 43) ? '' : apiSettings.vapid_private_key) || '',
        firebase_api_key: (apiSettings.firebase_api_key?.includes('...') ? '' : apiSettings.firebase_api_key) || '',
        firebase_project_id: apiSettings.firebase_project_id || '',
        firebase_app_id: (apiSettings.firebase_app_id?.includes('...') ? '' : apiSettings.firebase_app_id) || '',
        test_mode: apiSettings.test_mode,
        daily_limit: apiSettings.daily_limit,
        rate_limit: apiSettings.rate_limit,
      });
    }
  }, [settingsData]);

  const handleSettingChange = (field: keyof PushSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    setSaveSuccess(false);
    setSaveError(null);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ)
    const vapidPublicKeyRegex = /^[A-Za-z0-9_-]{87}=$/;
    const vapidPrivateKeyRegex = /^[A-Za-z0-9_-]{42}=$/;
    
    const validationErrors = [];
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ... –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É)
    if (settings.vapid_public_key && 
        !settings.vapid_public_key.includes('...') && 
        settings.vapid_public_key.length >= 50 && // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        !vapidPublicKeyRegex.test(settings.vapid_public_key)) {
      validationErrors.push('VAPID Public Key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64 (87 —Å–∏–º–≤–æ–ª–æ–≤ + =)');
    }
    
    if (settings.vapid_private_key && 
        !settings.vapid_private_key.includes('...') && 
        settings.vapid_private_key.length >= 20 && // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        !vapidPrivateKeyRegex.test(settings.vapid_private_key)) {
      validationErrors.push('VAPID Private Key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64 (42 —Å–∏–º–≤–æ–ª–∞ + =)');
    }
    
    if (validationErrors.length > 0) {
      setSaveError('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + validationErrors.join(', '));
      return;
    }
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const dataToSend = { ...settings };
      
      // –ï—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö (—Å–µ—Ä–≤–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
      if (!dataToSend.vapid_public_key?.trim()) {
        delete dataToSend.vapid_public_key;
      }
      if (!dataToSend.vapid_private_key?.trim()) {
        delete dataToSend.vapid_private_key;
      }
      if (!dataToSend.firebase_api_key?.trim()) {
        delete dataToSend.firebase_api_key;
      }
      if (!dataToSend.firebase_project_id?.trim()) {
        delete dataToSend.firebase_project_id;
      }
      if (!dataToSend.firebase_app_id?.trim()) {
        delete dataToSend.firebase_app_id;
      }
      
      console.log('üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', dataToSend);
      await updateSettings(dataToSend).unwrap();
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 4000);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      
      if (error?.data?.errors) {
        errorMessage = '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + error.data.errors.join(', ');
      } else if (error?.data?.message) {
        errorMessage = error.data.message;
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      setSaveError(errorMessage);
      setTimeout(() => setSaveError(null), 5000);
    }
  };

  const handleTestNotification = async () => {
    setTestResult(null);
    
    try {
      const result = await testNotification().unwrap();
      
      if (result.success) {
        setTestResult(`‚úÖ ${result.message}`);
      } else {
        setTestResult(`‚ùå ${result.message}`);
      }
    } catch (error: any) {
      setTestResult(`‚ùå –û—à–∏–±–∫–∞: ${error.data?.message || error.message}`);
    }
  };

  const handleGenerateVapidKeys = () => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VAPID –∫–ª—é—á–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Base64
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (87 —Å–∏–º–≤–æ–ª–æ–≤ + '=' = 88 —Å–∏–º–≤–æ–ª–æ–≤)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Base64 URL-safe —Å–∏–º–≤–æ–ª—ã: A-Z, a-z, 0-9, -, _
    const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
    let publicKey = 'B'; // VAPID public key –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'B'
    for (let i = 1; i < 87; i++) {
      publicKey += base64Chars.charAt(Math.floor(Math.random() * base64Chars.length));
    }
    publicKey += '=';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (42 —Å–∏–º–≤–æ–ª–∞ + '=' = 43 —Å–∏–º–≤–æ–ª–∞)
    let privateKey = '';
    for (let i = 0; i < 42; i++) {
      privateKey += base64Chars.charAt(Math.floor(Math.random() * base64Chars.length));
    }
    privateKey += '=';
    
    setSettings(prev => ({
      ...prev,
      vapid_public_key: publicKey,
      vapid_private_key: privateKey
    }));
  };

  const getStatusChip = (status: boolean, trueLabel: string, falseLabel: string, color?: 'success' | 'error' | 'warning') => (
    <Chip
      icon={status ? <CheckIcon /> : <ErrorIcon />}
      label={status ? trueLabel : falseLabel}
      color={color || (status ? 'success' : 'error')}
      size="small"
    />
  );

  if (settingsLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (settingsError) {
    return (
      <Box sx={tablePageStyles.pageContainer}>
        <Alert severity="error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </Alert>
      </Box>
    );
  }

  const statistics = settingsData?.statistics;
  const serviceWorkerStatus = settingsData?.service_worker_status;

  return (
    <Box sx={tablePageStyles.pageContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box sx={tablePageStyles.headerContainer}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <PushIcon sx={{ fontSize: 32, color: 'primary.main' }} />
          <Typography variant="h4" sx={tablePageStyles.pageTitle}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Typography>
        </Box>
        <Typography variant="body2" color="text.secondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VAPID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ Service Worker –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </Typography>
      </Box>

      {saveSuccess && (
        <Alert severity="success" sx={{ mb: 3 }}>
          ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        </Alert>
      )}

      {saveError && (
        <Alert severity="error" sx={{ mb: 3 }}>
          ‚ùå {saveError}
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
              avatar={<SettingsIcon />}
              action={
                <Button
                  variant="contained"
                  onClick={handleSave}
                  disabled={updating}
                  startIcon={updating ? <CircularProgress size={20} /> : <SaveIcon />}
                  size="small"
                >
                  {updating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                </Button>
              }
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</Typography>
                    {getStatusChip(settings.enabled || false, '–í–∫–ª—é—á–µ–Ω—ã', '–û—Ç–∫–ª—é—á–µ–Ω—ã')}
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">Service Worker:</Typography>
                    {getStatusChip(serviceWorkerStatus?.service_worker_file_exists || false, '–ù–∞—Å—Ç—Ä–æ–µ–Ω', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">VAPID –∫–ª—é—á–∏:</Typography>
                    {getStatusChip(serviceWorkerStatus?.vapid_configured || false, '–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')}
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:</Typography>
                    {getStatusChip(settings.test_mode || false, '–í–∫–ª—é—á–µ–Ω', '–û—Ç–∫–ª—é—á–µ–Ω', 'warning')}
                  </Box>
                </Grid>
              </Grid>
              
              {statistics && (
                <Box sx={{ mt: 2 }}>
                  <Divider sx={{ mb: 2 }} />
                  <Typography variant="h6" gutterBottom>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="text.secondary">–ü–æ–¥–ø–∏—Å–æ–∫:</Typography>
                      <Typography variant="h6">{statistics.total_subscriptions}</Typography>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="text.secondary">–ê–∫—Ç–∏–≤–Ω—ã—Ö:</Typography>
                      <Typography variant="h6" color="success.main">{statistics.active_subscriptions}</Typography>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="text.secondary">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</Typography>
                      <Typography variant="h6">{statistics.total_sent}</Typography>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="text.secondary">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</Typography>
                      <Typography variant="h6" color="primary.main">{statistics.success_rate}%</Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
              avatar={<PushIcon />}
            />
            <CardContent>
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enabled || false}
                    onChange={(e) => handleSettingChange('enabled', e.target.checked)}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                sx={{ mb: 2 }}
              />
              
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.test_mode || false}
                    onChange={(e) => handleSettingChange('test_mode', e.target.checked)}
                  />
                }
                label="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
                sx={{ mb: 2 }}
              />

              <TextField
                fullWidth
                label="–õ–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å"
                type="number"
                value={settings.daily_limit || 1000}
                onChange={(e) => handleSettingChange('daily_limit', parseInt(e.target.value))}
                sx={{ mb: 2 }}
                size="small"
              />

              <TextField
                fullWidth
                label="–õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É"
                type="number"
                value={settings.rate_limit || 60}
                onChange={(e) => handleSettingChange('rate_limit', parseInt(e.target.value))}
                sx={{ mb: 2 }}
                size="small"
              />

              <Divider sx={{ my: 2 }} />

              <Button
                variant="outlined"
                startIcon={testLoading ? <CircularProgress size={20} /> : <TestIcon />}
                onClick={handleTestNotification}
                disabled={testLoading || !settings.enabled}
                fullWidth
                sx={{ mb: 2 }}
              >
                {testLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
              </Button>

              <Button
                variant="outlined"
                startIcon={<SubscriptionsIcon />}
                onClick={() => setSubscriptionsDialog(true)}
                fullWidth
              >
                –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫ ({statistics?.total_subscriptions || 0})
              </Button>

              {testResult && (
                <Alert 
                  severity={testResult.includes('‚úÖ') ? 'success' : 'error'} 
                  sx={{ mt: 2 }}
                >
                  {testResult}
                </Alert>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Firebase/VAPID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
              avatar={<FirebaseIcon />}
            />
            <CardContent>
              <Alert severity="success" sx={{ mb: 2 }}>
                VAPID –∫–ª—é—á–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
              </Alert>
              
              <TextField
                fullWidth
                label="VAPID Public Key"
                value={settings.vapid_public_key || ''}
                onChange={(e) => handleSettingChange('vapid_public_key', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                helperText="–ü—É–±–ª–∏—á–Ω—ã–π VAPID –∫–ª—é—á –¥–ª—è Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Base64)"
              />
              
              <TextField
                fullWidth
                label="VAPID Private Key"
                value={settings.vapid_private_key || ''}
                onChange={(e) => handleSettingChange('vapid_private_key', e.target.value)}
                type="password"
                sx={{ mb: 2 }}
                size="small"
                helperText="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π VAPID –∫–ª—é—á (–±—É–¥–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)"
              />

              <Button
                variant="outlined"
                onClick={handleGenerateVapidKeys}
                sx={{ mb: 2 }}
                size="small"
                startIcon={<SettingsIcon />}
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VAPID –∫–ª—é—á–∏
              </Button>

              <Alert severity="info" sx={{ mb: 2, fontSize: '0.875rem' }}>
                üí° <strong>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</strong><br />
                <Box 
                  component="code" 
                  sx={{ 
                    backgroundColor: theme.palette.grey[800], 
                    color: theme.palette.common.white,
                    padding: '4px 8px', 
                    borderRadius: '4px',
                    fontFamily: 'monospace',
                    fontSize: '0.8rem',
                    display: 'inline-block',
                    my: 1
                  }}
                >
                  npx web-push generate-vapid-keys
                </Box><br />
                –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç–æ—è—â–∏—Ö VAPID –∫–ª—é—á–µ–π.
              </Alert>

              <Divider sx={{ my: 2 }} />
              
              <TextField
                fullWidth
                label="Firebase API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                value={settings.firebase_api_key || ''}
                onChange={(e) => handleSettingChange('firebase_api_key', e.target.value)}
                type="password"
                sx={{ mb: 2 }}
                size="small"
                helperText="–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Firebase Cloud Messaging"
              />
              
              <TextField
                fullWidth
                label="Firebase Project ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                value={settings.firebase_project_id || ''}
                onChange={(e) => handleSettingChange('firebase_project_id', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
              />
              
              <TextField
                fullWidth
                label="Firebase App ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                value={settings.firebase_app_id || ''}
                onChange={(e) => handleSettingChange('firebase_app_id', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
              />

              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π VAPID Public Key:
                </Typography>
                <TextField
                  fullWidth
                  value={settingsData?.push_settings?.vapid_public_key || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                  InputProps={{
                    readOnly: true,
                    style: { 
                      fontFamily: 'monospace', 
                      fontSize: '0.875rem',
                      backgroundColor: theme.palette.grey[50]
                    }
                  }}
                  size="small"
                  multiline
                  rows={2}
                  helperText="–¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è - —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Service Worker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="Service Worker —Å—Ç–∞—Ç—É—Å"
              avatar={<ServiceWorkerIcon />}
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">VAPID –Ω–∞—Å—Ç—Ä–æ–µ–Ω:</Typography>
                    {getStatusChip(serviceWorkerStatus?.vapid_configured || false, '–î–∞', '–ù–µ—Ç')}
                  </Box>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">SW —Ñ–∞–π–ª:</Typography>
                    {getStatusChip(serviceWorkerStatus?.service_worker_file_exists || false, '–ï—Å—Ç—å', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}
                  </Box>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">Manifest:</Typography>
                    {getStatusChip(serviceWorkerStatus?.manifest_configured || false, '–ù–∞—Å—Ç—Ä–æ–µ–Ω', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
                  </Box>
                </Grid>
              </Grid>

              {!serviceWorkerStatus?.vapid_configured && (
                <Alert severity="warning" sx={{ mt: 2 }}>
                  –î–ª—è —Ä–∞–±–æ—Ç—ã Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VAPID –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:
                  <br />‚Ä¢ VAPID_PUBLIC_KEY
                  <br />‚Ä¢ VAPID_PRIVATE_KEY
                  <br />‚Ä¢ VAPID_SUBJECT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </Alert>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫ */}
      <Dialog open={subscriptionsDialog} onClose={() => setSubscriptionsDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>Push –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</DialogTitle>
        <DialogContent>
          {subscriptionsLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
              <CircularProgress />
            </Box>
          ) : subscriptionsData?.subscriptions?.length ? (
            <List>
              {subscriptionsData.subscriptions.map((subscription) => (
                <ListItem key={subscription.id} divider>
                  <ListItemText
                    primary={`${subscription.user_name} (${subscription.user_email})`}
                    secondary={
                      <Box>
                        <Typography variant="caption" display="block">
                          {subscription.browser} ‚Ä¢ {subscription.status}
                        </Typography>
                        <Typography variant="caption" display="block">
                          –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subscription.notifications_sent} ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {subscription.success_rate}%
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {subscription.endpoint}
                        </Typography>
                      </Box>
                    }
                  />
                  <ListItemSecondaryAction>
                    <Chip
                      size="small"
                      label={subscription.status}
                      color={subscription.is_active ? 'success' : 'default'}
                    />
                  </ListItemSecondaryAction>
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography color="text.secondary" align="center" sx={{ p: 3 }}>
              –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSubscriptionsDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default PushSettingsPage; 