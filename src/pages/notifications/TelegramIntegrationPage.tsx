import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardHeader,
  Switch,
  FormControlLabel,
  TextField,
  Button,
  Alert,
  Chip,
  Grid,
  Divider,
  useTheme,
  CircularProgress,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import {
  Telegram as TelegramIcon,
  Settings as SettingsIcon,
  QrCode as QrCodeIcon,
  Send as SendIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Add as AddIcon,
  ExpandMore as ExpandMoreIcon,
  Code as CodeIcon,
  Message as MessageIcon,
  Group as GroupIcon,
  Person as PersonIcon,
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { getTablePageStyles } from '../../styles/components';

interface TelegramSettings {
  enabled: boolean;
  botToken: string;
  webhookUrl: string;
  adminChatId: string;
  testMode: boolean;
  autoSubscription: boolean;
  welcomeMessage: string;
  helpMessage: string;
  errorMessage: string;
}

interface TelegramSubscription {
  id: number;
  chatId: string;
  username: string;
  firstName: string;
  lastName: string;
  isActive: boolean;
  subscribedAt: string;
  notificationTypes: string[];
}

interface TelegramTemplate {
  id: number;
  name: string;
  type: 'booking_confirmation' | 'booking_reminder' | 'status_update' | 'welcome' | 'error';
  template: string;
  variables: string[];
  isActive: boolean;
}

export const TelegramIntegrationPage: React.FC = () => {
  const theme = useTheme();
  const { t } = useTranslation();
  const tablePageStyles = getTablePageStyles(theme);
  
  const [settings, setSettings] = useState<TelegramSettings>({
    enabled: false,
    botToken: '',
    webhookUrl: '',
    adminChatId: '',
    testMode: false,
    autoSubscription: true,
    welcomeMessage: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É! üöó\n\n–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏.',
    helpMessage: '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n/status - –°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏\n/unsubscribe - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É',
    errorMessage: '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.',
  });
  
  const [subscriptions, setSubscriptions] = useState<TelegramSubscription[]>([
    {
      id: 1,
      chatId: '123456789',
      username: 'user123',
      firstName: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä',
      lastName: '–ü–µ—Ç—Ä–µ–Ω–∫–æ',
      isActive: true,
      subscribedAt: '2024-01-15T10:30:00Z',
      notificationTypes: ['booking_confirmation', 'booking_reminder'],
    },
    {
      id: 2,
      chatId: '987654321',
      username: 'maria_k',
      firstName: '–ú–∞—Ä—ñ—è',
      lastName: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ',
      isActive: true,
      subscribedAt: '2024-01-20T14:15:00Z',
      notificationTypes: ['booking_confirmation', 'status_update'],
    },
  ]);
  
  const [templates, setTemplates] = useState<TelegramTemplate[]>([
    {
      id: 1,
      name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É',
      type: 'booking_confirmation',
      template: '‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüöó –ü–æ—Å–ª—É–≥–∞: {service}\n\n–û—á—ñ–∫—É—î–º–æ –≤–∞—Å!',
      variables: ['date', 'time', 'address', 'service'],
      isActive: true,
    },
    {
      id: 2,
      name: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å',
      type: 'booking_reminder',
      template: '‚è∞ –ù–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –≤–∞—à –∑–∞–ø–∏—Å –∑–∞–≤—Ç—Ä–∞!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\nüìç –ê–¥—Ä–µ—Å–∞: {address}\n\n–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!',
      variables: ['date', 'time', 'address'],
      isActive: true,
    },
    {
      id: 3,
      name: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É',
      type: 'status_update',
      template: 'üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É –∑–º—ñ–Ω–µ–Ω–æ: {status}\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\n\n{additional_info}',
      variables: ['status', 'date', 'time', 'additional_info'],
      isActive: true,
    },
  ]);
  
  const [loading, setLoading] = useState(false);
  const [testLoading, setTestLoading] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [testResult, setTestResult] = useState<string | null>(null);
  const [qrCodeDialog, setQrCodeDialog] = useState(false);
  const [templateDialog, setTemplateDialog] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<TelegramTemplate | null>(null);

  const handleSettingChange = (field: keyof TelegramSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    setLoading(true);
    setSaveSuccess(false);
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      // await saveTelegramSettings(settings);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTestMessage = async () => {
    setTestLoading(true);
    setTestResult(null);
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setTestResult('–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    } catch (error) {
      setTestResult(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${error}`);
    } finally {
      setTestLoading(false);
    }
  };

  const handleDeleteSubscription = (id: number) => {
    setSubscriptions(prev => prev.filter(sub => sub.id !== id));
  };

  const handleToggleSubscription = (id: number) => {
    setSubscriptions(prev => prev.map(sub => 
      sub.id === id ? { ...sub, isActive: !sub.isActive } : sub
    ));
  };

  const handleEditTemplate = (template: TelegramTemplate) => {
    setSelectedTemplate(template);
    setTemplateDialog(true);
  };

  const handleSaveTemplate = () => {
    if (selectedTemplate) {
      setTemplates(prev => prev.map(t => 
        t.id === selectedTemplate.id ? selectedTemplate : t
      ));
    }
    setTemplateDialog(false);
    setSelectedTemplate(null);
  };

  const getStatusChip = (status: boolean, trueLabel: string, falseLabel: string) => (
    <Chip
      icon={status ? <CheckIcon /> : <ErrorIcon />}
      label={status ? trueLabel : falseLabel}
      color={status ? 'success' : 'error'}
      size="small"
    />
  );

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <Box sx={tablePageStyles.pageContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box sx={tablePageStyles.headerContainer}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <TelegramIcon sx={{ fontSize: 32, color: '#0088cc' }} />
          <Typography variant="h4" sx={tablePageStyles.pageTitle}>
            Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
          </Typography>
        </Box>
        <Typography variant="body2" color="text.secondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
        </Typography>
      </Box>

      {saveSuccess && (
        <Alert severity="success" sx={{ mb: 3 }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="–°—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞"
              avatar={<SettingsIcon />}
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω:</Typography>
                    {getStatusChip(settings.enabled, '–ê–∫—Ç–∏–≤–µ–Ω', '–û—Ç–∫–ª—é—á–µ–Ω')}
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">Webhook:</Typography>
                    {getStatusChip(!!settings.webhookUrl, '–ù–∞—Å—Ç—Ä–æ–µ–Ω', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</Typography>
                    <Chip label={subscriptions.filter(s => s.isActive).length} size="small" />
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:</Typography>
                    {getStatusChip(settings.testMode, '–í–∫–ª—é—á–µ–Ω', '–û—Ç–∫–ª—é—á–µ–Ω')}
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
              avatar={<TelegramIcon />}
            />
            <CardContent>
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enabled}
                    onChange={(e) => handleSettingChange('enabled', e.target.checked)}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞"
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="Bot Token"
                value={settings.botToken}
                onChange={(e) => handleSettingChange('botToken', e.target.value)}
                type="password"
                sx={{ mb: 2 }}
                size="small"
                placeholder="1234567890:ABCDEFghijklmnopQRSTUVwxyz"
              />
              
              <TextField
                fullWidth
                label="Webhook URL"
                value={settings.webhookUrl}
                onChange={(e) => handleSettingChange('webhookUrl', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                placeholder="https://yourdomain.com/api/telegram/webhook"
              />
              
              <TextField
                fullWidth
                label="Admin Chat ID"
                value={settings.adminChatId}
                onChange={(e) => handleSettingChange('adminChatId', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                placeholder="123456789"
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.autoSubscription}
                    onChange={(e) => handleSettingChange('autoSubscription', e.target.checked)}
                  />
                }
                label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                sx={{ mb: 2 }}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.testMode}
                    onChange={(e) => handleSettingChange('testMode', e.target.checked)}
                  />
                }
                label="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
              />
            </CardContent>
          </Card>
        </Grid>

        {/* QR –∫–æ–¥ –∏ —Ç–µ—Å—Ç */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
              avatar={<QrCodeIcon />}
            />
            <CardContent>
              <Button
                variant="outlined"
                startIcon={<QrCodeIcon />}
                onClick={() => setQrCodeDialog(true)}
                fullWidth
                sx={{ mb: 2 }}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –±–æ—Ç–∞
              </Button>
              
              <Button
                variant="outlined"
                startIcon={testLoading ? <CircularProgress size={20} /> : <SendIcon />}
                onClick={handleTestMessage}
                disabled={testLoading || !settings.enabled || !settings.botToken}
                fullWidth
                sx={{ mb: 2 }}
              >
                {testLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </Button>

              {testResult && (
                <Alert 
                  severity={testResult.includes('—É—Å–ø—ñ—à–Ω–æ') ? 'success' : 'error'} 
                  sx={{ mb: 2 }}
                >
                  {testResult}
                </Alert>
              )}

              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞:
              </Typography>
              <Typography 
                variant="body2" 
                sx={{ 
                  p: 1, 
                  bgcolor: 'background.default', 
                  borderRadius: 1,
                  fontFamily: 'monospace',
                  wordBreak: 'break-all'
                }}
              >
                {settings.botToken ? `https://t.me/your_bot_name` : '–í–≤–µ–¥–∏—Ç–µ Bot Token'}
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã) */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="–°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫)"
              avatar={<MessageIcon />}
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    value={settings.welcomeMessage}
                    onChange={(e) => handleSettingChange('welcomeMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
                    value={settings.helpMessage}
                    onChange={(e) => handleSettingChange('helpMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                    value={settings.errorMessage}
                    onChange={(e) => handleSettingChange('errorMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title={`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${subscriptions.length})`}
              avatar={<GroupIcon />}
            />
            <CardContent sx={{ maxHeight: 400, overflow: 'auto' }}>
              <List dense>
                {subscriptions.map((subscription) => (
                  <ListItem key={subscription.id}>
                    <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    <ListItemText
                      primary={`${subscription.firstName} ${subscription.lastName}`}
                      secondary={
                        <Box>
                          <Typography variant="caption" display="block">
                            @{subscription.username} ‚Ä¢ {formatDate(subscription.subscribedAt)}
                          </Typography>
                          <Box sx={{ mt: 0.5 }}>
                            {subscription.notificationTypes.map((type) => (
                              <Chip
                                key={type}
                                label={type}
                                size="small"
                                sx={{ mr: 0.5, fontSize: '0.7rem', height: 20 }}
                              />
                            ))}
                          </Box>
                        </Box>
                      }
                    />
                    <ListItemSecondaryAction>
                      <Box sx={{ display: 'flex', gap: 0.5 }}>
                        <IconButton 
                          size="small"
                          onClick={() => handleToggleSubscription(subscription.id)}
                          color={subscription.isActive ? 'success' : 'default'}
                        >
                          <CheckIcon fontSize="small" />
                        </IconButton>
                        <IconButton 
                          size="small"
                          onClick={() => handleDeleteSubscription(subscription.id)}
                          color="error"
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    </ListItemSecondaryAction>
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"
              avatar={<CodeIcon />}
              action={
                <Button
                  startIcon={<AddIcon />}
                  onClick={() => setTemplateDialog(true)}
                  size="small"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              }
            />
            <CardContent sx={{ maxHeight: 400, overflow: 'auto' }}>
              {templates.map((template) => (
                <Accordion key={template.id} sx={{ mb: 1 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {template.name}
                      </Typography>
                      <Chip 
                        label={template.type} 
                        size="small" 
                        color={template.isActive ? 'success' : 'default'}
                      />
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Typography variant="caption" color="text.secondary" display="block" sx={{ mb: 1 }}>
                      –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {template.variables.join(', ')}
                    </Typography>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontFamily: 'monospace', 
                        bgcolor: 'background.default', 
                        p: 1, 
                        borderRadius: 1,
                        fontSize: '0.8rem',
                        whiteSpace: 'pre-wrap'
                      }}
                    >
                      {template.template}
                    </Typography>
                    <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>
                      <Button
                        size="small"
                        startIcon={<EditIcon />}
                        onClick={() => handleEditTemplate(template)}
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </Box>
                  </AccordionDetails>
                </Accordion>
              ))}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <Box sx={{ mt: 3, display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
        <Button
          variant="contained"
          onClick={handleSave}
          disabled={loading}
          startIcon={loading ? <CircularProgress size={20} /> : <SettingsIcon />}
        >
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </Button>
      </Box>

      {/* QR Code Dialog */}
      <Dialog open={qrCodeDialog} onClose={() => setQrCodeDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞</DialogTitle>
        <DialogContent>
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <Box
              sx={{
                width: 256,
                height: 256,
                bgcolor: 'background.default',
                borderRadius: 2,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2,
                border: 1,
                borderColor: 'divider'
              }}
            >
              <Typography variant="h6" color="text.secondary">
                QR –∫–æ–¥
              </Typography>
            </Box>
            <Typography variant="body2" color="text.secondary">
              –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </Typography>
            <Typography variant="body2" sx={{ mt: 1, fontFamily: 'monospace' }}>
              https://t.me/your_bot_name
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setQrCodeDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
        </DialogActions>
      </Dialog>

      {/* Template Dialog */}
      <Dialog open={templateDialog} onClose={() => setTemplateDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {selectedTemplate ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' : '–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
              value={selectedTemplate?.name || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, name: e.target.value} : null)}
              sx={{ mb: 2 }}
            />
            
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>–¢–∏–ø —à–∞–±–ª–æ–Ω–∞</InputLabel>
              <Select
                value={selectedTemplate?.type || ''}
                onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, type: e.target.value as any} : null)}
              >
                <MenuItem value="booking_confirmation">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</MenuItem>
                <MenuItem value="booking_reminder">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</MenuItem>
                <MenuItem value="status_update">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</MenuItem>
                <MenuItem value="welcome">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</MenuItem>
                <MenuItem value="error">–û—à–∏–±–∫–∞</MenuItem>
              </Select>
            </FormControl>
            
            <TextField
              fullWidth
              label="–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫)"
              value={selectedTemplate?.template || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, template: e.target.value} : null)}
              multiline
              rows={6}
              sx={{ mb: 2 }}
              placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {variable} –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö."
            />
            
            <TextField
              fullWidth
              label="–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              value={selectedTemplate?.variables.join(', ') || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, variables: e.target.value.split(',').map(v => v.trim())} : null)}
              placeholder="date, time, address, service"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setTemplateDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleSaveTemplate} variant="contained">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default TelegramIntegrationPage; 