import React, { useState, useEffect, useRef } from 'react';
import QRCode from 'qrcode';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardHeader,
  Switch,
  FormControlLabel,
  TextField,
  Button,
  Alert,
  Chip,
  Grid,
  Divider,
  useTheme,
  CircularProgress,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import {
  Telegram as TelegramIcon,
  Settings as SettingsIcon,
  QrCode as QrCodeIcon,
  Send as SendIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Add as AddIcon,
  ExpandMore as ExpandMoreIcon,
  Code as CodeIcon,
  Message as MessageIcon,
  Group as GroupIcon,
  Person as PersonIcon,
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { getTablePageStyles } from '../../styles/components';
import {
  useGetTelegramSettingsQuery,
  useUpdateTelegramSettingsMutation,
  useTestTelegramConnectionMutation,
  useSendTestMessageMutation,
  useSetWebhookMutation,
  useGetWebhookInfoQuery,
  useGetTelegramSubscriptionsQuery,
  useUpdateTelegramSubscriptionMutation,
  useDeleteTelegramSubscriptionMutation,
  type TelegramSettings as ApiTelegramSettings,
  type TelegramSubscription as ApiTelegramSubscription,
} from '../../api/telegramSettings.api';

interface TelegramSettings {
  enabled: boolean;
  botToken: string;
  botUsername: string;
  webhookUrl: string;
  adminChatId: string;
  testMode: boolean;
  autoSubscription: boolean;
  welcomeMessage: string;
  helpMessage: string;
  errorMessage: string;
}

interface TelegramSubscription {
  id: number;
  chatId: string;
  username: string;
  firstName: string;
  lastName: string;
  isActive: boolean;
  subscribedAt: string;
  notificationTypes: string[];
}

interface TelegramTemplate {
  id: number;
  name: string;
  type: 'booking_confirmation' | 'booking_reminder' | 'status_update' | 'welcome' | 'error';
  template: string;
  variables: string[];
  isActive: boolean;
}

export const TelegramIntegrationPage: React.FC = () => {
  const theme = useTheme();
  const { t } = useTranslation();
  const tablePageStyles = getTablePageStyles(theme);
  
  // API —Ö—É–∫–∏
  const { data: settingsData, isLoading: settingsLoading, error: settingsError } = useGetTelegramSettingsQuery();
  const { data: subscriptionsData, isLoading: subscriptionsLoading } = useGetTelegramSubscriptionsQuery({});
  const [updateSettings, { isLoading: updating }] = useUpdateTelegramSettingsMutation();
  const [testConnection, { isLoading: testLoading }] = useTestTelegramConnectionMutation();
  const [sendTestMessage] = useSendTestMessageMutation();
  const [setWebhook] = useSetWebhookMutation();
  const [updateSubscription] = useUpdateTelegramSubscriptionMutation();
  const [deleteSubscription] = useDeleteTelegramSubscriptionMutation();
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã
  const [settings, setSettings] = useState<TelegramSettings>({
    enabled: false,
    botToken: '',
    botUsername: '',
    webhookUrl: '',
    adminChatId: '',
    testMode: false,
    autoSubscription: true,
    welcomeMessage: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É! üöó\n\n–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏.',
    helpMessage: '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n/status - –°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏\n/unsubscribe - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É',
    errorMessage: '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.',
  });
  
  // –®–∞–±–ª–æ–Ω—ã (–ø–æ–∫–∞ –º–æ–∫–æ–≤—ã–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –ø–æ–∑–∂–µ)
  const [templates, setTemplates] = useState<TelegramTemplate[]>([
    {
      id: 1,
      name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É',
      type: 'booking_confirmation',
      template: '‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüöó –ü–æ—Å–ª—É–≥–∞: {service}\n\n–û—á—ñ–∫—É—î–º–æ –≤–∞—Å!',
      variables: ['date', 'time', 'address', 'service'],
      isActive: true,
    },
    {
      id: 2,
      name: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å',
      type: 'booking_reminder',
      template: '‚è∞ –ù–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –≤–∞—à –∑–∞–ø–∏—Å –∑–∞–≤—Ç—Ä–∞!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\nüìç –ê–¥—Ä–µ—Å–∞: {address}\n\n–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!',
      variables: ['date', 'time', 'address'],
      isActive: true,
    },
    {
      id: 3,
      name: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É',
      type: 'status_update',
      template: 'üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É –∑–º—ñ–Ω–µ–Ω–æ: {status}\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –ß–∞—Å: {time}\n\n{additional_info}',
      variables: ['status', 'date', 'time', 'additional_info'],
      isActive: true,
    },
  ]);
  
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [testResult, setTestResult] = useState<string | null>(null);
  const [qrCodeDialog, setQrCodeDialog] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');
  const [templateDialog, setTemplateDialog] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<TelegramTemplate | null>(null);
  const qrCanvasRef = useRef<HTMLCanvasElement>(null);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (settingsData?.telegram_settings) {
      const apiSettings = settingsData.telegram_settings;
      setSettings({
        enabled: apiSettings.enabled,
        botToken: apiSettings.bot_token || '',
        botUsername: apiSettings.bot_username || 'tire_service_ua_bot',
        webhookUrl: apiSettings.webhook_url || '',
        adminChatId: apiSettings.admin_chat_id || '',
        testMode: apiSettings.test_mode,
        autoSubscription: apiSettings.auto_subscription,
        welcomeMessage: apiSettings.welcome_message,
        helpMessage: apiSettings.help_message,
        errorMessage: apiSettings.error_message,
      });
    }
  }, [settingsData]);

  const handleSettingChange = (field: keyof TelegramSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
  const generateQRCode = async () => {
    const botUrl = settings.botUsername ? `https://t.me/${settings.botUsername}` : 'https://t.me/your_bot_name';
    setQrCodeUrl(botUrl);
    
    if (qrCanvasRef.current) {
      try {
        await QRCode.toCanvas(qrCanvasRef.current, botUrl, {
          width: 256,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error);
      }
    }
  };

  const handleSave = async () => {
    setSaveSuccess(false);
    
    try {
      await updateSettings({
        bot_token: settings.botToken,
        webhook_url: settings.webhookUrl,
        admin_chat_id: settings.adminChatId,
        enabled: settings.enabled,
        test_mode: settings.testMode,
        auto_subscription: settings.autoSubscription,
        welcome_message: settings.welcomeMessage,
        help_message: settings.helpMessage,
        error_message: settings.errorMessage,
      }).unwrap();
      
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  const handleTestMessage = async () => {
    setTestResult(null);
    
    try {
      const result = await testConnection().unwrap();
      
      if (result.success) {
        setTestResult(`‚úÖ ${result.message}`);
        if (result.bot_info) {
          setTestResult(prev => `${prev}\nü§ñ –ë–æ—Ç: ${result.bot_info?.first_name} (@${result.bot_info?.username})`);
        }
      } else {
        setTestResult(`‚ùå ${result.message}`);
      }
    } catch (error: any) {
      setTestResult(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.data?.message || error.message}`);
    }
  };

  const handleDeleteSubscription = async (id: number) => {
    try {
      await deleteSubscription(id).unwrap();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  };

  const handleToggleSubscription = async (id: number, currentActive: boolean) => {
    try {
      await updateSubscription({
        id,
        data: { is_active: !currentActive }
      }).unwrap();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  };

  const handleEditTemplate = (template: TelegramTemplate) => {
    setSelectedTemplate(template);
    setTemplateDialog(true);
  };

  const handleSaveTemplate = () => {
    if (selectedTemplate) {
      setTemplates(prev => prev.map(t => 
        t.id === selectedTemplate.id ? selectedTemplate : t
      ));
    }
    setTemplateDialog(false);
    setSelectedTemplate(null);
  };

  const getStatusChip = (status: boolean, trueLabel: string, falseLabel: string) => (
    <Chip
      icon={status ? <CheckIcon /> : <ErrorIcon />}
      label={status ? trueLabel : falseLabel}
      color={status ? 'success' : 'error'}
      size="small"
    />
  );

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (settingsLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (settingsError) {
    return (
      <Box sx={tablePageStyles.pageContainer}>
        <Alert severity="error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={tablePageStyles.pageContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box sx={tablePageStyles.headerContainer}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <TelegramIcon sx={{ fontSize: 32, color: '#0088cc' }} />
          <Typography variant="h4" sx={tablePageStyles.pageTitle}>
            Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
          </Typography>
        </Box>
        <Typography variant="body2" color="text.secondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
        </Typography>
      </Box>

      {saveSuccess && (
        <Alert severity="success" sx={{ mb: 3 }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="–°—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞"
              avatar={<SettingsIcon />}
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</Typography>
                    <Chip 
                      label={settingsData?.telegram_settings?.status_text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} 
                      color={settingsData?.telegram_settings?.status_color as any || 'default'} 
                      size="small" 
                    />
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">Webhook:</Typography>
                    {getStatusChip(!!settings.webhookUrl, '–ù–∞—Å—Ç—Ä–æ–µ–Ω', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</Typography>
                    <Chip label={settingsData?.statistics?.active_subscriptions || 0} size="small" />
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">–ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:</Typography>
                    {getStatusChip(settingsData?.telegram_settings?.ready_for_production || false, '–î–∞', '–ù–µ—Ç')}
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
              avatar={<TelegramIcon />}
            />
            <CardContent>
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enabled}
                    onChange={(e) => handleSettingChange('enabled', e.target.checked)}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞"
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="Bot Token"
                value={settings.botToken}
                onChange={(e) => handleSettingChange('botToken', e.target.value)}
                type="password"
                sx={{ mb: 2 }}
                size="small"
                placeholder="1234567890:ABCDEFghijklmnopQRSTUVwxyz"
              />
              
              <TextField
                fullWidth
                label="Webhook URL"
                value={settings.webhookUrl}
                onChange={(e) => handleSettingChange('webhookUrl', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                placeholder="https://yourdomain.com/api/telegram/webhook"
              />
              
              <TextField
                fullWidth
                label="Admin Chat ID"
                value={settings.adminChatId}
                onChange={(e) => handleSettingChange('adminChatId', e.target.value)}
                sx={{ mb: 2 }}
                size="small"
                placeholder="123456789"
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.autoSubscription}
                    onChange={(e) => handleSettingChange('autoSubscription', e.target.checked)}
                  />
                }
                label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                sx={{ mb: 2 }}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.testMode}
                    onChange={(e) => handleSettingChange('testMode', e.target.checked)}
                  />
                }
                label="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
              />
            </CardContent>
          </Card>
        </Grid>

        {/* QR –∫–æ–¥ –∏ —Ç–µ—Å—Ç */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
              avatar={<QrCodeIcon />}
            />
            <CardContent>
              <Button
                variant="outlined"
                startIcon={<QrCodeIcon />}
                onClick={() => {
                  setQrCodeDialog(true);
                  setTimeout(generateQRCode, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ canvas
                }}
                fullWidth
                sx={{ mb: 2 }}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –±–æ—Ç–∞
              </Button>
              
              <Button
                variant="outlined"
                startIcon={testLoading ? <CircularProgress size={20} /> : <SendIcon />}
                onClick={handleTestMessage}
                disabled={testLoading || !settings.enabled || !settings.botToken}
                fullWidth
                sx={{ mb: 2 }}
              >
                {testLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </Button>

              {testResult && (
                <Alert 
                  severity={testResult.includes('—É—Å–ø—ñ—à–Ω–æ') ? 'success' : 'error'} 
                  sx={{ mb: 2 }}
                >
                  {testResult}
                </Alert>
              )}

              <TextField
                fullWidth
                label="–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞"
                value={settings.botUsername ? `https://t.me/${settings.botUsername}` : ''}
                onChange={(e) => {
                  const url = e.target.value;
                  const username = url.replace('https://t.me/', '');
                  handleSettingChange('botUsername', username);
                }}
                sx={{ mb: 2 }}
                size="small"
                placeholder="https://t.me/your_bot_name"
                helperText="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ (–±–µ–∑ @) –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É"
              />
            </CardContent>
          </Card>
        </Grid>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã) */}
        <Grid item xs={12}>
          <Card>
            <CardHeader 
              title="–°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫)"
              avatar={<MessageIcon />}
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    value={settings.welcomeMessage}
                    onChange={(e) => handleSettingChange('welcomeMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
                    value={settings.helpMessage}
                    onChange={(e) => handleSettingChange('helpMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                    value={settings.errorMessage}
                    onChange={(e) => handleSettingChange('errorMessage', e.target.value)}
                    multiline
                    rows={4}
                    size="small"
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title={`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${subscriptionsData?.data?.length || 0})`}
              avatar={<GroupIcon />}
            />
            <CardContent sx={{ maxHeight: 400, overflow: 'auto' }}>
              {subscriptionsLoading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', py: 2 }}>
                  <CircularProgress />
                </Box>
              ) : (
                <List dense>
                  {subscriptionsData?.data?.map((subscription: any) => (
                    <ListItem key={subscription.id}>
                      <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />
                      <ListItemText
                        primary={`${subscription.first_name || ''} ${subscription.last_name || ''}`.trim() || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
                        secondary={
                          <Box>
                            <Typography variant="caption" display="block">
                              @{subscription.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'} ‚Ä¢ {formatDate(subscription.created_at)}
                            </Typography>
                            <Box sx={{ mt: 0.5 }}>
                              <Chip
                                label={subscription.status}
                                size="small"
                                color={subscription.is_active ? 'success' : 'default'}
                                sx={{ mr: 0.5, fontSize: '0.7rem', height: 20 }}
                              />
                              <Chip
                                label={subscription.language_code}
                                size="small"
                                sx={{ mr: 0.5, fontSize: '0.7rem', height: 20 }}
                              />
                            </Box>
                          </Box>
                        }
                      />
                      <ListItemSecondaryAction>
                        <Box sx={{ display: 'flex', gap: 0.5 }}>
                          <IconButton 
                            size="small"
                            onClick={() => handleToggleSubscription(subscription.id, subscription.is_active)}
                            color={subscription.is_active ? 'success' : 'default'}
                          >
                            <CheckIcon fontSize="small" />
                          </IconButton>
                          <IconButton 
                            size="small"
                            onClick={() => handleDeleteSubscription(subscription.id)}
                            color="error"
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Box>
                    </ListItemSecondaryAction>
                  </ListItem>
                ))}
              </List>
              )}
              
              {!subscriptionsLoading && (!subscriptionsData?.data || subscriptionsData.data.length === 0) && (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                  –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                </Typography>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader 
              title="–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"
              avatar={<CodeIcon />}
              action={
                <Button
                  startIcon={<AddIcon />}
                  onClick={() => setTemplateDialog(true)}
                  size="small"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              }
            />
            <CardContent sx={{ maxHeight: 400, overflow: 'auto' }}>
              {templates.map((template) => (
                <Accordion key={template.id} sx={{ mb: 1 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {template.name}
                      </Typography>
                      <Chip 
                        label={template.type} 
                        size="small" 
                        color={template.isActive ? 'success' : 'default'}
                      />
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Typography variant="caption" color="text.secondary" display="block" sx={{ mb: 1 }}>
                      –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {template.variables.join(', ')}
                    </Typography>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontFamily: 'monospace', 
                        bgcolor: 'background.default', 
                        p: 1, 
                        borderRadius: 1,
                        fontSize: '0.8rem',
                        whiteSpace: 'pre-wrap'
                      }}
                    >
                      {template.template}
                    </Typography>
                    <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>
                      <Button
                        size="small"
                        startIcon={<EditIcon />}
                        onClick={() => handleEditTemplate(template)}
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </Box>
                  </AccordionDetails>
                </Accordion>
              ))}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <Box sx={{ mt: 3, display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
        <Button
          variant="contained"
          onClick={handleSave}
          disabled={updating}
          startIcon={updating ? <CircularProgress size={20} /> : <SettingsIcon />}
        >
          {updating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </Button>
      </Box>

      {/* QR Code Dialog */}
      <Dialog open={qrCodeDialog} onClose={() => setQrCodeDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞</DialogTitle>
        <DialogContent>
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <Box
              sx={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2
              }}
            >
              <canvas 
                ref={qrCanvasRef}
                style={{ 
                  border: '1px solid #ddd',
                  borderRadius: '8px'
                }}
              />
            </Box>
            <Typography variant="body2" color="text.secondary">
              –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </Typography>
            <Typography variant="body2" sx={{ mt: 1, fontFamily: 'monospace' }}>
              {qrCodeUrl || (settings.botUsername ? `https://t.me/${settings.botUsername}` : 'https://t.me/your_bot_name')}
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setQrCodeDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
        </DialogActions>
      </Dialog>

      {/* Template Dialog */}
      <Dialog open={templateDialog} onClose={() => setTemplateDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {selectedTemplate ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' : '–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
              value={selectedTemplate?.name || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, name: e.target.value} : null)}
              sx={{ mb: 2 }}
            />
            
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>–¢–∏–ø —à–∞–±–ª–æ–Ω–∞</InputLabel>
              <Select
                value={selectedTemplate?.type || ''}
                onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, type: e.target.value as any} : null)}
              >
                <MenuItem value="booking_confirmation">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</MenuItem>
                <MenuItem value="booking_reminder">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</MenuItem>
                <MenuItem value="status_update">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</MenuItem>
                <MenuItem value="welcome">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</MenuItem>
                <MenuItem value="error">–û—à–∏–±–∫–∞</MenuItem>
              </Select>
            </FormControl>
            
            <TextField
              fullWidth
              label="–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫)"
              value={selectedTemplate?.template || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, template: e.target.value} : null)}
              multiline
              rows={6}
              sx={{ mb: 2 }}
              placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {variable} –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö."
            />
            
            <TextField
              fullWidth
              label="–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              value={selectedTemplate?.variables.join(', ') || ''}
              onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, variables: e.target.value.split(',').map(v => v.trim())} : null)}
              placeholder="date, time, address, service"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setTemplateDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleSaveTemplate} variant="contained">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default TelegramIntegrationPage; 