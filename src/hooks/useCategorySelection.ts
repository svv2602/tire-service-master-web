import { useState, useMemo, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useGetServicePostsQuery } from '../api/servicePoints.api';
import { useGetServiceCategoriesQuery } from '../api/serviceCategories.api';
import { ServiceCategory } from '../components/ui/CategorySelectionModal';
import { ServicePoint, ServicePost } from '../types/models';

export interface ServicePointForCategorySelection {
  id: number;
  name: string;
  city?: {
    id: number;
    name: string;
  };
}

export interface UseCategorySelectionReturn {
  isModalOpen: boolean;
  selectedServicePoint: ServicePointForCategorySelection | null;
  availableCategories: ServiceCategory[];
  isLoadingCategories: boolean;
  openCategorySelection: (servicePoint: ServicePointForCategorySelection) => void;
  closeCategorySelection: () => void;
  handleCategorySelect: (category: ServiceCategory) => void;
}

export const useCategorySelection = (): UseCategorySelectionReturn => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedServicePoint, setSelectedServicePoint] = useState<ServicePointForCategorySelection | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const { data: servicePostsData, isLoading: isLoadingPosts } = useGetServicePostsQuery(
    selectedServicePoint?.id.toString() || '',
    { skip: !selectedServicePoint?.id }
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
  const { data: categoriesResponse } = useGetServiceCategoriesQuery({});

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ª—É–≥)
  const availableCategories = useMemo(() => {
    if (!servicePostsData || !categoriesResponse?.data) return [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
    const activeCategoryIds = new Set<number>();
    servicePostsData.forEach((post: ServicePost) => {
      if (post.is_active && post.service_category_id) {
        activeCategoryIds.add(post.service_category_id);
      }
    });
    
    console.log('üîß –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤:', Array.from(activeCategoryIds));
    
    const categoriesMap = new Map();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    Array.from(activeCategoryIds).forEach(categoryId => {
      const categoryInfo = categoriesResponse.data.find(cat => cat.id === categoryId);
      if (categoryInfo) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const postsCount = servicePostsData.filter(
          (post: ServicePost) => post.is_active && post.service_category_id === categoryId
        ).length;
        
        categoriesMap.set(categoryId, {
          id: categoryId,
          name: categoryInfo.name,
          description: categoryInfo.description,
          services_count: postsCount,
          services: []
        });
      }
    });
    
    return Array.from(categoriesMap.values()).sort((a, b) => a.name.localeCompare(b.name));
  }, [servicePostsData, categoriesResponse?.data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const openCategorySelection = useCallback((servicePoint: ServicePointForCategorySelection) => {
    console.log('üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è:', servicePoint);
    setSelectedServicePoint(servicePoint);
    setIsModalOpen(true);
  }, []);

  const closeCategorySelection = useCallback(() => {
    setIsModalOpen(false);
    setSelectedServicePoint(null);
  }, []);

  const handleCategorySelect = useCallback((category: ServiceCategory) => {
    if (!selectedServicePoint) return;
    
    console.log('üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:', category);
    console.log('üìç –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏:', selectedServicePoint);
    
    const navigationData = { 
      servicePointId: selectedServicePoint.id,
      cityId: selectedServicePoint.city?.id,
      cityName: selectedServicePoint.city?.name,
      service_category_id: category.id,
      step1Completed: true, // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
      startFromDateTimeStep: true // –§–ª–∞–≥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    };
    
    console.log('üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ /client/booking/new-with-availability —Å –¥–∞–Ω–Ω—ã–º–∏:', navigationData);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–∫ –≤ ServicePointDetailPage)
    navigate('/client/booking', {
      state: navigationData
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeCategorySelection();
  }, [selectedServicePoint, navigate, closeCategorySelection]);



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤
  useEffect(() => {
    if (selectedServicePoint && !isLoadingPosts) {
      console.log('üìã –ü–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Ç–æ—á–∫–∏:', selectedServicePoint.name, {
        categoriesCount: availableCategories.length,
        categories: availableCategories.map(c => c.name)
      });
      
      if (availableCategories.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –¥–ª—è —Ç–æ—á–∫–∏:', selectedServicePoint.name);
        // –í—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        setIsModalOpen(true);
      } else if (availableCategories.length === 1) {
        console.log('üìç –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥:', availableCategories[0]);
        handleCategorySelect(availableCategories[0]);
        return;
      } else {
        // –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
        console.log('üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        setIsModalOpen(true);
      }
    }
  }, [selectedServicePoint, availableCategories, isLoadingPosts, handleCategorySelect]);

  return {
    isModalOpen,
    selectedServicePoint,
    availableCategories,
    isLoadingCategories: isLoadingPosts,
    openCategorySelection,
    closeCategorySelection,
    handleCategorySelect
  };
}; 