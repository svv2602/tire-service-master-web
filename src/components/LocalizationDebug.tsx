import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Box, Typography, Button, Card, CardContent, Alert } from '@mui/material';
import { useLocalizedName } from '../utils/localizationHelpers';

const LocalizationDebug: React.FC = () => {
  const { i18n } = useTranslation();
  const getLocalizedName = useLocalizedName();
  const [debugInfo, setDebugInfo] = useState<any>({});

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
  const testCity = {
    id: 67,
    name: "–ö–∏—ó–≤",
    name_ru: "–ö–∏–µ–≤", 
    name_uk: "–ö–∏—ó–≤"
  };

  const updateDebugInfo = () => {
    const info = {
      i18n_language: i18n.language,
      localStorage_i18nextLng: localStorage.getItem('i18nextLng'),
      navigator_language: navigator.language,
      localizedName_result: getLocalizedName(testCity),
      expected_ru: '–ö–∏–µ–≤',
      expected_uk: '–ö–∏—ó–≤'
    };
    setDebugInfo(info);
    console.log('üîç Debug info:', info);
  };

  useEffect(() => {
    updateDebugInfo();
  }, [i18n.language]);

  const changeLanguage = async (lang: string) => {
    await i18n.changeLanguage(lang);
    setTimeout(updateDebugInfo, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };

  const isCorrect = () => {
    if (debugInfo.i18n_language === 'ru') {
      return debugInfo.localizedName_result === debugInfo.expected_ru;
    } else if (debugInfo.i18n_language === 'uk') {
      return debugInfo.localizedName_result === debugInfo.expected_uk;
    }
    return false;
  };

  return (
    <Box sx={{ p: 3, maxWidth: 800 }}>
      <Typography variant="h4" gutterBottom>
        üåç –û—Ç–ª–∞–¥–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
      </Typography>

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:
          </Typography>
          <Typography variant="body2">
            ‚Ä¢ name: "{testCity.name}"<br/>
            ‚Ä¢ name_ru: "{testCity.name_ru}"<br/>
            ‚Ä¢ name_uk: "{testCity.name_uk}"
          </Typography>
        </CardContent>
      </Card>

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–µ:
          </Typography>
          <Typography variant="body2">
            ‚Ä¢ i18n.language: "{debugInfo.i18n_language}"<br/>
            ‚Ä¢ localStorage.getItem('i18nextLng'): "{debugInfo.localStorage_i18nextLng}"<br/>
            ‚Ä¢ navigator.language: "{debugInfo.navigator_language}"
          </Typography>
        </CardContent>
      </Card>

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:
          </Typography>
          <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
            –†–µ–∑—É–ª—å—Ç–∞—Ç: "{debugInfo.localizedName_result}"
          </Typography>
          <Typography variant="body2">
            –û–∂–∏–¥–∞–µ–º—ã–π –¥–ª—è ru: "{debugInfo.expected_ru}"<br/>
            –û–∂–∏–¥–∞–µ–º—ã–π –¥–ª—è uk: "{debugInfo.expected_uk}"
          </Typography>
          
          <Alert severity={isCorrect() ? 'success' : 'error'} sx={{ mt: 2 }}>
            {isCorrect() ? '‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}
          </Alert>
        </CardContent>
      </Card>

      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
        <Button 
          variant="contained" 
          onClick={() => changeLanguage('ru')}
          color={debugInfo.i18n_language === 'ru' ? 'primary' : 'secondary'}
        >
          –†—É—Å—Å–∫–∏–π
        </Button>
        <Button 
          variant="contained" 
          onClick={() => changeLanguage('uk')}
          color={debugInfo.i18n_language === 'uk' ? 'primary' : 'secondary'}
        >
          –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        </Button>
        <Button variant="outlined" onClick={updateDebugInfo}>
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </Box>
    </Box>
  );
};

export default LocalizationDebug; 