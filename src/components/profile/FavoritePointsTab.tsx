import React, { useState, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'react-redux';
import { useLocalizedName } from '../../utils/localizationHelpers';
import {
  Box,
  Typography,
  Grid,
  Alert,
  CircularProgress,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  useTheme,
  Card,
  CardContent,
  CardActionArea,
  IconButton
} from '@mui/material';
import {
  FavoriteBorder as FavoriteBorderIcon,
  BookOnline as BookOnlineIcon,
  Refresh as RefreshIcon,
  Build as BuildIcon,
  CalendarToday as CalendarIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ –∏ API
import { RootState } from '../../store';
import { useGetMyFavoritePointsQuery, useRemoveFromMyFavoritesMutation } from '../../api/favoritePoints.api';
import { ServicePointCard, ServicePointData } from '../ui/ServicePointCard';
import { useGetServicePostsQuery } from '../../api/servicePoints.api';
import { useGetServiceCategoriesQuery } from '../../api/serviceCategories.api';
import { ServicePost } from '../../types/models';

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import { getThemeColors, getButtonStyles } from '../../styles';

interface FavoritePointsTabProps {
  onNotify: (message: string, type: 'success' | 'error' | 'warning' | 'info') => void;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
interface ServiceCategory {
  id: number;
  name: string;
  description?: string;
  services: any[];
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const FavoritePointCard: React.FC<{
  favoritePoint: any;
  onViewDetails: (servicePoint: ServicePointData) => void;
  onBook: (servicePoint: ServicePointData) => void;
  onRemove: (servicePoint: ServicePointData) => void;
}> = ({ favoritePoint, onViewDetails, onBook, onRemove }) => {
  const servicePointData = convertToServicePointData(favoritePoint);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const { data: servicePostsData, isLoading: isLoadingPosts } = useGetServicePostsQuery(
    servicePointData.id.toString()
  );
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
  const { data: categoriesResponse } = useGetServiceCategoriesQuery({});

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
  const availableCategories = useMemo(() => {
    if (!servicePostsData || !categoriesResponse?.data) return [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
    const activeCategoryIds = new Set<number>();
    servicePostsData.forEach((post: ServicePost) => {
      if (post.is_active && post.service_category_id) {
        activeCategoryIds.add(post.service_category_id);
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    const categoriesMap = new Map();
    Array.from(activeCategoryIds).forEach(categoryId => {
      const categoryInfo = categoriesResponse.data.find(cat => cat.id === categoryId);
      if (categoryInfo) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const postsCount = servicePostsData.filter(
          (post: ServicePost) => post.is_active && post.service_category_id === categoryId
        ).length;
        
        categoriesMap.set(categoryId, {
          id: categoryId,
          name: categoryInfo.name,
          description: categoryInfo.description,
          services_count: postsCount // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —É—Å–ª—É–≥
        });
      }
    });
    
    return Array.from(categoriesMap.values()).sort((a, b) => a.name.localeCompare(b.name));
  }, [servicePostsData, categoriesResponse?.data]);

  return (
    <ServicePointCard
      servicePoint={servicePointData}
      variant="compact"
      onViewDetails={onViewDetails}
      onBook={onBook}
      showDetailsLink={true}
      showBookButton={true}
      showFavoriteButton={true}
      categories={availableCategories}
      isLoadingCategories={isLoadingPosts}
    />
  );
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–Ω–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const getLocalizedCityName = (city: any) => {
  const language = localStorage.getItem('i18nextLng') || 'ru';
  if (language === 'uk') {
    return city.name_uk || city.name_ru || city.name || '';
  } else {
    return city.name_ru || city.name_uk || city.name || '';
  }
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö API –≤ —Ñ–æ—Ä–º–∞—Ç ServicePointData
const convertToServicePointData = (favoritePoint: any): ServicePointData => {
  const servicePoint = favoritePoint.service_point || favoritePoint;
  
  return {
    id: servicePoint.id,
    name: servicePoint.name,
    address: servicePoint.address,
    description: servicePoint.description || '',
    city: servicePoint.city ? {
      id: servicePoint.city.id,
      name: getLocalizedCityName(servicePoint.city),
      region: servicePoint.city.region
    } : undefined,
    partner: servicePoint.partner ? {
      id: servicePoint.partner.id,
      name: servicePoint.partner.name
    } : undefined,
    contact_phone: servicePoint.contact_phone || '',
    average_rating: parseFloat(servicePoint.average_rating?.toString() || '0'),
    reviews_count: servicePoint.reviews_count || 0,
    work_status: servicePoint.work_status || 'working',
    photos: (servicePoint.photos || []).map((photo: any) => ({
      id: photo.id,
      url: photo.url,
      description: photo.description || '',
      is_main: photo.is_main || false,
      sort_order: photo.sort_order || 0
    }))
  };
};

const FavoritePointsTab: React.FC<FavoritePointsTabProps> = ({ onNotify }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const buttonStyles = getButtonStyles(theme, 'primary');
  const navigate = useNavigate();
  
  // Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { user } = useSelector((state: RootState) => state.auth);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [pointToDelete, setPointToDelete] = useState<any>(null);

  // API —Ö—É–∫–∏
  const { 
    data: favoritePointsData, 
    isLoading, 
    error, 
    refetch 
  } = useGetMyFavoritePointsQuery();
  
  const [removeFromFavorites, { isLoading: isRemoving }] = useRemoveFromMyFavoritesMutation();
  


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleViewDetails = (servicePointData: ServicePointData) => {
    navigate(`/client/service-point/${servicePointData.id}`);
  };

  const handleBookService = (servicePointData: ServicePointData) => {
    // –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ ServicePointCard
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    console.log('üéØ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ServicePointCard –¥–ª—è:', servicePointData.name);
  };



  const handleRemoveFromFavorites = (servicePointData: ServicePointData) => {
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
    const favoritePoint = favoritePointsData?.find((fp: any) => 
      (fp.service_point?.id || fp.id) === servicePointData.id
    );
    
    if (favoritePoint) {
      setPointToDelete(favoritePoint);
      setDeleteDialogOpen(true);
    }
  };

  const confirmRemoveFromFavorites = async () => {
    if (!pointToDelete || !user?.client_id) return;

    try {
      await removeFromFavorites(pointToDelete.id).unwrap();

      onNotify(t('forms.profile.favoritePoints.removedSuccess'), 'success');
      setDeleteDialogOpen(false);
      setPointToDelete(null);
      refetch(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      onNotify(t('forms.profile.favoritePoints.removeError'), 'error');
    }
  };

  const handleRefresh = () => {
    refetch();
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ py: 2 }}>
        <Alert 
          severity="error" 
          action={
            <Button 
              color="inherit" 
              size="small" 
              onClick={handleRefresh}
              startIcon={<RefreshIcon />}
            >
              {t('common.retry')}
            </Button>
          }
        >
          {t('forms.profile.favoritePoints.loadError')}
        </Alert>
      </Box>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
  if (!favoritePointsData || favoritePointsData.length === 0) {
    return (
      <Box sx={{ py: 4, textAlign: 'center' }}>
        <FavoriteBorderIcon 
          sx={{ 
            fontSize: 64, 
            color: colors.textSecondary, 
            mb: 2 
          }} 
        />
        <Typography variant="h6" sx={{ color: colors.textSecondary, mb: 2 }}>
          {t('forms.profile.favoritePoints.noFavorites')}
        </Typography>
        <Typography variant="body2" sx={{ color: colors.textSecondary, mb: 3 }}>
          {t('forms.profile.favoritePoints.noFavoritesDescription')}
        </Typography>
        <Button
          variant="contained"
          startIcon={<BookOnlineIcon />}
          onClick={() => navigate('/client/services')}
          sx={buttonStyles}
        >
          {t('forms.profile.favoritePoints.browseServices')}
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ py: 2 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h6" sx={{ color: colors.textPrimary }}>
          {t('forms.profile.favoritePoints.title')} ({favoritePointsData.length})
        </Typography>
        <Button
          variant="outlined"
          startIcon={<RefreshIcon />}
          onClick={handleRefresh}
          disabled={isLoading}
        >
          {t('common.refresh')}
        </Button>
      </Box>

      {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ */}
      <Grid container spacing={3}>
        {favoritePointsData.map((favoritePoint: any) => (
          <Grid item xs={12} md={6} lg={4} key={favoritePoint.id}>
            <FavoritePointCard
              favoritePoint={favoritePoint}
              onViewDetails={handleViewDetails}
              onBook={handleBookService}
              onRemove={handleRemoveFromFavorites}
            />
          </Grid>
        ))}
      </Grid>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <Dialog 
        open={deleteDialogOpen} 
        onClose={() => setDeleteDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {t('forms.profile.favoritePoints.confirmRemoveTitle')}
        </DialogTitle>
        <DialogContent>
          <Typography>
            {t('forms.profile.favoritePoints.confirmRemoveMessage', {
              name: pointToDelete?.service_point?.name || pointToDelete?.name
            })}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setDeleteDialogOpen(false)}
            disabled={isRemoving}
          >
            {t('common.cancel')}
          </Button>
          <Button 
            onClick={confirmRemoveFromFavorites}
            color="error"
            variant="contained"
            disabled={isRemoving}
          >
            {isRemoving ? t('common.removing') : t('common.remove')}
          </Button>
        </DialogActions>
      </Dialog>


    </Box>
  );
};

export default FavoritePointsTab; 