import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Typography,
  FormControl,
  InputLabel,
  Grid,
  CircularProgress,
  Fade,
  Divider,
  IconButton,
  useTheme,
  Alert
} from '@mui/material';
import {
  Save as SaveIcon,
  Publish as PublishIcon,
  Preview as PreviewIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Add as AddIcon,
  ArrowBack as ArrowBackIcon,
  Image as ImageIcon,
  Link as LinkIcon,
  Label as LabelIcon,
  Search as SearchIcon,
  Visibility as VisibilityIcon,
  Settings as SettingsIcon
} from '@mui/icons-material';

import { useArticleCategories, useArticleActions } from '../../hooks/useArticles';
import type { Article, ArticleSummary, ArticleFormData, CreateArticleRequest } from '../../types/articles';
import { ARTICLE_STATUS_LABELS, ARTICLE_STATUSES } from '../../types/articles';
import RichTextEditor from '../common/RichTextEditor';

// –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∏–ª–µ–π
import { 
  getCardStyles, 
  getButtonStyles, 
  getTextFieldStyles,
  getFormStyles,
  getChipStyles,
  SIZES,
  getThemeColors
} from '../../styles';

// –ò–º–ø–æ—Ä—Ç—ã UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { TextField } from '../ui/TextField';
import { Button } from '../ui/Button';
import { Select } from '../ui/Select';
import { Switch } from '../ui/Switch';
import { Tabs } from '../ui/Tabs';
import { Chip } from '../ui/Chip';

interface ArticleFormProps {
  article?: Article | ArticleSummary;
  mode: 'create' | 'edit';
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {
  return (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}
    </div>
  );
};

const ArticleForm: React.FC<ArticleFormProps> = ({ article, mode }) => {
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = getThemeColors(theme);
  const { categories } = useArticleCategories();
  const { createArticle, updateArticle, loading } = useArticleActions();

  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
  const cardStyles = getCardStyles(theme, 'primary');
  const buttonStyles = getButtonStyles(theme, 'primary');
  const secondaryButtonStyles = getButtonStyles(theme, 'secondary');
  const textFieldStyles = getTextFieldStyles(theme, 'filled');
  const formStyles = getFormStyles(theme);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–æ–≤
  const [activeTab, setActiveTab] = useState(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<ArticleFormData>({
    title: '',
    content: '',
    excerpt: '',
    category: '',
    status: ARTICLE_STATUSES.DRAFT,
    featured: false,
    meta_title: '',
    meta_description: '',
    featured_image_url: '',
    allow_comments: true,
    tags: [],
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [previewMode, setPreviewMode] = useState(false);
  const [tagInput, setTagInput] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (mode === 'edit' && article) {
      setFormData({
        title: article.title,
        content: (article as Article).content || '',
        excerpt: article.excerpt || '',
        category: article.category,
        status: article.status === 'archived' ? 'draft' : article.status,
        featured: article.featured,
        meta_title: (article as Article).meta_title || '',
        meta_description: (article as Article).meta_description || '',
        featured_image_url: article.featured_image || '',
        allow_comments: (article as Article).allow_comments ?? true,
        tags: (article as Article).tags || [],
      });
    }
  }, [mode, article]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SEO –ø–æ–ª–µ–π
  useEffect(() => {
    if (formData.title && !formData.meta_title) {
      setFormData(prev => ({
        ...prev,
        meta_title: prev.title.slice(0, 60),
      }));
    }
    if (formData.excerpt && !formData.meta_description) {
      setFormData(prev => ({
        ...prev,
        meta_description: prev.excerpt.slice(0, 160),
      }));
    }
  }, [formData.title, formData.excerpt]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
  const handleInputChange = (field: keyof ArticleFormData) => (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | any
  ) => {
    let value: any; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø any –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π value
    if (e.target) {
      value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;
    } else {
      value = e; // –¥–ª—è Select –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    }
    
    setFormData(prev => ({
      ...prev,
      [field]: value,
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
  const handleAddTag = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      const tag = tagInput.trim().toLowerCase();
      if (tag && !formData.tags.includes(tag)) {
        setFormData(prev => ({
          ...prev,
          tags: [...prev.tags, tag],
        }));
      }
      setTagInput('');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove),
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (publishStatus: string = formData.status) => {
    setError(null);
    setSuccess(null);
    
    const articleData: CreateArticleRequest = {
      title: formData.title,
      content: formData.content,
      excerpt: formData.excerpt,
      category: formData.category,
      status: publishStatus as any,
      featured: formData.featured,
      meta_title: formData.meta_title || undefined,
      meta_description: formData.meta_description || undefined,
      featured_image_url: formData.featured_image_url || undefined,
      allow_comments: formData.allow_comments,
      tags: formData.tags.length > 0 ? formData.tags : undefined,
    };

    let result;
    
    if (mode === 'create') {
      result = await createArticle(articleData);
    } else if (mode === 'edit' && article) {
      result = await updateArticle(article.id, articleData);
    }

    if (result?.success) {
      setSuccess(publishStatus === 'published' ? '–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!' : '–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
      setTimeout(() => navigate('/articles'), 1500);
    } else if (result?.error) {
      setError(result.error);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const renderPreview = () => (
    <Box sx={{ ...cardStyles, mb: 3 }}>
      <Typography variant="h4" component="h1" sx={{ mb: 2, color: colors.textPrimary }}>
        {formData.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏'}
      </Typography>
      <Typography variant="body1" sx={{ mb: 3, color: colors.textSecondary }}>
        {formData.excerpt || '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏'}
      </Typography>
      <Divider sx={{ mb: 3 }} />
      <Box
        sx={{
          '& p': { mb: 2 },
          '& h1, & h2, & h3, & h4, & h5, & h6': { mb: 2, mt: 3, fontWeight: 600 },
          '& ul, & ol': { mb: 2, pl: 3 },
          '& li': { mb: 1 },
          '& blockquote': { 
            borderLeft: `4px solid ${colors.primary}`, 
            pl: 2, 
            py: 1, 
            bgcolor: 'grey.100', 
            fontStyle: 'italic',
            mb: 2
          },
          '& img': {
            maxWidth: '100%',
            height: 'auto',
            borderRadius: 1,
            mb: 2
          },
          '& pre': {
            bgcolor: 'grey.100',
            p: 2,
            borderRadius: 1,
            overflow: 'auto',
            mb: 2
          },
          '& code': {
            bgcolor: 'grey.100',
            px: 0.5,
            py: 0.25,
            borderRadius: 0.5,
            fontSize: '0.875rem'
          },
          '& a': {
            color: colors.primary,
            textDecoration: 'none',
            '&:hover': {
              textDecoration: 'underline'
            }
          }
        }}
        dangerouslySetInnerHTML={{ 
          __html: formData.content || '<p style="color: #999; font-style: italic;">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>' 
        }}
      />
    </Box>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <Fade in timeout={500}>
        <Box sx={{ mb: 4 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <IconButton
              onClick={() => navigate('/articles')}
              sx={{ mr: 2, color: colors.textSecondary }}
            >
              <ArrowBackIcon />
            </IconButton>
            <Box sx={{ flex: 1 }}>
              <Typography variant="h4" component="h1" sx={{ 
                fontWeight: 700, 
                color: colors.textPrimary,
                mb: 1
              }}>
                {mode === 'create' ? '‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' : 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏'}
              </Typography>
              <Typography variant="body1" sx={{ 
                color: colors.textSecondary,
                fontSize: '1.1rem'
              }}>
                {mode === 'create' ? '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤' : '–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—å—é'}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button
                variant="outlined"
                startIcon={previewMode ? <EditIcon /> : <PreviewIcon />}
                onClick={() => setPreviewMode(!previewMode)}
                sx={secondaryButtonStyles}
              >
                {previewMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'}
              </Button>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={() => handleSubmit(ARTICLE_STATUSES.DRAFT)}
                disabled={loading || !formData.title || !formData.content}
                sx={buttonStyles}
              >
                {loading ? <CircularProgress size={20} /> : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
              <Button
                variant="contained"
                startIcon={<PublishIcon />}
                onClick={() => handleSubmit(ARTICLE_STATUSES.PUBLISHED)}
                disabled={loading || !formData.title || !formData.content || !formData.excerpt}
                sx={getButtonStyles(theme, 'success')}
              >
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
              </Button>
            </Box>
          </Box>

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          {error && (
            <Alert severity="error" onClose={() => setError(null)}>
              ‚ùå {error}
            </Alert>
          )}
          {success && (
            <Alert severity="success" onClose={() => setSuccess(null)}>
              ‚úÖ {success}
            </Alert>
          )}
        </Box>
      </Fade>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
      {previewMode ? (
        <Fade in timeout={300}>
          {renderPreview()}
        </Fade>
      ) : (
        <Fade in timeout={300}>
          <Box sx={cardStyles}>
            {/* –¢–∞–±—ã */}
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
              <Tabs 
                value={activeTab} 
                onChange={(value) => setActiveTab(typeof value === 'string' ? parseInt(value) : value)}
                tabs={[
                  { label: '–û—Å–Ω–æ–≤–Ω–æ–µ', value: 0, icon: <EditIcon /> },
                  { label: 'SEO –∏ –º–µ–¥–∏–∞', value: 1, icon: <SearchIcon /> },
                  { label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', value: 2, icon: <SettingsIcon /> }
                ]}
              />
            </Box>

            <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <TabPanel value={activeTab} index={0}>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ *"
                      value={formData.title}
                      onChange={handleInputChange('title')}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"
                      sx={textFieldStyles}
                      required
                    />
                  </Grid>

                  <Grid item xs={12} md={6}>
                    <Select
                      fullWidth
                      label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                      value={formData.category}
                      onChange={(value) => handleInputChange('category')(value)}
                      options={categories.map((category: { key: string; name: string; icon: string }) => ({
                        value: category.key,
                        label: `${category.icon} ${category.name}`
                      }))}
                      required
                    />
                  </Grid>

                  <Grid item xs={12} md={6}>
                    <Select
                      fullWidth
                      label="–°—Ç–∞—Ç—É—Å"
                      value={formData.status}
                      onChange={(value) => handleInputChange('status')(value)}
                      options={[
                        { value: 'draft', label: '–ß–µ—Ä–Ω–æ–≤–∏–∫' },
                        { value: 'published', label: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' }
                      ]}
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *"
                      value={formData.excerpt}
                      onChange={handleInputChange('excerpt')}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"
                      multiline
                      rows={3}
                      sx={textFieldStyles}
                      required
                      helperText={`${formData.excerpt.length}/160 —Å–∏–º–≤–æ–ª–æ–≤`}
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <Typography variant="h6" sx={{ mb: 2, color: colors.textPrimary }}>
                      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ *
                    </Typography>
                    <RichTextEditor
                      value={formData.content}
                      onChange={handleInputChange('content')}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏..."
                      height={500}
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="h6" sx={{ mb: 1, color: colors.textPrimary }}>
                        –¢–µ–≥–∏
                      </Typography>
                      <TextField
                        fullWidth
                        label="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
                        value={tagInput}
                        onChange={(e) => setTagInput(e.target.value)}
                        onKeyDown={handleAddTag}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
                        sx={textFieldStyles}
                        helperText="–ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞"
                      />
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 2 }}>
                        {formData.tags.map((tag) => (
                          <Chip
                            key={tag}
                            label={tag}
                            onDelete={() => removeTag(tag)}
                            sx={getChipStyles(theme, 'primary')}
                          />
                        ))}
                      </Box>
                    </Box>
                  </Grid>
                </Grid>
              </TabPanel>

              {/* SEO –∏ –º–µ–¥–∏–∞ */}
              <TabPanel value={activeTab} index={1}>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                      value={formData.featured_image_url}
                      onChange={handleInputChange('featured_image_url')}
                      placeholder="https://example.com/image.jpg"
                      sx={textFieldStyles}
                      InputProps={{
                        startAdornment: <ImageIcon sx={{ mr: 1, color: colors.textSecondary }} />
                      }}
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                      value={formData.meta_title}
                      onChange={handleInputChange('meta_title')}
                      placeholder="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
                      sx={textFieldStyles}
                      helperText={`${formData.meta_title.length}/60 —Å–∏–º–≤–æ–ª–æ–≤`}
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="SEO –æ–ø–∏—Å–∞–Ω–∏–µ"
                      value={formData.meta_description}
                      onChange={handleInputChange('meta_description')}
                      placeholder="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
                      multiline
                      rows={3}
                      sx={textFieldStyles}
                      helperText={`${formData.meta_description.length}/160 —Å–∏–º–≤–æ–ª–æ–≤`}
                    />
                  </Grid>
                </Grid>
              </TabPanel>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <TabPanel value={activeTab} index={2}>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Switch
                      checked={formData.featured}
                      onChange={(checked) => handleInputChange('featured')({ target: { checked } })}
                      label="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞—Ç—å—è"
                    />
                  </Grid>

                  <Grid item xs={12}>
                    <Switch
                      checked={formData.allow_comments}
                      onChange={(checked) => handleInputChange('allow_comments')({ target: { checked } })}
                      label="–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
                    />
                  </Grid>
                </Grid>
              </TabPanel>
            </form>
          </Box>
        </Fade>
      )}
    </Container>
  );
};

export default ArticleForm; 