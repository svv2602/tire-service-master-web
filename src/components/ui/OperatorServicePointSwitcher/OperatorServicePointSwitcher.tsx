import React from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Alert,
  LinearProgress,
  Chip,
} from '@mui/material';
import {
  LocationOn as LocationIcon,
  Person as OperatorIcon,
  Business as BusinessIcon,
} from '@mui/icons-material';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { ServicePointSelector } from '../ServicePointSelector';
import { useOperatorServicePoint } from '../../../hooks/useOperatorServicePoint';

export interface OperatorServicePointSwitcherProps {
  variant?: 'card' | 'inline' | 'compact';
  showStats?: boolean;
  onPointChange?: (pointId: number | null) => void;
}

export const OperatorServicePointSwitcher: React.FC<OperatorServicePointSwitcherProps> = ({
  variant = 'card',
  showStats = true,
  onPointChange,
}) => {
  const {
    servicePoints,
    selectedPointId,
    setSelectedPointId,
    selectedPoint,
    isLoading,
    error,
    hasMultiplePoints,
    isOperator,
  } = useOperatorServicePoint();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏
  const handlePointChange = (pointId: number | null) => {
    setSelectedPointId(pointId);
    onPointChange?.(pointId);
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä
  if (!isOperator) {
    return null;
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <Box sx={{ width: '100%' }}>
        <LinearProgress />
        <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫...
        </Typography>
      </Box>
    );
  }

  // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  if (error) {
    return (
      <Alert severity="error">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
      </Alert>
    );
  }

  // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
  if (servicePoints.length === 0) {
    return (
      <Alert severity="warning" icon={<BusinessIcon />}>
        <Typography variant="body2" fontWeight="bold">
          –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏.
        </Typography>
      </Alert>
    );
  }

  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (—Ç–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç)
  if (variant === 'compact') {
    return (
      <ServicePointSelector
        servicePoints={servicePoints}
        selectedPointId={selectedPointId}
        onPointChange={handlePointChange}
        label="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞"
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É"
        size="small"
        showPartnerName={false}
      />
    );
  }

  // –ò–Ω–ª–∞–π–Ω –≤–∞—Ä–∏–∞–Ω—Ç (—Å–µ–ª–µ–∫—Ç —Å –º–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π)
  if (variant === 'inline') {
    return (
      <Box display="flex" alignItems="center" gap={2}>
        <Box flex={1}>
          <ServicePointSelector
            servicePoints={servicePoints}
            selectedPointId={selectedPointId}
            onPointChange={handlePointChange}
            label="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É"
            size="small"
            showPartnerName={false}
          />
        </Box>
        
        {selectedPoint && showStats && (
          <Box display="flex" gap={1}>
            <Chip
              icon={<LocationIcon />}
              label={selectedPoint.name}
              size="small"
              color="primary"
              variant="outlined"
            />
          </Box>
        )}
      </Box>
    );
  }

  // –ö–∞—Ä—Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  return (
    <Card>
      <CardContent>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box display="flex" alignItems="center" gap={1} mb={2}>
          <OperatorIcon color="primary" />
          <Typography variant="h6">
            –†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞
          </Typography>
          {hasMultiplePoints && (
            <Chip
              label={`${servicePoints.length} —Ç–æ—á–µ–∫`}
              size="small"
              color="info"
              variant="outlined"
            />
          )}
        </Box>

        {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ—á–∫–∏ */}
        <Box mb={showStats ? 2 : 0}>
          <ServicePointSelector
            servicePoints={servicePoints}
            selectedPointId={selectedPointId}
            onPointChange={handlePointChange}
            label="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã"
            placeholder="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏"
            showPartnerName={true}
          />
        </Box>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {showStats && selectedPoint && (
          <Box>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ */}
            <Box 
              sx={{ 
                p: 2, 
                backgroundColor: 'primary.50',
                borderRadius: 1,
                border: '1px solid',
                borderColor: 'primary.200',
              }}
            >
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <LocationIcon color="primary" fontSize="small" />
                <Typography variant="subtitle2" fontWeight="bold">
                  {selectedPoint.name}
                </Typography>
              </Box>
              
              <Typography variant="body2" color="text.secondary" mb={1}>
                üìç {selectedPoint.address}
              </Typography>
              
              {selectedPoint.partner_name && (
                <Typography variant="caption" color="text.secondary">
                  –ü–∞—Ä—Ç–Ω–µ—Ä: {selectedPoint.partner_name}
                </Typography>
              )}
              
              <Box display="flex" gap={1} mt={1}>
                <Chip
                  label="–ê–∫—Ç–∏–≤–Ω–∞"
                  size="small"
                  color="success"
                  variant="filled"
                />
                <Chip
                  label="–†–∞–±–æ—Ç–∞–µ—Ç"
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              </Box>
            </Box>
          </Box>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ */}
        {hasMultiplePoints && !selectedPoint && (
          <Alert severity="info" sx={{ mt: 2 }}>
            <Typography variant="body2">
              üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. 
              –í—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏.
            </Typography>
          </Alert>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ */}
        {!hasMultiplePoints && selectedPoint && (
          <Alert severity="success" sx={{ mt: 2 }}>
            <Typography variant="body2">
              ‚úÖ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π.
            </Typography>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}; 