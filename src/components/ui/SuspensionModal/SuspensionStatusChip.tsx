import React from 'react';
import { Chip, Tooltip, Box, Typography } from '@mui/material';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { useGetSuspensionInfoQuery, type SuspensionInfo } from '../../../api/users.api';

interface SuspensionStatusChipProps {
  userId: number;
  variant?: 'filled' | 'outlined';
  size?: 'small' | 'medium';
  showTooltip?: boolean;
  onClick?: () => void;
}

export const SuspensionStatusChip: React.FC<SuspensionStatusChipProps> = ({
  userId,
  variant = 'filled',
  size = 'small',
  showTooltip = true,
  onClick,
}) => {
  const { 
    data: suspensionData, 
    isLoading, 
    error 
  } = useGetSuspensionInfoQuery(userId);

  const suspensionInfo: SuspensionInfo | null = suspensionData?.data || null;

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞
  if (isLoading) {
    return (
      <Chip
        label="..."
        size={size}
        variant={variant}
        color="default"
      />
    );
  }

  if (error || !suspensionInfo) {
    return (
      <Chip
        label="–û—à–∏–±–∫–∞"
        size={size}
        variant={variant}
        color="error"
      />
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
  const isSuspended = suspensionInfo.is_suspended;
  const isExpired = suspensionInfo.suspended_until && 
                   new Date(suspensionInfo.suspended_until) <= new Date();

  let label: string;
  let color: 'success' | 'error' | 'warning' | 'default';
  let icon: string;

  if (!isSuspended) {
    label = '–ê–∫—Ç–∏–≤–µ–Ω';
    color = 'success';
    icon = '‚úÖ';
  } else if (isExpired) {
    label = '–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫';
    color = 'warning';
    icon = '‚è∞';
  } else if (suspensionInfo.is_permanent) {
    label = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
    color = 'error';
    icon = 'üîí';
  } else {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    const daysRemaining = suspensionInfo.days_remaining || 0;
    if (daysRemaining > 0) {
      label = `${daysRemaining} –¥–Ω.`;
      color = 'error';
      icon = '‚è≥';
    } else {
      label = '–°–µ–≥–æ–¥–Ω—è';
      color = 'warning';
      icon = '‚ö†Ô∏è';
    }
  }

  // –°–æ–∑–¥–∞–µ–º tooltip –∫–æ–Ω—Ç–µ–Ω—Ç
  const tooltipContent = isSuspended ? (
    <Box>
      <Typography variant="body2" fontWeight="bold">
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      </Typography>
      <Typography variant="body2">
        <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {suspensionInfo.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </Typography>
      {suspensionInfo.suspended_at && (
        <Typography variant="body2">
          <strong>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</strong>{' '}
          {format(new Date(suspensionInfo.suspended_at), 'dd.MM.yyyy HH:mm', { locale: ru })}
        </Typography>
      )}
      {suspensionInfo.suspended_by && (
        <Typography variant="body2">
          <strong>–ö–µ–º:</strong> {suspensionInfo.suspended_by}
        </Typography>
      )}
      {suspensionInfo.is_permanent ? (
        <Typography variant="body2">
          <strong>–°—Ä–æ–∫:</strong> –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        </Typography>
      ) : suspensionInfo.suspended_until ? (
        <Typography variant="body2">
          <strong>–î–æ:</strong>{' '}
          {format(new Date(suspensionInfo.suspended_until), 'dd.MM.yyyy HH:mm', { locale: ru })}
        </Typography>
      ) : null}
    </Box>
  ) : (
    <Typography variant="body2">
      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π
    </Typography>
  );

  const chip = (
    <Chip
      label={`${icon} ${label}`}
      size={size}
      variant={variant}
      color={color}
      onClick={onClick}
      sx={{
        cursor: onClick ? 'pointer' : 'default',
        '&:hover': onClick ? {
          opacity: 0.8,
        } : {},
      }}
    />
  );

  if (!showTooltip) {
    return chip;
  }

  return (
    <Tooltip
      title={tooltipContent}
      arrow
      placement="top"
      enterDelay={500}
      leaveDelay={200}
    >
      {chip}
    </Tooltip>
  );
}; 