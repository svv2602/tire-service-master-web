import React, { useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Chip,
  LinearProgress,
  Divider,
  Alert,
} from '@mui/material';
import {
  TrendingUp as TrendingUpIcon,
  Event as EventIcon,
  People as PeopleIcon,
  Star as StarIcon,
  LocationOn as LocationIcon,
  Schedule as ScheduleIcon,
  CheckCircle as CheckCircleIcon,
  Cancel as CancelIcon,
  AccessTime as AccessTimeIcon,
} from '@mui/icons-material';

// API —Ö—É–∫–∏
import { useGetBookingsQuery } from '../../../api/bookings.api';
import { useGetReviewsQuery } from '../../../api/reviews.api';
import { useOperatorServicePoint } from '../../../hooks/useOperatorServicePoint';

// –¢–∏–ø—ã
interface OperatorPointStatsProps {
  variant?: 'card' | 'inline' | 'dashboard';
  period?: 'today' | 'week' | 'month' | 'all';
  showDetails?: boolean;
}

interface StatsData {
  totalBookings: number;
  completedBookings: number;
  cancelledBookings: number;
  pendingBookings: number;
  averageRating: number;
  totalReviews: number;
  completionRate: number;
  todayBookings: number;
}

export const OperatorPointStats: React.FC<OperatorPointStatsProps> = ({
  variant = 'card',
  period = 'month',
  showDetails = true,
}) => {
  const { selectedPointId, selectedPoint, isOperator } = useOperatorServicePoint();

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const statsParams = useMemo(() => {
    if (!selectedPointId) return null;

    const params: any = {
      service_point_id: selectedPointId,
      per_page: 1000, // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const now = new Date();
    switch (period) {
      case 'today':
        params.from_date = now.toISOString().split('T')[0];
        params.to_date = now.toISOString().split('T')[0];
        break;
      case 'week':
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        params.from_date = weekAgo.toISOString().split('T')[0];
        params.to_date = now.toISOString().split('T')[0];
        break;
      case 'month':
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        params.from_date = monthAgo.toISOString().split('T')[0];
        params.to_date = now.toISOString().split('T')[0];
        break;
      // 'all' - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    }

    return params;
  }, [selectedPointId, period]);

  // API –∑–∞–ø—Ä–æ—Å—ã
  const {
    data: bookingsData,
    isLoading: bookingsLoading,
  } = useGetBookingsQuery(statsParams || {}, {
    skip: !statsParams,
  });

  const {
    data: reviewsData,
    isLoading: reviewsLoading,
  } = useGetReviewsQuery({
    service_point_id: selectedPointId || 0,
    per_page: 1000,
  }, {
    skip: !selectedPointId,
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const stats: StatsData = useMemo(() => {
    const bookings = bookingsData?.data || [];
    const reviews = reviewsData?.data || [];

    const totalBookings = bookings.length;
    const completedBookings = bookings.filter(b => b.status === 'completed').length;
    const cancelledBookings = bookings.filter(b => b.status === 'cancelled').length;
    const pendingBookings = bookings.filter(b => ['pending', 'confirmed'].includes(b.status)).length;

    const completionRate = totalBookings > 0 ? (completedBookings / totalBookings) * 100 : 0;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º
    const totalReviews = reviews.length;
    const averageRating = totalReviews > 0 
      ? reviews.reduce((sum, review) => sum + (review.rating || 0), 0) / totalReviews
      : 0;

    // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const today = new Date().toISOString().split('T')[0];
    const todayBookings = bookings.filter(b => 
      b.booking_date?.startsWith(today)
    ).length;

    return {
      totalBookings,
      completedBookings,
      cancelledBookings,
      pendingBookings,
      averageRating,
      totalReviews,
      completionRate,
      todayBookings,
    };
  }, [bookingsData, reviewsData]);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
  if (!isOperator || !selectedPointId || !selectedPoint) {
    return null;
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (bookingsLoading || reviewsLoading) {
    return (
      <Box sx={{ width: '100%' }}>
        <LinearProgress />
        <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
        </Typography>
      </Box>
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const getPeriodLabel = () => {
    switch (period) {
      case 'today': return '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
      case 'week': return '–∑–∞ –Ω–µ–¥–µ–ª—é';
      case 'month': return '–∑–∞ –º–µ—Å—è—Ü';
      case 'all': return '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è';
      default: return '';
    }
  };

  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  if (variant === 'inline') {
    return (
      <Box display="flex" alignItems="center" gap={2} flexWrap="wrap">
        <Chip
          icon={<EventIcon />}
          label={`${stats.totalBookings} –∑–∞–ø–∏—Å–µ–π`}
          size="small"
          color="primary"
          variant="outlined"
        />
        <Chip
          icon={<CheckCircleIcon />}
          label={`${stats.completedBookings} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`}
          size="small"
          color="success"
          variant="outlined"
        />
        <Chip
          icon={<StarIcon />}
          label={`${stats.averageRating.toFixed(1)} ‚≠ê`}
          size="small"
          color="warning"
          variant="outlined"
        />
        <Chip
          icon={<AccessTimeIcon />}
          label={`${stats.todayBookings} —Å–µ–≥–æ–¥–Ω—è`}
          size="small"
          color="info"
          variant="outlined"
        />
      </Box>
    );
  }

  // –ö–∞—Ä—Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  return (
    <Card>
      <CardContent>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box display="flex" alignItems="center" gap={1} mb={2}>
          <TrendingUpIcon color="primary" />
          <Typography variant="h6">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {getPeriodLabel()}
          </Typography>
        </Box>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ */}
        <Box 
          sx={{ 
            p: 2, 
            backgroundColor: 'grey.50',
            borderRadius: 1,
            mb: 2,
          }}
        >
          <Box display="flex" alignItems="center" gap={1} mb={1}>
            <LocationIcon color="primary" fontSize="small" />
            <Typography variant="subtitle2" fontWeight="bold">
              {selectedPoint.name}
            </Typography>
          </Box>
          <Typography variant="body2" color="text.secondary">
            üìç {selectedPoint.address}
          </Typography>
        </Box>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <Grid container spacing={2} mb={showDetails ? 2 : 0}>
          {/* –û–±—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="primary.main" fontWeight="bold">
                {stats.totalBookings}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
              </Typography>
            </Box>
          </Grid>

          {/* –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ */}
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="success.main" fontWeight="bold">
                {stats.completedBookings}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                –í—ã–ø–æ–ª–Ω–µ–Ω–æ
              </Typography>
            </Box>
          </Grid>

          {/* –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ */}
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {stats.averageRating.toFixed(1)}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                –†–µ–π—Ç–∏–Ω–≥ ‚≠ê
              </Typography>
            </Box>
          </Grid>

          {/* –°–µ–≥–æ–¥–Ω—è */}
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="info.main" fontWeight="bold">
                {stats.todayBookings}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                –°–µ–≥–æ–¥–Ω—è
              </Typography>
            </Box>
          </Grid>
        </Grid>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        {showDetails && (
          <>
            <Divider sx={{ my: 2 }} />
            
            {/* –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
            <Box mb={2}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2" fontWeight="bold">
                  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {stats.completionRate.toFixed(1)}%
                </Typography>
              </Box>
              <LinearProgress 
                variant="determinate" 
                value={stats.completionRate} 
                color="success"
                sx={{ height: 8, borderRadius: 4 }}
              />
            </Box>

            {/* –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º */}
            <Grid container spacing={1}>
              <Grid item xs={4}>
                <Box display="flex" alignItems="center" gap={1}>
                  <CheckCircleIcon color="success" fontSize="small" />
                  <Box>
                    <Typography variant="body2" fontWeight="bold">
                      {stats.completedBookings}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                    </Typography>
                  </Box>
                </Box>
              </Grid>
              
              <Grid item xs={4}>
                <Box display="flex" alignItems="center" gap={1}>
                  <ScheduleIcon color="warning" fontSize="small" />
                  <Box>
                    <Typography variant="body2" fontWeight="bold">
                      {stats.pendingBookings}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      –í –æ–∂–∏–¥–∞–Ω–∏–∏
                    </Typography>
                  </Box>
                </Box>
              </Grid>
              
              <Grid item xs={4}>
                <Box display="flex" alignItems="center" gap={1}>
                  <CancelIcon color="error" fontSize="small" />
                  <Box>
                    <Typography variant="body2" fontWeight="bold">
                      {stats.cancelledBookings}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      –û—Ç–º–µ–Ω–µ–Ω–æ
                    </Typography>
                  </Box>
                </Box>
              </Grid>
            </Grid>

            {/* –û—Ç–∑—ã–≤—ã */}
            {stats.totalReviews > 0 && (
              <Box mt={2}>
                <Alert severity="info" icon={<StarIcon />}>
                  <Typography variant="body2">
                    <strong>{stats.totalReviews}</strong> –æ—Ç–∑—ã–≤–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–æ–π{' '}
                    <strong>{stats.averageRating.toFixed(1)}</strong> –∏–∑ 5
                  </Typography>
                </Alert>
              </Box>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
}; 