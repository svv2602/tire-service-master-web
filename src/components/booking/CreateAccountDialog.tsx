import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  TextField,
  Button,
  Box,
  Alert,
  CircularProgress,
  InputAdornment,
  IconButton,
} from '@mui/material';
import {
  AccountCircle as AccountCircleIcon,
  PersonAdd as PersonAddIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
} from '@mui/icons-material';
import { useRegisterClientMutation } from '../../api/clientAuth.api';
import { useLoginMutation } from '../../api/auth.api';
import { useAssignBookingToClientMutation } from '../../api/clientBookings.api';
import { BookingFormData } from '../../types/booking';

export interface CreateAccountDialogProps {
  /** –û—Ç–∫—Ä—ã—Ç–æ –ª–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ */
  open: boolean;
  /** –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */
  bookingData: BookingFormData;
  /** –°–æ–∑–¥–∞–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */
  createdBooking?: any;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è */
  onClose: () => void;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */
  onAccountCreated: (userData: any) => void;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */
  onContinueWithoutAccount: () => void;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç CreateAccountDialog - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
 * –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const CreateAccountDialog: React.FC<CreateAccountDialogProps> = ({
  open,
  bookingData,
  createdBooking,
  onClose,
  onAccountCreated,
  onContinueWithoutAccount,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [error, setError] = useState('');
  const [isCreating, setIsCreating] = useState(false);

  // API –º—É—Ç–∞—Ü–∏–∏
  const [registerClient] = useRegisterClientMutation();
  const [loginClient] = useLoginMutation();
  const [assignBookingToClient] = useAssignBookingToClientMutation();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const isFormValid = () => {
    return (
      password.trim().length >= 6 &&
      confirmPassword.trim().length >= 6 &&
      password === confirmPassword
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleCreateAccount = async () => {
    if (!isFormValid()) {
      setError('–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setIsCreating(true);
    setError('');

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const registrationData = {
        user: {
          first_name: bookingData.service_recipient.first_name,
          last_name: bookingData.service_recipient.last_name,
          email: bookingData.service_recipient.email || `${bookingData.service_recipient.phone}@temp.local`,
          phone: bookingData.service_recipient.phone,
          password: password,
          password_confirmation: confirmPassword,
        },
      };

      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:', registrationData);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const registerResponse = await registerClient(registrationData).unwrap();
      
      console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:', registerResponse);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      try {
        const loginData = {
          auth: {
            login: bookingData.service_recipient.phone,
            password: password,
          },
        };

        console.log('üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É:', loginData);
        const loginResponse = await loginClient(loginData).unwrap();
        console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', loginResponse);
      } catch (loginError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:', loginError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      if (createdBooking && registerResponse.client) {
        try {
          console.log('üìù –ü—Ä–∏–≤—è–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:', {
            bookingId: createdBooking.id,
            clientId: registerResponse.client.id,
          });

          const assignResult = await assignBookingToClient({
            id: createdBooking.id.toString(),
            client_id: registerResponse.client.id,
          }).unwrap();

          console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ:', assignResult);
        } catch (assignError: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', assignError);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        }
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
      onAccountCreated(registerResponse);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      onClose();
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', err);
      setError(
        err?.data?.details?.join(', ') ||
        err?.data?.error ||
        err?.message ||
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'
      );
    } finally {
      setIsCreating(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleContinueWithoutAccount = () => {
    onContinueWithoutAccount();
    onClose();
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const handleClose = () => {
    setPassword('');
    setConfirmPassword('');
    setShowPassword(false);
    setShowConfirmPassword(false);
    setError('');
    setIsCreating(false);
    onClose();
  };

  return (
    <Dialog 
      open={open} 
      onClose={handleClose} 
      maxWidth="sm" 
      fullWidth
      disableEscapeKeyDown={isCreating}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" gap={2}>
          <PersonAddIcon color="primary" />
          <Typography variant="h6">
            –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
          </Typography>
        </Box>
      </DialogTitle>
      
      <DialogContent>
        <Alert severity="success" sx={{ mb: 3 }}>
          <Typography variant="body2" sx={{ mb: 1 }}>
            <strong>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</strong>
          </Typography>
          <Typography variant="body2" sx={{ fontSize: '0.875rem', color: 'text.secondary' }}>
            –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
          </Typography>
        </Alert>

        <Box sx={{ mb: 3 }}>
          <Typography variant="body1" sx={{ mb: 2 }}>
            –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è:
          </Typography>
          <Box component="ul" sx={{ pl: 2, mb: 0 }}>
            <Typography component="li" variant="body2" sx={{ mb: 0.5 }}>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 0.5 }}>
              –ü–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 0.5 }}>
              –ë—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            </Typography>
            <Typography component="li" variant="body2">
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            </Typography>
          </Box>
        </Box>

        <Box sx={{ mb: 3, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
          <Typography variant="body2" sx={{ mb: 1, fontWeight: 'medium' }}>
            –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:
          </Typography>
          <Typography variant="body2" sx={{ mb: 0.5 }}>
            <strong>–ò–º—è:</strong> {bookingData.service_recipient.first_name} {bookingData.service_recipient.last_name}
          </Typography>
          <Typography variant="body2" sx={{ mb: 0.5 }}>
            <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {bookingData.service_recipient.phone}
          </Typography>
          {bookingData.service_recipient.email && (
            <Typography variant="body2">
              <strong>Email:</strong> {bookingData.service_recipient.email}
            </Typography>
          )}
        </Box>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <TextField
            label="–ü–∞—Ä–æ–ª—å"
            type={showPassword ? 'text' : 'password'}
            value={password}
            onChange={(e) => {
              setPassword(e.target.value);
              setError('');
            }}
            error={!!error && password.length < 6}
            helperText={password.length > 0 && password.length < 6 ? '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' : ''}
            fullWidth
            disabled={isCreating}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton
                    onClick={() => setShowPassword(!showPassword)}
                    edge="end"
                    disabled={isCreating}
                  >
                    {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                  </IconButton>
                </InputAdornment>
              ),
            }}
          />
          
          <TextField
            label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
            type={showConfirmPassword ? 'text' : 'password'}
            value={confirmPassword}
            onChange={(e) => {
              setConfirmPassword(e.target.value);
              setError('');
            }}
            error={!!error && confirmPassword.length > 0 && password !== confirmPassword}
            helperText={
              confirmPassword.length > 0 && password !== confirmPassword 
                ? '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' 
                : ''
            }
            fullWidth
            disabled={isCreating}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    edge="end"
                    disabled={isCreating}
                  >
                    {showConfirmPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                  </IconButton>
                </InputAdornment>
              ),
            }}
          />
        </Box>
      </DialogContent>
      
      <DialogActions sx={{ p: 3, gap: 1 }}>
        <Button
          variant="outlined"
          onClick={handleContinueWithoutAccount}
          disabled={isCreating}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        </Button>
        <Button
          variant="contained"
          onClick={handleCreateAccount}
          disabled={!isFormValid() || isCreating}
          startIcon={isCreating ? <CircularProgress size={20} /> : <AccountCircleIcon />}
        >
          {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
        </Button>
      </DialogActions>
    </Dialog>
  );
}; 