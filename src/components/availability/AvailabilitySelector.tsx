import React from 'react';
import { Box, Paper } from '@mui/material';
import { TimeSlotPicker } from './TimeSlotPicker';
import { DayDetailsPanel } from './DayDetailsPanel';
import { AvailabilityCalendar } from './AvailabilityCalendar';
import { useTheme } from '@mui/material/styles';
import { format } from 'date-fns';
import { useGetDayDetailsQuery } from '../../api/availability.api';
import type { AvailableTimeSlot } from '../../types/availability';

interface AvailabilitySelectorProps {
  servicePointId?: number;
  selectedDate: Date | null;
  onDateChange: (date: Date | null) => void;
  selectedTimeSlot: string | null;
  onTimeSlotChange: (timeSlot: string | null, slotData?: AvailableTimeSlot) => void;
  availableTimeSlots: AvailableTimeSlot[];
  isLoading?: boolean;
  servicePointPhone?: string;
  categoryId?: number; // –î–æ–±–∞–≤–ª—è–µ–º categoryId –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
  totalSlotsForDay?: number; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
}

export const AvailabilitySelector: React.FC<AvailabilitySelectorProps> = ({
  servicePointId,
  selectedDate,
  onDateChange,
  selectedTimeSlot,
  onTimeSlotChange,
  availableTimeSlots,
  isLoading = false,
  servicePointPhone,
  categoryId,
  totalSlotsForDay,
}) => {
  const theme = useTheme();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: dayDetailsData, isLoading: isLoadingDayDetails, error: dayDetailsError } = useGetDayDetailsQuery(
    {
      servicePointId: servicePointId?.toString() || '0',
      date: selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '',
      categoryId: categoryId
    },
    { skip: !servicePointId || !selectedDate }
  );

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –¥–Ω—è (—Ç–æ–ª—å–∫–æ –≤ development)
  React.useEffect(() => {
    if (process.env.NODE_ENV === 'development' && selectedDate && servicePointId) {
      const requestParams = {
        servicePointId: servicePointId?.toString() || '0',
        date: format(selectedDate, 'yyyy-MM-dd'),
        categoryId: categoryId
      };
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ getDayDetails:', requestParams);
      console.log('üîç –û—à–∏–±–∫–∞ getDayDetails:', dayDetailsError);
      console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ getDayDetails:', isLoadingDayDetails);
    }
  }, [selectedDate, servicePointId, categoryId, dayDetailsData, dayDetailsError, isLoadingDayDetails]);

  // –ü–æ–¥—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Å–ª–æ—Ç–∞–º/–∑–∞–ø–∏—Å—è–º, –∞ –Ω–µ –ø–æ –ø–æ—Å—Ç–∞–º
  const dayStats = React.useMemo(() => {
    if (!selectedDate) {
      return {
        totalSlots: 0,
        availableSlots: 0,
        occupiedSlots: 0,
        occupancyPercentage: 0
      };
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç dayDetailsData:', dayDetailsData);
      console.log('üîç dayDetailsData?.summary:', dayDetailsData?.summary);
      console.log('üîç categoryId:', categoryId);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω–µ –∏–ª–∏ —Å–ª–æ—Ç–∞—Ö, –ø–æ–ª—É—á–∞–µ–º –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
    if (dayDetailsData?.summary) {
      const totalSlots = dayDetailsData.summary.total_slots || 0;
      const availableSlots = dayDetailsData.summary.available_slots || 0;
      const occupiedSlots = dayDetailsData.summary.occupied_slots || 0;
      const occupancyPercentage = dayDetailsData.summary.occupancy_percentage || 0;

      if (process.env.NODE_ENV === 'development') {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', { totalSlots, availableSlots, occupiedSlots, occupancyPercentage });
      }

      return {
        totalSlots,
        availableSlots,
        occupiedSlots,
        occupancyPercentage
      };
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ availableTimeSlots
    const availableSlots = availableTimeSlots.length;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: availabilityData.total_slots —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã, –∞ –Ω–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 21 –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 5 (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ API —Ç–µ—Å—Ç–∞—Ö)
    const totalSlots = 21; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 5
    
    const occupiedSlots = totalSlots - availableSlots;
    const occupancyPercentage = totalSlots > 0 ? (occupiedSlots / totalSlots) * 100 : 0;

    if (process.env.NODE_ENV === 'development') {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é fallback –ª–æ–≥–∏–∫—É:', { availableSlots, totalSlots, occupiedSlots, occupancyPercentage, categoryId });
    }

    return {
      totalSlots,
      availableSlots,
      occupiedSlots,
      occupancyPercentage
    };
  }, [selectedDate, availableTimeSlots, dayDetailsData]);

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
      {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        <Paper 
          sx={{ 
            flex: '1 1 300px',
            p: 2,
            borderRadius: 2,
            boxShadow: theme.shadows[1]
          }}
        >
          <AvailabilityCalendar
            selectedDate={selectedDate}
            onDateChange={onDateChange}
            isLoading={isLoading}
            servicePointId={servicePointId}
            categoryId={categoryId}
          />
        </Paper>

        <Paper 
          sx={{ 
            flex: '1 1 300px',
            p: 2,
            borderRadius: 2,
            boxShadow: theme.shadows[1]
          }}
        >
          <DayDetailsPanel
            selectedDate={selectedDate}
            selectedTimeSlot={selectedTimeSlot}
            isLoading={isLoading || isLoadingDayDetails}
            occupancyPercentage={dayStats.occupancyPercentage}
            totalPosts={dayStats.totalSlots}
            availablePosts={dayStats.availableSlots}
            servicePointPhone={servicePointPhone}
            isWorking={dayDetailsData?.is_working}
            workingMessage={dayDetailsData?.message}
          />
        </Paper>
      </Box>

      {/* –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
      <Paper 
        sx={{ 
          p: 2,
          borderRadius: 2,
          boxShadow: theme.shadows[1]
        }}
      >
        <TimeSlotPicker
          selectedTimeSlot={selectedTimeSlot}
          onTimeSlotChange={onTimeSlotChange}
          availableTimeSlots={availableTimeSlots}
          isLoading={isLoading}
        />
      </Paper>
    </Box>
  );
};

export default AvailabilitySelector; 