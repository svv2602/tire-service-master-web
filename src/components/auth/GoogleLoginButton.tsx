import React, { useState } from 'react';
import { Button, CircularProgress, Alert, Box } from '@mui/material';
import { Google as GoogleIcon } from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../../store';
import { setCredentials } from '../../store/slices/authSlice';
import { clearAllCacheData } from '../../api/baseApi';
import { UserRole } from '../../types/user-role';

interface GoogleLoginButtonProps {
  onSuccess?: () => void;
  onError?: (error: string) => void;
  variant?: 'contained' | 'outlined';
  fullWidth?: boolean;
  disabled?: boolean;
}

const GoogleLoginButton: React.FC<GoogleLoginButtonProps> = ({
  onSuccess,
  onError,
  variant = 'outlined',
  fullWidth = true,
  disabled = false
}) => {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');

  // –ü–æ–ª—É—á–∞–µ–º Google Client ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google OAuth –æ—Ç–≤–µ—Ç–∞
  const handleGoogleResponse = async (response: any) => {
    try {
      setIsLoading(true);
      setError('');
      
      console.log('üîê Google OAuth response (–ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç):', response);
      console.log('üîê Google OAuth response credential:', response.credential);
      console.log('üîê Google OAuth response clientId:', response.clientId);
      
      // Google One Tap –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç credential (JWT —Ç–æ–∫–µ–Ω), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
      let userInfo = {};
      if (response.credential) {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (—Ç–æ–ª—å–∫–æ payload, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        try {
          const base64Payload = response.credential.split('.')[1];
          const decodedPayload = JSON.parse(atob(base64Payload));
          console.log('üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Google JWT:', decodedPayload);
          
          userInfo = {
            provider_user_id: decodedPayload.sub,
            email: decodedPayload.email,
            first_name: decodedPayload.given_name || decodedPayload.name?.split(' ')[0] || '',
            last_name: decodedPayload.family_name || decodedPayload.name?.split(' ').slice(1).join(' ') || ''
          };
        } catch (decodeError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', decodeError);
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
          userInfo = {
            provider_user_id: response.sub || 'unknown',
            email: response.email || '',
            first_name: response.given_name || response.name?.split(' ')[0] || '',
            last_name: response.family_name || response.name?.split(' ').slice(1).join(' ') || ''
          };
        }
      }
      
      const requestData = {
        provider: 'google',
        token: response.credential,
        ...userInfo
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend:', requestData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const apiResponse = await fetch('/api/v1/clients/social_auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è HttpOnly –∫—É–∫–∏
        body: JSON.stringify(requestData),
      });

      console.log('üì• Response status:', apiResponse.status);
      const data = await apiResponse.json();
      console.log('üì• Response data:', data);

      if (!apiResponse.ok) {
        throw new Error(data.error || t('auth.google.authError'));
      }

      console.log('‚úÖ Google OAuth success:', data);

      // ‚úÖ –û—á–∏—â–∞–µ–º –∫—ç—à RTK Query –ø—Ä–∏ Google OAuth —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      clearAllCacheData(dispatch);
      console.log('üßπ –ö—ç—à RTK Query –æ—á–∏—â–µ–Ω –ø—Ä–∏ Google OAuth');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux
      dispatch(setCredentials({
        user: {
          ...data.user,
          role: data.user.role as UserRole,
          role_id: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–º —Ç–∏–ø—ã
          email_verified: true, // Google –∞–∫–∫–∞—É–Ω—Ç—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
          phone_verified: false,
          created_at: data.user.created_at || new Date().toISOString(),
          updated_at: data.user.updated_at || new Date().toISOString()
        },
        accessToken: data.auth_token || data.token || null
      }));

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redux');

      // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —É–±–∏—Ä–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsLoading(false);

      if (onSuccess) {
        onSuccess();
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å
        window.location.href = '/client';
      }

      return; // –í–∞–∂–Ω–æ! –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

    } catch (err: any) {
      console.error('‚ùå Google OAuth error:', err);
      const errorMessage = err.message || t('auth.google.authError');
      setError(errorMessage);
      setIsLoading(false); // –£–±–∏—Ä–∞–µ–º loading —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (onError) {
        onError(errorMessage);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google OAuth
  const initializeGoogleOAuth = () => {
    if (typeof window === 'undefined' || !window.google) {
      console.error('Google OAuth SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      setError(t('auth.google.authError'));
      setIsLoading(false);
      return;
    }

    if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === 'your-google-client-id') {
      console.error('Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      setError('Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      setIsLoading(false);
      return;
    }

    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google OAuth —Å Client ID:', GOOGLE_CLIENT_ID);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google OAuth
      window.google.accounts.id.initialize({
        client_id: GOOGLE_CLIENT_ID,
        callback: (response: any) => {
          console.log('üéØ Google OAuth callback –≤—ã–∑–≤–∞–Ω:', response);
          handleGoogleResponse(response);
        },
        auto_select: false,
        cancel_on_tap_outside: true,
        use_fedcm_for_prompt: false, // –û—Ç–∫–ª—é—á–∞–µ–º FedCM –¥–ª—è localhost
        context: 'signin',
        ux_mode: 'popup', // –ò—Å–ø–æ–ª—å–∑—É–µ–º popup –≤–º–µ—Å—Ç–æ redirect
        login_uri: window.location.origin + '/login'
      });

      console.log('‚úÖ Google OAuth –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º prompt');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º popup —Ä–µ–∂–∏–º
      window.google.accounts.id.prompt((notification: any) => {
        console.log('üìã Google prompt notification:', notification);
        if (notification.isNotDisplayed()) {
          console.log('‚ö†Ô∏è Google prompt –Ω–µ –ø–æ–∫–∞–∑–∞–Ω - –ø–æ–ø—Ä–æ–±—É–µ–º popup —Ä–µ–∂–∏–º');
          // –ï—Å–ª–∏ prompt –Ω–µ –ø–æ–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º popup
          showGooglePopup();
        } else if (notification.isSkippedMoment()) {
          console.log('‚ö†Ô∏è Google prompt –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          setIsLoading(false);
        } else if (notification.isDismissedMoment()) {
          console.log('‚ö†Ô∏è Google prompt –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          setIsLoading(false);
        }
      });

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google OAuth:', err);
      setError(t('auth.google.authError'));
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Google OAuth popup
  const showGooglePopup = () => {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Google –¥–ª—è popup —Ä–µ–∂–∏–º–∞
      const buttonContainer = document.createElement('div');
      buttonContainer.style.display = 'none';
      document.body.appendChild(buttonContainer);

      window.google.accounts.id.renderButton(buttonContainer, {
        theme: 'outline',
        size: 'large',
        type: 'standard',
        text: 'continue_with',
        locale: 'ru'
      });

      // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
      const googleButton = buttonContainer.querySelector('div[role="button"]') as HTMLElement;
      if (googleButton) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ Google –∫–Ω–æ–ø–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
        googleButton.click();
      } else {
        console.log('‚ö†Ô∏è Google –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ OAuth2
        initiateGoogleOAuth2Flow();
      }

      // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      setTimeout(() => {
        document.body.removeChild(buttonContainer);
      }, 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ Google popup:', error);
      setError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      setIsLoading(false);
    }
  };

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π OAuth2 flow
  const initiateGoogleOAuth2Flow = () => {
    if (!GOOGLE_CLIENT_ID) {
      setError('Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      setIsLoading(false);
      return;
    }

    const redirectUri = window.location.origin + '/login';
    const scope = 'openid email profile';
    const responseType = 'code';
    const state = Math.random().toString(36).substring(2, 15);

    const googleAuthUrl = `https://accounts.google.com/oauth/v2/auth?` +
      `client_id=${encodeURIComponent(GOOGLE_CLIENT_ID)}&` +
      `redirect_uri=${encodeURIComponent(redirectUri)}&` +
      `scope=${encodeURIComponent(scope)}&` +
      `response_type=${responseType}&` +
      `state=${state}&` +
      `access_type=offline&` +
      `prompt=consent`;

    console.log('üîÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Google OAuth2:', googleAuthUrl);
    window.location.href = googleAuthUrl;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  const handleGoogleLogin = () => {
    setError('');
    setIsLoading(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Client ID
    if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === 'your-google-client-id') {
      setError('Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      setIsLoading(false);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ Google SDK
    if (typeof window !== 'undefined' && window.google) {
      initializeGoogleOAuth();
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º Google SDK –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      const script = document.createElement('script');
      script.src = 'https://accounts.google.com/gsi/client';
      script.onload = () => {
        setTimeout(initializeGoogleOAuth, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      };
      script.onerror = () => {
        setError(t('auth.google.authError'));
        setIsLoading(false);
      };
      document.head.appendChild(script);
    }
  };

  // –ï—Å–ª–∏ Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
  if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === 'your-google-client-id') {
    return (
      <Alert severity="info" sx={{ borderRadius: 1.5 }}>
        Google OAuth –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
      </Alert>
    );
  }

  return (
    <Box>
      {error && (
        <Alert severity="error" sx={{ mb: 2, borderRadius: 1.5 }}>
          {error}
        </Alert>
      )}
      
      <Button
        variant={variant}
        fullWidth={fullWidth}
        disabled={disabled || isLoading}
        size="large"
        startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <GoogleIcon />}
        onClick={handleGoogleLogin}
        sx={{ 
          py: 1.5,
          borderRadius: 1.5,
          fontSize: '1rem',
          fontWeight: 500,
          textTransform: 'none',
          ...(variant === 'outlined' && {
            borderColor: '#4285f4',
            color: '#4285f4',
            '&:hover': {
              borderColor: '#3367d6',
              backgroundColor: 'rgba(66, 133, 244, 0.04)'
            }
          })
        }}
      >
        {isLoading ? t('auth.google.linking') : t('auth.google.signIn')}
      </Button>
    </Box>
  );
};

// –¢–∏–ø—ã –¥–ª—è Google OAuth API
declare global {
  interface Window {
    google: {
      accounts: {
        id: {
          initialize: (config: any) => void;
          prompt: (callback?: (notification: any) => void) => void;
          renderButton: (element: HTMLElement, config: any) => void;
          cancel: () => void;
        };
      };
    };
  }
}

export default GoogleLoginButton; 