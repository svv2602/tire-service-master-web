import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  Paper,
  InputAdornment,
  IconButton,
  Alert,
  CircularProgress,
  Link,
  Divider,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  Chip
} from '@mui/material';

import {
  Visibility,
  VisibilityOff,
  Email,
  Phone,
  Login as LoginIcon,
  PersonAdd,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { setCredentials } from '../../store/slices/authSlice';
import { useLoginMutation } from '../../api/auth.api';
import { UserRole } from '../../types/user-role';
import { extractPhoneDigits } from '../../utils/phoneUtils';
import { useTranslation } from '../../hooks/useTranslation';

interface UniversalLoginFormProps {
  onSuccess?: () => void;
  onSwitchToRegister?: () => void;
  showRegisterLink?: boolean;
  title?: string;
  showSkipButton?: boolean;
  onSkip?: () => void;
}

const UniversalLoginForm: React.FC<UniversalLoginFormProps> = ({
  onSuccess,
  onSwitchToRegister,
  showRegisterLink = true,
  title,
  showSkipButton = false,
  onSkip
}) => {
  const { t } = useTranslation();
  const [loginType, setLoginType] = useState<'email' | 'phone'>('email');
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [loginMutation, { isLoading }] = useLoginMutation();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    if (!login.trim()) {
      setError(t('auth.errors.login_required') || '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω');
      return false;
    }
    
    if (!password.trim()) {
      setError(t('auth.errors.password_required') || '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å');
      return false;
    }
    
    if (loginType === 'email') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(login)) {
        setError(t('auth.errors.invalid_email') || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        return false;
      }
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
      const cleanPhone = login.replace(/[\s\-\(\)]/g, '');
      const digitsOnly = cleanPhone.replace(/[^\d+]/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +38 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 12 —Ü–∏—Ñ—Ä –≤—Å–µ–≥–æ (+38 + 10 —Ü–∏—Ñ—Ä)
      if (!digitsOnly.startsWith('+38') || digitsOnly.length !== 13) {
        setError(t('auth.errors.invalid_phone') || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +38 (0–•–•) –•–•–•-–•–•-–•–•');
        return false;
      }
    }
    
    return true;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  const getErrorMessage = (err: any): string => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ API
    if (err.data?.error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
      const errorKey = err.data.error.toLowerCase().replace(/\s+/g, '_');
      const translatedError = t(`auth.errors.${errorKey}`);
      if (translatedError && translatedError !== `auth.errors.${errorKey}`) {
        return translatedError;
      }
      return err.data.error;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (err.data?.message) {
      return err.data.message;
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ HTTP
    if (err.status === 401) {
      return t('auth.errors.invalid_credentials') || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞';
    }
    
    if (err.status === 404) {
      return t('auth.errors.user_not_found') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
    
    if (err.status >= 500) {
      return t('auth.errors.server_error') || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    }
    
    // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
    if (!err.status) {
      return t('auth.errors.network_error') || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
    }
    
    // –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
    return t('auth.loginError') || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É';
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    if (!validateForm()) {
      return;
    }

    // üîç –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    console.log('üîê UniversalLoginForm handleLogin:', {
      loginType,
      login: login.trim(),
      passwordLength: password.trim().length,
      formValid: validateForm(),
      timestamp: new Date().toISOString()
    });

    try {
      // üì± –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
      let normalizedLogin = login.trim();
      
      if (loginType === 'phone') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é extractPhoneDigits –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalizedLogin = extractPhoneDigits(login);
        
        console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
          original: login.trim(),
          normalized: normalizedLogin
        });
      }
      
      const loginData = {
        login: normalizedLogin,
        password: password.trim()
      };
      
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:', {
        loginData,
        mutationFunction: 'loginMutation',
        timestamp: new Date().toISOString()
      });

      const result = await loginMutation(loginData).unwrap();

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', {
        hasUser: !!result.user,
        userEmail: result.user?.email,
        userRole: result.user?.role,
        hasAccessToken: !!result.access_token,
        timestamp: new Date().toISOString()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux
      dispatch(setCredentials({
        user: {
          ...result.user,
          role: result.user.role as UserRole,
          role_id: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–º —Ç–∏–ø—ã
          email_verified: result.user.email_verified || false,
          phone_verified: result.user.phone_verified || false,
          created_at: result.user.created_at || new Date().toISOString(),
          updated_at: result.user.updated_at || new Date().toISOString()
        },
        accessToken: result.access_token || null
      }));

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', result);
      
      if (onSuccess) {
        onSuccess();
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        switch (result.user.role) {
          case 'client':
            navigate('/client/profile');
            break;
          case 'admin':
            navigate('/admin/dashboard');
            break;
          case 'partner':
            navigate('/partner/dashboard');
            break;
          case 'manager':
            navigate('/manager/dashboard');
            break;
          default:
            navigate('/dashboard');
        }
      }
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', {
        error: err,
        status: err.status,
        data: err.data,
        message: err.message,
        timestamp: new Date().toISOString()
      });
      setError(getErrorMessage(err));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –ª–æ–≥–∏–Ω–∞
  const handleLoginTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setLoginType(event.target.value as 'email' | 'phone');
    setLogin('');
    setError('');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
  const getLoginPlaceholder = () => {
    return loginType === 'email' 
      ? 'example@email.com' 
      : '+38 (067) 123-45-67';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
  const getLoginIcon = () => {
    return loginType === 'email' ? <Email /> : <Phone />;
  };

  return (
    <Paper elevation={3} sx={{ p: 4, maxWidth: 400, mx: 'auto' }}>
      <Box component="form" onSubmit={handleLogin} noValidate>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom textAlign="center">
          {title || t('auth.login')}
        </Typography>
        
        {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–≥–∏–Ω–∞ */}
        <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
          <FormLabel component="legend">
            <Typography variant="subtitle2" color="textSecondary">
              –°–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
            </Typography>
          </FormLabel>
          <RadioGroup
            row
            value={loginType}
            onChange={handleLoginTypeChange}
            sx={{ justifyContent: 'center', mt: 1 }}
          >
            <FormControlLabel
              value="email"
              control={<Radio />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <Email fontSize="small" />
                  <span>{t('auth.email')}</span>
                </Box>
              }
            />
            <FormControlLabel
              value="phone"
              control={<Radio />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <Phone fontSize="small" />
                  <span>{t('auth.phone')}</span>
                </Box>
              }
            />
          </RadioGroup>
        </FormControl>

        {/* –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ */}
        {loginType === 'email' ? (
          <TextField
            fullWidth
            label={t('auth.email')}
            type="email"
            value={login}
            onChange={(e) => setLogin(e.target.value)}
            placeholder={getLoginPlaceholder()}
            disabled={isLoading}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  {getLoginIcon()}
                </InputAdornment>
              ),
            }}
            sx={{ mb: 2 }}
          />
        ) : (
          <TextField
            fullWidth
            label={t('auth.phone')}
            type="tel"
            value={login}
            onChange={(e) => setLogin(e.target.value)}
            placeholder={getLoginPlaceholder()}
            disabled={isLoading}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  {getLoginIcon()}
                </InputAdornment>
              ),
            }}
            sx={{ mb: 2 }}
          />
        )}

        {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
        <TextField
          fullWidth
          label={t('auth.password')}
          type={showPassword ? 'text' : 'password'}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          disabled={isLoading}
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconButton
                  onClick={() => setShowPassword(!showPassword)}
                  edge="end"
                >
                  {showPassword ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </InputAdornment>
            ),
          }}
          sx={{ mb: 2 }}
        />

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
        <Button
          type="submit"
          fullWidth
          variant="contained"
          disabled={isLoading}
          startIcon={isLoading ? <CircularProgress size={20} /> : <LoginIcon />}
          sx={{ mb: 2 }}
        >
          {isLoading ? t('auth.loggingIn') || '–í—Ö–æ–¥...' : t('auth.loginButton')}
        </Button>

        {/* –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å */}
        <Box textAlign="center" sx={{ mb: 2 }}>
          <Link
            component="button"
            variant="body2"
            onClick={() => window.location.href = '/forgot-password'}
            sx={{ textDecoration: 'none' }}
          >
            {t('auth.forgotPassword')}
          </Link>
        </Box>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <Divider sx={{ my: 2 }}>–∏–ª–∏</Divider>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */}
        {showRegisterLink && (
          <Box textAlign="center" sx={{ mb: 2 }}>
            <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }}>
              {t('auth.dontHaveAccount')}
            </Typography>
            <Button
              variant="outlined"
              fullWidth
              startIcon={<PersonAdd />}
              onClick={onSwitchToRegister}
            >
              {t('auth.registerButton')}
            </Button>
          </Box>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ */}
        {showSkipButton && (
          <Box textAlign="center">
            <Button
              variant="text"
              onClick={onSkip}
              startIcon={<CloseIcon />}
              sx={{ color: 'text.secondary' }}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—Ö–æ–¥–∞
            </Button>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

export default UniversalLoginForm; 