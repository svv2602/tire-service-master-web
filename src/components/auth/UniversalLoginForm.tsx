import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  Paper,
  InputAdornment,
  IconButton,
  Alert,
  CircularProgress,
  Link,
  Divider,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  Chip
} from '@mui/material';

import {
  Visibility,
  VisibilityOff,
  Email,
  Phone,
  Login as LoginIcon,
  PersonAdd,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { setCredentials } from '../../store/slices/authSlice';
import { useLoginMutation } from '../../api/auth.api';
import { UserRole } from '../../types/user-role';
import { extractPhoneDigits } from '../../utils/phoneUtils';

interface UniversalLoginFormProps {
  onSuccess?: () => void;
  onSwitchToRegister?: () => void;
  showRegisterLink?: boolean;
  title?: string;
  showSkipButton?: boolean;
  onSkip?: () => void;
}

const UniversalLoginForm: React.FC<UniversalLoginFormProps> = ({
  onSuccess,
  onSwitchToRegister,
  showRegisterLink = true,
  title = '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
  showSkipButton = false,
  onSkip
}) => {
  const [loginType, setLoginType] = useState<'email' | 'phone'>('email');
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [loginMutation, { isLoading }] = useLoginMutation();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    if (!login.trim()) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω');
      return false;
    }
    
    if (!password.trim()) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å');
      return false;
    }
    
    if (loginType === 'email') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(login)) {
        setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        return false;
      }
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
      const cleanPhone = login.replace(/[\s\-\(\)]/g, '');
      const digitsOnly = cleanPhone.replace(/[^\d+]/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +38 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 12 —Ü–∏—Ñ—Ä –≤—Å–µ–≥–æ (+38 + 10 —Ü–∏—Ñ—Ä)
      if (!digitsOnly.startsWith('+38') || digitsOnly.length !== 13) {
        setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +38 (0–•–•) –•–•–•-–•–•-–•–•');
        return false;
      }
    }
    
    return true;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    if (!validateForm()) {
      return;
    }

    // üîç –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    console.log('üîê UniversalLoginForm handleLogin:', {
      loginType,
      login: login.trim(),
      passwordLength: password.trim().length,
      formValid: validateForm(),
      timestamp: new Date().toISOString()
    });

    try {
      // üì± –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
      let normalizedLogin = login.trim();
      
      if (loginType === 'phone') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é extractPhoneDigits –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalizedLogin = extractPhoneDigits(login);
        
        console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
          original: login.trim(),
          normalized: normalizedLogin
        });
      }
      
      const loginData = {
        login: normalizedLogin,
        password: password.trim()
      };
      
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:', {
        loginData,
        mutationFunction: 'loginMutation',
        timestamp: new Date().toISOString()
      });

      const result = await loginMutation(loginData).unwrap();

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', {
        hasUser: !!result.user,
        userEmail: result.user?.email,
        userRole: result.user?.role,
        hasAccessToken: !!result.access_token,
        timestamp: new Date().toISOString()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux
      dispatch(setCredentials({
        user: {
          ...result.user,
          role: result.user.role as UserRole,
          role_id: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–º —Ç–∏–ø—ã
          email_verified: result.user.email_verified || false,
          phone_verified: result.user.phone_verified || false,
          created_at: result.user.created_at || new Date().toISOString(),
          updated_at: result.user.updated_at || new Date().toISOString()
        },
        accessToken: result.access_token || null
      }));

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', result);
      
      if (onSuccess) {
        onSuccess();
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        switch (result.user.role) {
          case 'client':
            navigate('/client/profile');
            break;
          case 'admin':
            navigate('/admin/dashboard');
            break;
          case 'partner':
            navigate('/partner/dashboard');
            break;
          case 'manager':
            navigate('/manager/dashboard');
            break;
          default:
            navigate('/dashboard');
        }
      }
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', {
        error: err,
        status: err.status,
        data: err.data,
        message: err.message,
        timestamp: new Date().toISOString()
      });
      setError(err.data?.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –ª–æ–≥–∏–Ω–∞
  const handleLoginTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setLoginType(event.target.value as 'email' | 'phone');
    setLogin('');
    setError('');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
  const getLoginPlaceholder = () => {
    return loginType === 'email' 
      ? 'example@email.com' 
      : '+38 (067) 123-45-67';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
  const getLoginIcon = () => {
    return loginType === 'email' ? <Email /> : <Phone />;
  };

  return (
    <Paper elevation={3} sx={{ p: 4, maxWidth: 400, mx: 'auto' }}>
      <Box component="form" onSubmit={handleLogin} noValidate>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom textAlign="center">
          {title}
        </Typography>
        
        {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–≥–∏–Ω–∞ */}
        <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
          <FormLabel component="legend">
            <Typography variant="subtitle2" color="textSecondary">
              –°–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
            </Typography>
          </FormLabel>
          <RadioGroup
            row
            value={loginType}
            onChange={handleLoginTypeChange}
            sx={{ justifyContent: 'center', mt: 1 }}
          >
            <FormControlLabel
              value="email"
              control={<Radio />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <Email fontSize="small" />
                  <span>Email</span>
                </Box>
              }
            />
            <FormControlLabel
              value="phone"
              control={<Radio />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <Phone fontSize="small" />
                  <span>–¢–µ–ª–µ—Ñ–æ–Ω</span>
                </Box>
              }
            />
          </RadioGroup>
        </FormControl>

        {/* –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ */}
        {loginType === 'email' ? (
          <TextField
            fullWidth
            label="Email"
            value={login}
            onChange={(e) => setLogin(e.target.value)}
            placeholder={getLoginPlaceholder()}
            disabled={isLoading}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  {getLoginIcon()}
                </InputAdornment>
              ),
            }}
            sx={{ mb: 2 }}
          />
        ) : (
          <TextField
            fullWidth
            label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            value={login}
            onChange={(e) => {
              // –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–∞—Å–∫–æ–π
              let value = e.target.value;
              
              // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
              let digitsOnly = value.replace(/[^\d+]/g, '');
              
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞
              if (digitsOnly.startsWith('+')) {
                digitsOnly = digitsOnly.substring(1); // —É–±–∏—Ä–∞–µ–º +
              }
              
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º 38 –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
              if (digitsOnly.match(/^0/)) {
                digitsOnly = '38' + digitsOnly;
              }
              
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –º–∞—Å–∫–æ–π +38 (0XX) XXX-XX-XX
              let formatted = '';
              if (digitsOnly.length >= 2 && digitsOnly.startsWith('38')) {
                formatted = '+38';
                const remaining = digitsOnly.substring(2);
                
                if (remaining.length > 0) {
                  formatted += ' (';
                  if (remaining.length <= 3) {
                    formatted += remaining;
                  } else {
                    formatted += remaining.substring(0, 3) + ')';
                    const rest = remaining.substring(3);
                    
                    if (rest.length > 0) {
                      formatted += ' ';
                      if (rest.length <= 3) {
                        formatted += rest;
                      } else {
                        formatted += rest.substring(0, 3);
                        if (rest.length > 3) {
                          formatted += '-';
                          if (rest.length <= 5) {
                            formatted += rest.substring(3);
                          } else {
                            formatted += rest.substring(3, 5);
                            if (rest.length > 5) {
                              formatted += '-' + rest.substring(5, 7);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else if (digitsOnly.length > 0) {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å +
                formatted = '+' + digitsOnly;
              } else {
                formatted = value; // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              }
              
              setLogin(formatted);
            }}
            placeholder={getLoginPlaceholder()}
            disabled={isLoading}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  {getLoginIcon()}
                </InputAdornment>
              ),
            }}
            sx={{ mb: 2 }}
          />
        )}

        {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
        <TextField
          fullWidth
          label="–ü–∞—Ä–æ–ª—å"
          type={showPassword ? 'text' : 'password'}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          disabled={isLoading}
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconButton
                  onClick={() => setShowPassword(!showPassword)}
                  edge="end"
                >
                  {showPassword ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </InputAdornment>
            ),
          }}
          sx={{ mb: 2 }}
        />

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
        <Button
          type="submit"
          fullWidth
          variant="contained"
          disabled={isLoading}
          startIcon={isLoading ? <CircularProgress size={20} /> : <LoginIcon />}
          sx={{ mb: 2 }}
        >
          {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
        </Button>

        {/* –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å */}
        <Box textAlign="center" sx={{ mb: 2 }}>
          <Link
            component="button"
            variant="body2"
            onClick={() => navigate('/forgot-password')}
            sx={{ textDecoration: 'none' }}
          >
            –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
          </Link>
        </Box>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        {showRegisterLink && (
          <>
            <Divider sx={{ my: 2 }}>
              <Chip label="–∏–ª–∏" size="small" />
            </Divider>

            {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */}
            <Box textAlign="center" sx={{ mb: showSkipButton ? 2 : 0 }}>
              <Typography variant="body2" color="textSecondary">
                –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
                <Link
                  component="button"
                  variant="body2"
                  onClick={onSwitchToRegister || (() => navigate('/auth/register'))}
                  sx={{ textDecoration: 'none' }}
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Link>
              </Typography>
            </Box>
          </>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—Ö–æ–¥–∞" */}
        {showSkipButton && (
          <Button
            variant="text"
            fullWidth
            color="primary"
            onClick={onSkip}
            startIcon={<CloseIcon />}
            sx={{ mt: showRegisterLink ? 0 : 2 }}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—Ö–æ–¥–∞
          </Button>
        )}
      </Box>
    </Paper>
  );
};

export default UniversalLoginForm; 