const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

async function testServiceDeletion() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ API...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginOptions = {
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const loginData = JSON.stringify({
      login: 'admin@test.com',
      password: 'admin'
    });

    const loginResponse = await makeRequest(loginOptions, loginData);
    console.log(`–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${loginResponse.statusCode}`);
    
    if (loginResponse.statusCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResponse.body);
      return;
    }

    const authData = JSON.parse(loginResponse.body);
    const token = authData.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...');
    const categoriesOptions = {
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/service_categories',
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const categoriesResponse = await makeRequest(categoriesOptions);
    console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesResponse.statusCode}`);
    
    if (categoriesResponse.statusCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesResponse.body);
      return;
    }

    const categories = JSON.parse(categoriesResponse.body);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    if (categories.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const categoryId = categories[0].id;
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID: ${categoryId}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const servicesOptions = {
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const servicesResponse = await makeRequest(servicesOptions);
    console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: ${servicesResponse.statusCode}`);
    
    if (servicesResponse.statusCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥:', servicesResponse.body);
      return;
    }

    const services = JSON.parse(servicesResponse.body);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${services.length} —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);

    if (services.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —É—Å–ª—É–≥—É
      const createServiceOptions = {
        hostname: 'localhost',
        port: 8000,
        path: `/api/v1/service_categories/${categoryId}/services`,
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };

      const serviceData = JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        description: '–≠—Ç–∞ —É—Å–ª—É–≥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∞',
        default_duration: 30,
        is_active: true
      });

      const createResponse = await makeRequest(createServiceOptions, serviceData);
      console.log(`–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏: ${createResponse.statusCode}`);
      
      if (createResponse.statusCode !== 201) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏:', createResponse.body);
        return;
      }

      const newService = JSON.parse(createResponse.body);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ ID: ${newService.id}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
      const updatedServicesResponse = await makeRequest(servicesOptions);
      const updatedServices = JSON.parse(updatedServicesResponse.body);
      services.push(...updatedServices.filter(s => s.id === newService.id));
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —É—Å–ª—É–≥–∏
    const serviceToDelete = services[0];
    console.log(`\n4. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ ID: ${serviceToDelete.id} ("${serviceToDelete.name}")...`);
    
    const deleteOptions = {
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services/${serviceToDelete.id}`,
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    console.log(`DELETE URL: ${deleteOptions.path}`);
    
    const deleteResponse = await makeRequest(deleteOptions);
    console.log(`–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: ${deleteResponse.statusCode}`);
    console.log(`–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: "${deleteResponse.body}"`);
    console.log(`–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, deleteResponse.headers);

    if (deleteResponse.statusCode === 204) {
      console.log('‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å 204 No Content)');
    } else if (deleteResponse.statusCode === 200) {
      console.log('‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å 200 OK)');
    } else if (deleteResponse.statusCode === 422) {
      console.log('‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö)');
      console.log('–û—Ç–≤–µ—Ç API:', deleteResponse.body);
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: ${deleteResponse.statusCode}`);
      console.log('–û—Ç–≤–µ—Ç API:', deleteResponse.body);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...');
    const checkResponse = await makeRequest(servicesOptions);
    
    if (checkResponse.statusCode === 200) {
      const remainingServices = JSON.parse(checkResponse.body);
      const deletedService = remainingServices.find(s => s.id === serviceToDelete.id);
      
      if (deletedService) {
        console.log('‚ùå –£—Å–ª—É–≥–∞ –ù–ï —É–¥–∞–ª–µ–Ω–∞ - –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ');
      } else {
        console.log('‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ');
      }
      
      console.log(`–£—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${remainingServices.length}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testServiceDeletion();
