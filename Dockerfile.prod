# Многоэтапная сборка для production React приложения
FROM node:18-alpine AS builder

# Устанавливаем системные зависимости
RUN apk update && apk add --no-cache \
    curl \
    git

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY package.json package-lock.json ./

# Устанавливаем зависимости
RUN npm ci --only=production=false

# Копируем исходный код приложения
COPY . .

# Собираем приложение для production
RUN npm run build

# Production образ с nginx
FROM nginx:alpine AS production

# Устанавливаем curl для health check
RUN apk add --no-cache curl

# Копируем собранное приложение
COPY --from=builder /app/build /usr/share/nginx/html

# Копируем конфигурацию nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Создаем пользователя для безопасности
RUN addgroup -g 1000 -S appgroup && \
    adduser -u 1000 -S appuser -G appgroup

# Устанавливаем права доступа
RUN chown -R appuser:appgroup /usr/share/nginx/html && \
    chown -R appuser:appgroup /var/cache/nginx && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /etc/nginx/conf.d

# Переключаемся на пользователя
USER appuser

# Открываем порт
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Команда по умолчанию
CMD ["nginx", "-g", "daemon off;"] 