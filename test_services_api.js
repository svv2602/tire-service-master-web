#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å–ª—É–≥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const https = require('https');
const http = require('http');

const API_URL = 'http://localhost:8000/api/v1';
let authToken = '';

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é
const TEST_TOKEN = process.env.TEST_TOKEN || '';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å–ª—É–≥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n');

async function makeRequest(method, endpoint, data = null) {
    return new Promise((resolve, reject) => {
        const url = new URL(endpoint, API_URL);
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...(TEST_TOKEN && { 'Authorization': `Bearer ${TEST_TOKEN}` })
            }
        };

        const req = http.request(url, options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const result = body ? JSON.parse(body) : {};
                    resolve({ status: res.statusCode, data: result });
                } catch (e) {
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });

        req.on('error', reject);

        if (data) {
            req.write(JSON.stringify(data));
        }

        req.end();
    });
}

async function testServiceCategories() {
    console.log('üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥');
    console.log('================================\n');

    try {
        // 1. GET - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('1. GET /service_categories');
        const getResult = await makeRequest('GET', '/service_categories?page=1&per_page=10');
        console.log(`   –°—Ç–∞—Ç—É—Å: ${getResult.status}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${getResult.data.data?.length || 0}`);
        console.log(`   –ü–∞–≥–∏–Ω–∞—Ü–∏—è: ${JSON.stringify(getResult.data.pagination || {})}\n`);

        // 2. POST - –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        console.log('2. POST /service_categories');
        const createData = {
            service_category: {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è API',
                description: '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç',
                is_active: true,
                sort_order: 999
            }
        };
        
        const createResult = await makeRequest('POST', '/service_categories', createData);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${createResult.status}`);
        
        if (createResult.status === 201 || createResult.status === 200) {
            const categoryId = createResult.data.id;
            console.log(`   –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID: ${categoryId}\n`);

            // 3. PATCH - –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            console.log(`3. PATCH /service_categories/${categoryId}`);
            const updateData = {
                service_category: {
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è API (–û–±–Ω–æ–≤–ª–µ–Ω–æ)',
                    description: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç'
                }
            };
            
            const updateResult = await makeRequest('PATCH', `/service_categories/${categoryId}`, updateData);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${updateResult.status}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResult.data.name || '–û—à–∏–±–∫–∞'}\n`);

            // 4. DELETE - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            console.log(`4. DELETE /service_categories/${categoryId}`);
            const deleteResult = await makeRequest('DELETE', `/service_categories/${categoryId}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${deleteResult.status}`);
            console.log(`   –£–¥–∞–ª–µ–Ω–∏–µ: ${deleteResult.status === 204 || deleteResult.status === 200 ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}\n`);
        } else {
            console.log(`   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(createResult.data)}\n`);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
    }
}

async function testServices() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥');
    console.log('=====================\n');

    try {
        // 1. GET - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏
        console.log('1. GET /services');
        const getResult = await makeRequest('GET', '/services');
        console.log(`   –°—Ç–∞—Ç—É—Å: ${getResult.status}`);
        console.log(`   –£—Å–ª—É–≥: ${(getResult.data.data || getResult.data || []).length}\n`);

        // 2. POST - –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É
        console.log('2. POST /services');
        const createData = {
            service: {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ API',
                description: '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç',
                default_duration: 45,
                is_active: true,
                sort_order: 999
            }
        };
        
        const createResult = await makeRequest('POST', '/services', createData);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${createResult.status}`);
        
        if (createResult.status === 201 || createResult.status === 200) {
            const serviceId = createResult.data.id;
            console.log(`   –°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞ —Å ID: ${serviceId}\n`);

            // 3. GET by ID - –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID
            console.log(`3. GET /services/${serviceId}`);
            const getByIdResult = await makeRequest('GET', `/services/${serviceId}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${getByIdResult.status}`);
            console.log(`   –£—Å–ª—É–≥–∞: ${getByIdResult.data.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n`);

            // 4. PATCH - –û–±–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É
            console.log(`4. PATCH /services/${serviceId}`);
            const updateData = {
                service: {
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ API (–û–±–Ω–æ–≤–ª–µ–Ω–æ)',
                    description: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç'
                }
            };
            
            const updateResult = await makeRequest('PATCH', `/services/${serviceId}`, updateData);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${updateResult.status}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResult.data.name || '–û—à–∏–±–∫–∞'}\n`);

            // 5. DELETE - –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É
            console.log(`5. DELETE /services/${serviceId}`);
            const deleteResult = await makeRequest('DELETE', `/services/${serviceId}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${deleteResult.status}`);
            console.log(`   –£–¥–∞–ª–µ–Ω–∏–µ: ${deleteResult.status === 204 || deleteResult.status === 200 ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}\n`);
        } else {
            console.log(`   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(createResult.data)}\n`);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥:', error.message);
    }
}

async function main() {
    if (!TEST_TOKEN) {
        console.log('‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_TOKEN –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞.\n');
    }

    await testServiceCategories();
    await testServices();
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main().catch(console.error);
