console.log('üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥...');

const http = require('http');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function httpRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          headers: res.headers,
          data: body
        });
      });
    });
    
    req.on('error', reject);
    if (data) req.write(data);
    req.end();
  });
}

async function runTest() {
  try {
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginResp = await httpRequest({
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/auth/login',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    }, JSON.stringify({
      login: 'admin@test.com',
      password: 'admin'
    }));
    
    if (loginResp.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResp.data);
      return;
    }
    
    const { token } = JSON.parse(loginResp.data);
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoriesResp = await httpRequest({
      hostname: 'localhost',
      port: 8000,
      path: '/api/v1/service_categories',
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (categoriesResp.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesResp.data);
      return;
    }
    
    const categories = JSON.parse(categoriesResp.data);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    if (categories.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const categoryId = categories[0].id;
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryId}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥
    const servicesResp = await httpRequest({
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services`,
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (servicesResp.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥:', servicesResp.data);
      return;
    }
    
    let services = JSON.parse(servicesResp.data);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${services.length} —É—Å–ª—É–≥`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ª—É–≥
    if (services.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏...');
      
      const createResp = await httpRequest({
        hostname: 'localhost',
        port: 8000,
        path: `/api/v1/service_categories/${categoryId}/services`,
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }, JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        description: '–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤ —Ö–æ–¥–µ —Ç–µ—Å—Ç–∞',
        default_duration: 30,
        is_active: true
      }));
      
      if (createResp.status !== 201) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏:', createResp.data);
        return;
      }
      
      const newService = JSON.parse(createResp.data);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞ ID: ${newService.id}`);
      services = [newService];
    }
    
    // –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø
    const serviceToDelete = services[0];
    console.log(`\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø —É—Å–ª—É–≥–∏ ID: ${serviceToDelete.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${serviceToDelete.name}"`);
    
    const deleteUrl = `/api/v1/service_categories/${categoryId}/services/${serviceToDelete.id}`;
    console.log(`   DELETE URL: ${deleteUrl}`);
    
    const deleteResp = await httpRequest({
      hostname: 'localhost',
      port: 8000,
      path: deleteUrl,
      method: 'DELETE',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –£–î–ê–õ–ï–ù–ò–Ø:`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${deleteResp.status}`);
    console.log(`   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: "${deleteResp.data}"`);
    console.log(`   Content-Type: ${deleteResp.headers['content-type'] || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (deleteResp.status === 204) {
      console.log('‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç—É—Å 204 (No Content) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
    } else if (deleteResp.status === 200) {
      console.log('‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç—É—Å 200 (OK) - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
    } else if (deleteResp.status === 422) {
      console.log('‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –£—Å–ª—É–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞');
    } else {
      console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${deleteResp.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É—Å–ª—É–≥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø...');
    const checkResp = await httpRequest({
      hostname: 'localhost',
      port: 8000,
      path: `/api/v1/service_categories/${categoryId}/services`,
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (checkResp.status === 200) {
      const remainingServices = JSON.parse(checkResp.data);
      const stillExists = remainingServices.find(s => s.id === serviceToDelete.id);
      
      if (stillExists) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –£—Å–ª—É–≥–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ');
      } else {
        console.log('‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞');
      }
      
      console.log(`   –£—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: ${remainingServices.length}`);
    }
    
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

runTest();
