// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API –æ—Ç–≤–µ—Ç–æ–≤
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ http://localhost:3008

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤...');

const API_BASE = 'http://localhost:8000/api/v1';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
async function apiRequest(endpoint, options = {}) {
    const token = localStorage.getItem('tvoya_shina_token');
    
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
            ...(token && { 'Authorization': `Bearer ${token}` })
        }
    };
    
    const finalOptions = {
        ...defaultOptions,
        ...options,
        headers: {
            ...defaultOptions.headers,
            ...options.headers
        }
    };
    
    try {
        const response = await fetch(`${API_BASE}${endpoint}`, finalOptions);
        const data = await response.json();
        
        return {
            success: response.ok,
            status: response.status,
            data: data,
            headers: Object.fromEntries(response.headers.entries())
        };
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
function analyzeResponse(endpoint, response) {
    console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ ${endpoint}:`);
    console.log('  –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('  –£—Å–ø–µ—Ö:', response.success);
    
    if (response.success && response.data) {
        console.log('  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const data = response.data;
        console.log('    - –ï—Å—Ç—å –ø–æ–ª–µ "data":', !!data.data);
        console.log('    - –ï—Å—Ç—å –ø–æ–ª–µ "meta":', !!data.meta);
        console.log('    - –ï—Å—Ç—å –ø–æ–ª–µ "pagination":', !!data.pagination);
        console.log('    - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', Array.isArray(data) ? 'Array' : typeof data);
        
        if (data.data) {
            console.log('    - –¢–∏–ø data.data:', Array.isArray(data.data) ? 'Array' : typeof data.data);
            if (Array.isArray(data.data) && data.data.length > 0) {
                console.log('    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', data.data.length);
                console.log('    - –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞:', data.data[0]);
                console.log('    - –ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', Object.keys(data.data[0]));
            }
        } else if (Array.isArray(data) && data.length > 0) {
            console.log('    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', data.length);
            console.log('    - –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞:', data[0]);
            console.log('    - –ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', Object.keys(data[0]));
        } else if (typeof data === 'object') {
            console.log('    - –ü–æ–ª—è –æ–±—ä–µ–∫—Ç–∞:', Object.keys(data));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (data.meta) {
            console.log('    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', data.meta);
        }
        
        if (data.pagination) {
            console.log('    - –ü–∞–≥–∏–Ω–∞—Ü–∏—è:', data.pagination);
        }
    } else {
        console.log('  –û—à–∏–±–∫–∞:', response.error || response.data);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testAllEndpoints() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    
    const endpoints = [
        '/health',
        '/regions',
        '/cities',
        '/service_points',
        '/partners',
        '/services',
        '/service_categories',
        '/users/me'
    ];
    
    for (const endpoint of endpoints) {
        try {
            const response = await apiRequest(endpoint);
            analyzeResponse(endpoint, response);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${endpoint}:`, error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
async function testEndpointWithParams(endpoint, params = {}) {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${endpoint} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params);
    
    const queryString = new URLSearchParams(params).toString();
    const fullEndpoint = queryString ? `${endpoint}?${queryString}` : endpoint;
    
    const response = await apiRequest(fullEndpoint);
    analyzeResponse(fullEndpoint, response);
    
    return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ ID
async function checkIdTypes() {
    console.log('\nüî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ID...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã
    const regionsResponse = await apiRequest('/regions');
    if (regionsResponse.success && regionsResponse.data) {
        const regions = regionsResponse.data.data || regionsResponse.data;
        if (Array.isArray(regions) && regions.length > 0) {
            const firstRegion = regions[0];
            console.log('  –†–µ–≥–∏–æ–Ω ID —Ç–∏–ø:', typeof firstRegion.id, '- –∑–Ω–∞—á–µ–Ω–∏–µ:', firstRegion.id);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞
    const citiesResponse = await apiRequest('/cities');
    if (citiesResponse.success && citiesResponse.data) {
        const cities = citiesResponse.data.data || citiesResponse.data;
        if (Array.isArray(cities) && cities.length > 0) {
            const firstCity = cities[0];
            console.log('  –ì–æ—Ä–æ–¥ ID —Ç–∏–ø:', typeof firstCity.id, '- –∑–Ω–∞—á–µ–Ω–∏–µ:', firstCity.id);
            console.log('  –ì–æ—Ä–æ–¥ region_id —Ç–∏–ø:', typeof firstCity.region_id, '- –∑–Ω–∞—á–µ–Ω–∏–µ:', firstCity.region_id);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏
    const servicePointsResponse = await apiRequest('/service_points');
    if (servicePointsResponse.success && servicePointsResponse.data) {
        const servicePoints = servicePointsResponse.data.data || servicePointsResponse.data;
        if (Array.isArray(servicePoints) && servicePoints.length > 0) {
            const firstServicePoint = servicePoints[0];
            console.log('  –°–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ ID —Ç–∏–ø:', typeof firstServicePoint.id, '- –∑–Ω–∞—á–µ–Ω–∏–µ:', firstServicePoint.id);
            console.log('  –°–µ—Ä–≤–∏—Å–Ω–∞—è —Ç–æ—á–∫–∞ partner_id —Ç–∏–ø:', typeof firstServicePoint.partner_id, '- –∑–Ω–∞—á–µ–Ω–∏–µ:', firstServicePoint.partner_id);
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('  testAllEndpoints() - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã');
console.log('  checkIdTypes() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã ID');
console.log('  testEndpointWithParams(endpoint, params) - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
console.log('  apiRequest(endpoint, options) - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.apiDebug = {
    testAllEndpoints,
    checkIdTypes,
    testEndpointWithParams,
    apiRequest,
    analyzeResponse
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
testAllEndpoints().then(() => {
    console.log('\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.apiDebug –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.');
}); 