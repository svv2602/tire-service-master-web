#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º —á–µ—Ä–µ–∑ Node.js
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
 */

const https = require('https');
const http = require('http');

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ä–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const FORMS_TO_CHECK = [
    // –ü–∞—Ä—Ç–Ω–µ—Ä—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', url: '/partners/new', hasFormData: false, api: '/partners' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', url: '/partners/1/edit', hasFormData: false, api: '/partners/1' },
    
    // –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏ (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏', url: '/partners/1/service-points/new', hasFormData: true, api: '/partners/1/service_points' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ç–æ—á–∫–∏', url: '/partners/1/service-points/1/edit', hasFormData: true, api: '/partners/1/service_points/1' },
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url: '/users/new', hasFormData: false, api: '/users' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url: '/users/1/edit', hasFormData: false, api: '/users/1' },
    
    // –£—Å–ª—É–≥–∏ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥', url: '/services/new', hasFormData: false, api: '/service_categories' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥', url: '/services/1/edit', hasFormData: false, api: '/service_categories/1' },
    
    // –†–µ–≥–∏–æ–Ω—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', url: '/regions/new', hasFormData: false, api: '/regions' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', url: '/regions/1/edit', hasFormData: false, api: '/regions/1' },
    
    // –ì–æ—Ä–æ–¥–∞ (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', url: '/cities/new', hasFormData: false, api: '/cities' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', url: '/cities/1/edit', hasFormData: false, api: '/cities/1' },
    
    // –ö–ª–∏–µ–Ω—Ç—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', url: '/clients/new', hasFormData: false, api: '/clients' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', url: '/clients/1/edit', hasFormData: false, api: '/clients/1' },
    
    // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (JSON)
    { name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', url: '/clients/1/cars/new', hasFormData: false, api: '/clients/1/cars' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', url: '/clients/1/cars/1/edit', hasFormData: false, api: '/clients/1/cars/1' },
    
    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', url: '/bookings/new', hasFormData: false, api: '/bookings' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', url: '/bookings/1/edit', hasFormData: false, api: '/bookings/1' },
    
    // –û—Ç–∑—ã–≤—ã (JSON)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', url: '/reviews/new', hasFormData: false, api: '/reviews' },
    { name: '–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤', url: '/reviews/1/reply', hasFormData: false, api: '/reviews/1/reply' },
    
    // –°—Ç–∞—Ç—å–∏ (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏', url: '/articles/new', hasFormData: true, api: '/articles' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏', url: '/articles/1/edit', hasFormData: true, api: '/articles/1' },
    
    // –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (–≤–æ–∑–º–æ–∂–Ω–æ FormData)
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', url: '/page-content/1/edit', hasFormData: true, api: '/page_contents/1' },
    
    // –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (FormData - –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤)
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ', url: '/car-brands/new', hasFormData: true, api: '/car_brands' },
    { name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ', url: '/car-brands/1/edit', hasFormData: true, api: '/car_brands/1' },
];

let authToken = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        const requestOptions = {
            hostname: urlObj.hostname,
            port: urlObj.port,
            path: urlObj.pathname + urlObj.search,
            method: options.method || 'GET',
            headers: {
                'Accept': 'application/json',
                'User-Agent': 'Forms-Checker/1.0',
                ...options.headers
            }
        };

        if (options.body) {
            if (typeof options.body === 'string') {
                requestOptions.headers['Content-Length'] = Buffer.byteLength(options.body);
            }
        }

        const req = http.request(requestOptions, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonData = data ? JSON.parse(data) : {};
                    resolve({
                        status: res.statusCode,
                        statusText: res.statusMessage,
                        ok: res.statusCode >= 200 && res.statusCode < 300,
                        data: jsonData,
                        headers: res.headers
                    });
                } catch (e) {
                    resolve({
                        status: res.statusCode,
                        statusText: res.statusMessage,
                        ok: res.statusCode >= 200 && res.statusCode < 300,
                        data: data,
                        headers: res.headers
                    });
                }
            });
        });

        req.on('error', (err) => {
            reject(err);
        });

        if (options.body) {
            req.write(options.body);
        }

        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function getAuthToken() {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    try {
        const response = await makeRequest('http://localhost:8000/api/v1/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                auth: {
                    login: 'admin@test.com',
                    password: 'admin123'
                }
            })
        });

        if (response.ok && response.data.tokens?.access) {
            authToken = response.data.tokens.access;
            console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user.email} (${response.data.user.role})`);
            return true;
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:', response.data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function createTestData(form, isUpdate = false) {
    const baseData = {
        name: isUpdate ? 'Updated Test' : 'Test',
        description: 'Test description'
    };
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º
    if (form.api.includes('partners')) {
        return {
            partner: {
                ...baseData,
                company_name: baseData.name,
                contact_person: 'Test Contact',
                legal_address: 'Test Address',
                region_id: 1,
                city_id: 1,
                is_active: true
            }
        };
    }
    
    if (form.api.includes('service_points')) {
        return {
            service_point: {
                ...baseData,
                address: 'Test Address',
                city_id: 1,
                partner_id: 1,
                contact_phone: '+380123456789',
                is_active: true,
                work_status: 'working',
                latitude: 50.4501,
                longitude: 30.5234
            }
        };
    }
    
    if (form.api.includes('users')) {
        return {
            user: {
                ...baseData,
                email: 'test@example.com',
                first_name: 'Test',
                last_name: 'User',
                phone: '+380123456789',
                role_id: 1
            }
        };
    }
    
    if (form.api.includes('service_categories')) {
        return {
            service_category: baseData
        };
    }
    
    if (form.api.includes('regions')) {
        return {
            region: baseData
        };
    }
    
    if (form.api.includes('cities')) {
        return {
            city: {
                ...baseData,
                region_id: 1
            }
        };
    }
    
    return baseData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
async function checkForm(form) {
    console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: ${form.name}`);
    console.log(`URL: ${form.url}`);
    console.log(`API: ${form.api}`);
    console.log(`FormData: ${form.hasFormData ? '–î–∞' : '–ù–µ—Ç'}`);
    
    const results = {
        name: form.name,
        url: form.url,
        api: form.api,
        hasFormData: form.hasFormData,
        tests: []
    };
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if (form.url.includes('/edit')) {
        try {
            const getResult = await makeRequest(`http://localhost:8000/api/v1${form.api}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            });
            
            results.tests.push({
                test: 'GET –∑–∞–ø—Ä–æ—Å (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö)',
                status: getResult.status,
                ok: getResult.ok,
                message: getResult.statusText
            });
            
            if (getResult.ok) {
                console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
            } else {
                console.log(`‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: ${getResult.status} ${getResult.statusText}`);
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            results.tests.push({
                test: 'GET –∑–∞–ø—Ä–æ—Å (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö)',
                status: 0,
                ok: false,
                message: error.message
            });
        }
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST/PATCH –∑–∞–ø—Ä–æ—Å–∞
    const isUpdate = form.url.includes('/edit');
    const method = isUpdate ? 'PATCH' : 'POST';
    const endpoint = form.api;
    
    try {
        const testData = createTestData(form, isUpdate);
        
        const postResult = await makeRequest(`http://localhost:8000/api/v1${endpoint}`, {
            method: method,
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        results.tests.push({
            test: `${method} –∑–∞–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã)`,
            status: postResult.status,
            ok: postResult.ok,
            message: postResult.statusText
        });
        
        if (postResult.ok || postResult.status === 422) {
            console.log(`‚úÖ ${method} –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (${postResult.status})`);
        } else {
            console.log(`‚ùå ${method} –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: ${postResult.status} ${postResult.statusText}`);
            if (postResult.data && typeof postResult.data === 'object') {
                console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(postResult.data, null, 2));
            }
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        results.tests.push({
            test: `${method} –∑–∞–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã)`,
            status: 0,
            ok: false,
            message: error.message
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const hasAuthError = results.tests.some(t => t.status === 401);
    const hasFormDataError = results.tests.some(t => t.status === 400 && form.hasFormData);
    const hasServerError = results.tests.some(t => t.status >= 500);
    
    if (hasAuthError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)');
    }
    if (hasFormDataError) {
        console.log('‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ FormData (400)');
    }
    if (hasServerError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5xx)');
    }
    
    // 422 - –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const allOk = results.tests.every(t => t.ok || t.status === 422 || t.status === 404);
    if (allOk) {
        console.log('‚úÖ –§–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º
async function checkAllForms() {
    console.log('üöÄ === –ù–ê–ß–ê–õ–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò –í–°–ï–• –§–û–†–ú ===\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authSuccess = await getAuthToken();
    if (!authSuccess) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.');
        return;
    }
    
    const results = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É
    for (const form of FORMS_TO_CHECK) {
        try {
            const result = await checkForm(form);
            results.push(result);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${form.name}:`, error.message);
            results.push({
                name: form.name,
                url: form.url,
                error: error.message
            });
        }
    }
    
    // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
    
    const authErrors = results.filter(r => r.tests?.some(t => t.status === 401));
    const formDataErrors = results.filter(r => r.hasFormData && r.tests?.some(t => t.status === 400));
    const serverErrors = results.filter(r => r.tests?.some(t => t.status >= 500));
    const workingForms = results.filter(r => r.tests?.every(t => t.ok || t.status === 422 || t.status === 404));
    
    console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ —Ñ–æ—Ä–º—ã: ${workingForms.length}/${FORMS_TO_CHECK.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401): ${authErrors.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ FormData (400): ${formDataErrors.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (5xx): ${serverErrors.length}`);
    
    if (authErrors.length > 0) {
        console.log('\nüîê –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
        authErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    if (formDataErrors.length > 0) {
        console.log('\nüìã –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ FormData:');
        formDataErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    if (serverErrors.length > 0) {
        console.log('\nüî• –§–æ—Ä–º—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
        serverErrors.forEach(r => console.log(`  - ${r.name}`));
    }
    
    console.log('\nüèÅ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ FormData —Ñ–æ—Ä–º
async function checkFormDataForms() {
    const formDataForms = FORMS_TO_CHECK.filter(form => form.hasFormData);
    
    console.log('üìã === –ü–†–û–í–ï–†–ö–ê –§–û–†–ú –° FORMDATA ===\n');
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${formDataForms.length} —Ñ–æ—Ä–º —Å FormData:`);
    formDataForms.forEach(form => console.log(`  - ${form.name}`));
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authSuccess = await getAuthToken();
    if (!authSuccess) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.');
        return;
    }
    
    const results = [];
    for (const form of formDataForms) {
        const result = await checkForm(form);
        results.push(result);
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    return results;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.includes('--formdata')) {
        checkFormDataForms().catch(console.error);
    } else {
        checkAllForms().catch(console.error);
    }
}