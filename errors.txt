Compiled with problems:
×
ERROR in src/pages/catalog/RegionsPage.tsx:128:9
TS2322: Type 'boolean | undefined' is not assignable to type 'boolean'.
  Type 'undefined' is not assignable to type 'boolean'.
    126 |         name: region.name,
    127 |         code: region.code || '',
  > 128 |         is_active: region.is_active,
        |         ^^^^^^^^^
    129 |       });
    130 |     } else {
    131 |       setEditingRegion(null);
ERROR in src/pages/cities/CitiesPage.tsx:49:16
TS2724: '"../../types/models"' has no exported member named 'CityFilter'. Did you mean 'ClientFilter'?
    47 |   useGetRegionsQuery 
    48 | } from '../../api/regions.api';
  > 49 | import { City, CityFilter, CityFormData, Region, ApiResponse } from '../../types/models';
       |                ^^^^^^^^^^
    50 |
    51 | const CitiesPage: React.FC = () => {
    52 |   const navigate = useNavigate();
ERROR in src/pages/cities/CitiesPage.tsx:127:9
TS2322: Type 'Partial<CityFormData>' is not assignable to type 'Partial<City>'.
  Types of property 'region_id' are incompatible.
    Type 'number | undefined' is not assignable to type 'string | undefined'.
      Type 'number' is not assignable to type 'string'.
    125 |       await updateCity({
    126 |         id: city.id.toString(),
  > 127 |         city: { is_active: !city.is_active } as Partial<CityFormData>
        |         ^^^^
    128 |       }).unwrap();
    129 |     } catch (error) {
    130 |       console.error('Ошибка при изменении статуса:', error);
ERROR in src/pages/partners/PartnerFormPage.tsx:132:52
TS2322: Type 'number | undefined' is not assignable to type 'string | undefined'.
  Type 'number' is not assignable to type 'string'.
    130 |   });
    131 |   const { data: regionsData } = useGetRegionsQuery({});
  > 132 |   const { data: citiesData } = useGetCitiesQuery({ region_id: selectedRegionId }, { skip: !selectedRegionId });
        |                                                    ^^^^^^^^^
    133 |   const [createPartner, { isLoading: createLoading }] = useCreatePartnerMutation();
    134 |   const [updatePartner, { isLoading: updateLoading }] = useUpdatePartnerMutation();
    135 |
ERROR in src/pages/partners/PartnersPage.tsx:194:27
TS2345: Argument of type '(partner: Partner) => JSX.Element' is not assignable to parameter of type '(value: Partner, index: number, array: Partner[]) => Element'.
  Types of parameters 'partner' and 'value' are incompatible.
    Type 'import("/home/snisar/mobi_tz/tire-service-master-web/src/types/partner").Partner' is not assignable to type 'import("/home/snisar/mobi_tz/tire-service-master-web/src/types/models").Partner'.
      Types of property 'user' are incompatible.
        Type '{ id: string; email: string; phone: string; first_name: string; last_name: string; } | undefined' is not assignable to type 'User | undefined'.
          Type '{ id: string; email: string; phone: string; first_name: string; last_name: string; }' is missing the following properties from type 'User': role, is_active, email_verified, phone_verified, and 2 more.
    192 |           </TableHead>
    193 |           <TableBody>
  > 194 |             {partners.map((partner: Partner) => (
        |                           ^^^^^^^^^^^^^^^^^^^^^^^
  > 195 |               <TableRow key={partner.id}>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 196 |                 <TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 197 |                   <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 198 |                     <Avatar sx={{ bgcolor: 'primary.main' }}>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 199 |                       {getPartnerInitials(partner)}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 200 |                     </Avatar>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 201 |                     <Box>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 202 |                       <Typography>{partner.company_name}</Typography>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 203 |                       <Typography variant="body2" color="textSecondary">
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 204 |                         {partner.company_description}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 205 |                       </Typography>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 206 |                     </Box>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 207 |                   </Box>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 208 |                 </TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 209 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 210 |                 <TableCell>{partner.contact_person}</TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 211 |                 <TableCell>{partner.user?.phone}</TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 212 |                 <TableCell>{partner.user?.email}</TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 213 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 214 |                 <TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 215 |                   <Chip
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 216 |                     icon={partner.is_active ? <CheckIcon /> : <CloseIcon />}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 217 |                     label={partner.is_active ? 'Активен' : 'Неактивен'}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 218 |                     color={partner.is_active ? 'success' : 'error'}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 219 |                     size="small"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 220 |                   />
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 221 |                 </TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 222 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 223 |                 <TableCell align="right">
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 224 |                   <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 225 |                     <Tooltip title="Редактировать">
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 226 |                       <IconButton
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 227 |                         onClick={() => navigate(`/partners/${partner.id}/edit`)}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 228 |                         size="small"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 229 |                       >
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 230 |                         <EditIcon />
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 231 |                       </IconButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 232 |                     </Tooltip>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 233 |                     <Tooltip title={partner.is_active ? 'Деактивировать' : 'Активировать'}>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 234 |                       <IconButton
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 235 |                         onClick={() => handleToggleStatus(partner)}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 236 |                         size="small"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 237 |                         color={partner.is_active ? 'error' : 'success'}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 238 |                       >
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 239 |                         {partner.is_active ? <CloseIcon /> : <CheckIcon />}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 240 |                       </IconButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 241 |                     </Tooltip>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 242 |                     <Tooltip title="Удалить">
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 243 |                       <IconButton
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 244 |                         onClick={() => handleDeleteClick(partner)}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 245 |                         size="small"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 246 |                         color="error"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 247 |                       >
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 248 |                         <DeleteIcon />
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 249 |                       </IconButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 250 |                     </Tooltip>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 251 |                   </Box>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 252 |                 </TableCell>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 253 |               </TableRow>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 254 |             ))}
        | ^^^^^^^^^^^^^^
    255 |           </TableBody>
    256 |         </Table>
    257 |         <TablePagination
ERROR in src/pages/regions/RegionsPage.tsx:46:18
TS2305: Module '"../../types/models"' has no exported member 'RegionFilter'.
    44 |   useUpdateRegionMutation,
    45 | } from '../../api/regions.api';
  > 46 | import { Region, RegionFilter, RegionFormData, ApiResponse } from '../../types/models';
       |                  ^^^^^^^^^^^^
    47 |
    48 | const RegionsPage: React.FC = () => {
    49 |   const navigate = useNavigate();
ERROR in src/pages/reviews/MyReviewsPage.tsx:73:30
TS2339: Property 'length' does not exist on type 'ApiResponse<Review> | never[]'.
  Property 'length' does not exist on type 'ApiResponse<Review>'.
    71 |   const error = reviewsError;
    72 |   const reviews = reviewsData || [];
  > 73 |   const totalItems = reviews.length;
       |                              ^^^^^^
    74 |
    75 |   // Обработчики событий
    76 |   const handleChangePage = (event: unknown, newPage: number) => {
ERROR in src/pages/reviews/MyReviewsPage.tsx:190:22
TS2339: Property 'map' does not exist on type 'ApiResponse<Review> | never[]'.
  Property 'map' does not exist on type 'ApiResponse<Review>'.
    188 |           </TableHead>
    189 |           <TableBody>
  > 190 |             {reviews.map((review: Review) => (
        |                      ^^^
    191 |               <TableRow key={review.id}>
    192 |                 <TableCell>
    193 |                   <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
ERROR in src/pages/reviews/ReviewFormPage.tsx:70:11
TS2353: Object literal may only specify known properties, and 'booking_id' does not exist in type 'ReviewFormData'.
    68 |       try {
    69 |         await createReview({
  > 70 |           booking_id: Number(values.booking_id),
       |           ^^^^^^^^^^
    71 |           rating: values.rating,
    72 |           comment: values.comment,
    73 |         }).unwrap();
ERROR in src/pages/reviews/ReviewReplyPage.tsx:51:25
TS2339: Property 'response' does not exist on type 'Review'.
    49 |   const formik = useFormik({
    50 |     initialValues: {
  > 51 |       response: review?.response || '',
       |                         ^^^^^^^^
    52 |     },
    53 |     validationSchema,
    54 |     enableReinitialize: true,
ERROR in src/pages/reviews/ReviewReplyPage.tsx:60:13
TS2353: Object literal may only specify known properties, and 'response' does not exist in type '{ id: string; data: Partial<ReviewFormData>; }'.
    58 |           await updateReview({
    59 |             id: id || '',
  > 60 |             response: values.response,
       |             ^^^^^^^^
    61 |           }).unwrap();
    62 |           navigate('/reviews');
    63 |         } catch (error) {
ERROR in src/pages/reviews/ReviewReplyPage.tsx:134:47
TS2551: Property 'firstName' does not exist on type 'Client'. Did you mean 'first_name'?
    132 |         <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>
    133 |           <Avatar sx={{ bgcolor: 'primary.main' }}>
  > 134 |             {getClientInitials(review.client?.firstName, review.client?.lastName)}
        |                                               ^^^^^^^^^
    135 |           </Avatar>
    136 |           <Box sx={{ flex: 1 }}>
    137 |             <Typography variant="h6">
ERROR in src/pages/reviews/ReviewReplyPage.tsx:134:73
TS2551: Property 'lastName' does not exist on type 'Client'. Did you mean 'last_name'?
    132 |         <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>
    133 |           <Avatar sx={{ bgcolor: 'primary.main' }}>
  > 134 |             {getClientInitials(review.client?.firstName, review.client?.lastName)}
        |                                                                         ^^^^^^^^
    135 |           </Avatar>
    136 |           <Box sx={{ flex: 1 }}>
    137 |             <Typography variant="h6">
ERROR in src/pages/reviews/ReviewReplyPage.tsx:138:31
TS2551: Property 'firstName' does not exist on type 'Client'. Did you mean 'first_name'?
    136 |           <Box sx={{ flex: 1 }}>
    137 |             <Typography variant="h6">
  > 138 |               {review.client?.firstName} {review.client?.lastName}
        |                               ^^^^^^^^^
    139 |             </Typography>
    140 |             <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
    141 |               <Rating value={review.rating} readOnly size="small" />
ERROR in src/pages/reviews/ReviewReplyPage.tsx:138:58
TS2551: Property 'lastName' does not exist on type 'Client'. Did you mean 'last_name'?
    136 |           <Box sx={{ flex: 1 }}>
    137 |             <Typography variant="h6">
  > 138 |               {review.client?.firstName} {review.client?.lastName}
        |                                                          ^^^^^^^^
    139 |             </Typography>
    140 |             <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
    141 |               <Rating value={review.rating} readOnly size="small" />
ERROR in src/pages/reviews/ReviewReplyPage.tsx:147:41
TS2339: Property 'text' does not exist on type 'Review'.
    145 |             </Box>
    146 |             <Typography sx={{ mb: 2 }}>
  > 147 |               {review.comment || review.text}
        |                                         ^^^^
    148 |             </Typography>
    149 |           </Box>
    150 |         </Box>
ERROR in src/pages/reviews/ReviewReplyPage.tsx:164:23
TS2339: Property 'booking' does not exist on type 'Review'.
    162 |             <CarIcon color="action" />
    163 |             <Typography>
  > 164 |               {review.booking?.clientCar?.carBrand?.name} {review.booking?.clientCar?.carModel?.name}
        |                       ^^^^^^^
    165 |             </Typography>
    166 |           </Box>
    167 |         </Box>
ERROR in src/pages/reviews/ReviewReplyPage.tsx:164:67
TS2339: Property 'booking' does not exist on type 'Review'.
    162 |             <CarIcon color="action" />
    163 |             <Typography>
  > 164 |               {review.booking?.clientCar?.carBrand?.name} {review.booking?.clientCar?.carModel?.name}
        |                                                                   ^^^^^^^
    165 |             </Typography>
    166 |           </Box>
    167 |         </Box>
ERROR in src/pages/reviews/ReviewsPage.tsx:280:33
TS2339: Property 'booking' does not exist on type 'Review'.
    278 |                       </Typography>
    279 |                       <Typography variant="body2" color="textSecondary">
  > 280 |                         {review.booking?.clientCar?.carBrand?.name} {review.booking?.clientCar?.carModel?.name}
        |                                 ^^^^^^^
    281 |                       </Typography>
    282 |                     </Box>
    283 |                   </Box>
ERROR in src/pages/reviews/ReviewsPage.tsx:280:77
TS2339: Property 'booking' does not exist on type 'Review'.
    278 |                       </Typography>
    279 |                       <Typography variant="body2" color="textSecondary">
  > 280 |                         {review.booking?.clientCar?.carBrand?.name} {review.booking?.clientCar?.carModel?.name}
        |                                                                             ^^^^^^^
    281 |                       </Typography>
    282 |                     </Box>
    283 |                   </Box>
ERROR in src/pages/reviews/ReviewsPage.tsx:304:29
TS2339: Property 'text' does not exist on type 'Review'.
    302 |                     }}
    303 |                   >
  > 304 |                     {review.text}
        |                             ^^^^
    305 |                   </Typography>
    306 |                   {review.response && (
    307 |                     <Box sx={{ mt: 1, display: 'flex', alignItems: 'flex-start', gap: 1 }}>
ERROR in src/pages/reviews/ReviewsPage.tsx:306:27
TS2339: Property 'response' does not exist on type 'Review'.
    304 |                     {review.text}
    305 |                   </Typography>
  > 306 |                   {review.response && (
        |                           ^^^^^^^^
    307 |                     <Box sx={{ mt: 1, display: 'flex', alignItems: 'flex-start', gap: 1 }}>
    308 |                       <ReplyIcon color="action" sx={{ fontSize: '1rem' }} />
    309 |                       <Typography
ERROR in src/pages/reviews/ReviewsPage.tsx:321:33
TS2339: Property 'response' does not exist on type 'Review'.
    319 |                         }}
    320 |                       >
  > 321 |                         {review.response}
        |                                 ^^^^^^^^
    322 |                       </Typography>
    323 |                     </Box>
    324 |                   )}
ERROR in src/pages/reviews/ReviewsPage.tsx:333:50
TS2339: Property 'status' does not exist on type 'Review'.
    331 |                 <TableCell>
    332 |                   <Chip
  > 333 |                     icon={REVIEW_STATUSES[review.status as ReviewStatus].icon as React.ReactElement}
        |                                                  ^^^^^^
    334 |                     label={REVIEW_STATUSES[review.status as ReviewStatus].label}
    335 |                     color={REVIEW_STATUSES[review.status as ReviewStatus].color}
    336 |                     size="small"
ERROR in src/pages/reviews/ReviewsPage.tsx:334:51
TS2339: Property 'status' does not exist on type 'Review'.
    332 |                   <Chip
    333 |                     icon={REVIEW_STATUSES[review.status as ReviewStatus].icon as React.ReactElement}
  > 334 |                     label={REVIEW_STATUSES[review.status as ReviewStatus].label}
        |                                                   ^^^^^^
    335 |                     color={REVIEW_STATUSES[review.status as ReviewStatus].color}
    336 |                     size="small"
    337 |                   />
ERROR in src/pages/reviews/ReviewsPage.tsx:335:51
TS2339: Property 'status' does not exist on type 'Review'.
    333 |                     icon={REVIEW_STATUSES[review.status as ReviewStatus].icon as React.ReactElement}
    334 |                     label={REVIEW_STATUSES[review.status as ReviewStatus].label}
  > 335 |                     color={REVIEW_STATUSES[review.status as ReviewStatus].color}
        |                                                   ^^^^^^
    336 |                     size="small"
    337 |                   />
    338 |                 </TableCell>
ERROR in src/pages/reviews/ReviewsPage.tsx:348:29
TS2339: Property 'status' does not exist on type 'Review'.
    346 |                 <TableCell align="right">
    347 |                   <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
  > 348 |                     {review.status === 'pending' && (
        |                             ^^^^^^
    349 |                       <>
    350 |                         <Tooltip title="Одобрить">
    351 |                           <IconButton
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:33:3
TS2724: '"../../api"' has no exported member named 'useGetServicePointScheduleQuery'. Did you mean 'useGetServicePointsQuery'?
    31 |   useGetServicePointByIdQuery,
    32 |   useGetServicePointServicesQuery,
  > 33 |   useGetServicePointScheduleQuery,
       |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    34 | } from '../../api';
    35 | import { useTranslation } from 'react-i18next';
    36 | import { ServicePoint } from '../../types/models';
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:139:47
TS2339: Property 'contact_phone' does not exist on type 'ServicePoint'.
    137 |                       Контактный телефон
    138 |                     </Typography>
  > 139 |                     <Typography>{servicePoint.contact_phone}</Typography>
        |                                               ^^^^^^^^^^^^^
    140 |                   </Box>
    141 |                 </Box>
    142 |               </Grid>
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:164:27
TS2339: Property 'photos' does not exist on type 'ServicePoint'.
    162 |             </Box>
    163 |             
  > 164 |             {servicePoint.photos && servicePoint.photos.length > 0 ? (
        |                           ^^^^^^
    165 |               <Grid container spacing={2}>
    166 |                 {servicePoint.photos.slice(0, 4).map((photo) => (
    167 |                   <Grid item xs={6} sm={3} key={photo.id}>
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:164:50
TS2339: Property 'photos' does not exist on type 'ServicePoint'.
    162 |             </Box>
    163 |             
  > 164 |             {servicePoint.photos && servicePoint.photos.length > 0 ? (
        |                                                  ^^^^^^
    165 |               <Grid container spacing={2}>
    166 |                 {servicePoint.photos.slice(0, 4).map((photo) => (
    167 |                   <Grid item xs={6} sm={3} key={photo.id}>
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:166:31
TS2339: Property 'photos' does not exist on type 'ServicePoint'.
    164 |             {servicePoint.photos && servicePoint.photos.length > 0 ? (
    165 |               <Grid container spacing={2}>
  > 166 |                 {servicePoint.photos.slice(0, 4).map((photo) => (
        |                               ^^^^^^
    167 |                   <Grid item xs={6} sm={3} key={photo.id}>
    168 |                     <img 
    169 |                       src={photo.photo_url} 
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:166:55
TS7006: Parameter 'photo' implicitly has an 'any' type.
    164 |             {servicePoint.photos && servicePoint.photos.length > 0 ? (
    165 |               <Grid container spacing={2}>
  > 166 |                 {servicePoint.photos.slice(0, 4).map((photo) => (
        |                                                       ^^^^^
    167 |                   <Grid item xs={6} sm={3} key={photo.id}>
    168 |                     <img 
    169 |                       src={photo.photo_url} 
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:193:45
TS2339: Property 'post_count' does not exist on type 'ServicePoint'.
    191 |                     Количество постов
    192 |                   </Typography>
  > 193 |                   <Typography>{servicePoint.post_count}</Typography>
        |                                             ^^^^^^^^^^
    194 |                 </Box>
    195 |                 <Box>
    196 |                   <Typography variant="subtitle2" color="text.secondary">
ERROR in src/pages/service-points/ServicePointDetailPage.tsx:199:45
TS2339: Property 'default_slot_duration' does not exist on type 'ServicePoint'.
    197 |                     Длительность слота по умолчанию
    198 |                   </Typography>
  > 199 |                   <Typography>{servicePoint.default_slot_duration} минут</Typography>
        |                                             ^^^^^^^^^^^^^^^^^^^^^
    200 |                 </Box>
    201 |               </Box>
    202 |             </CardContent>
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:73:78
TS2345: Argument of type 'string' is not assignable to parameter of type 'unique symbol | { service_point_id: string; date: string; }'.
    71 |   const { data: photos, isLoading: photosLoading } = useGetServicePointPhotosQuery(id || '');
    72 |
  > 73 |   const { data: schedule, isLoading: scheduleLoading } = useGetScheduleQuery(id || '');
       |                                                                              ^^^^^^^^
    74 |
    75 |   const { data: partner, isLoading: partnerLoading } = useGetPartnerByIdQuery(servicePoint?.partner_id.toString() || '', {
    76 |     skip: !servicePoint?.partner_id,
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:79:84
TS2551: Property 'cityId' does not exist on type 'ServicePoint'. Did you mean 'city_id'?
    77 |   });
    78 |
  > 79 |   const { data: city, isLoading: cityLoading } = useGetCityByIdQuery(servicePoint?.cityId?.toString() || '', {
       |                                                                                    ^^^^^^
    80 |     skip: !servicePoint?.cityId,
    81 |   });
    82 |
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:80:26
TS2551: Property 'cityId' does not exist on type 'ServicePoint'. Did you mean 'city_id'?
    78 |
    79 |   const { data: city, isLoading: cityLoading } = useGetCityByIdQuery(servicePoint?.cityId?.toString() || '', {
  > 80 |     skip: !servicePoint?.cityId,
       |                          ^^^^^^
    81 |   });
    82 |
    83 |   const { data: region, isLoading: regionLoading } = useGetRegionByIdQuery(city?.regionId?.toString() || '', {
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:83:82
TS2551: Property 'regionId' does not exist on type 'City'. Did you mean 'region_id'?
    81 |   });
    82 |
  > 83 |   const { data: region, isLoading: regionLoading } = useGetRegionByIdQuery(city?.regionId?.toString() || '', {
       |                                                                                  ^^^^^^^^
    84 |     skip: !city?.regionId,
    85 |   });
    86 |
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:84:18
TS2551: Property 'regionId' does not exist on type 'City'. Did you mean 'region_id'?
    82 |
    83 |   const { data: region, isLoading: regionLoading } = useGetRegionByIdQuery(city?.regionId?.toString() || '', {
  > 84 |     skip: !city?.regionId,
       |                  ^^^^^^^^
    85 |   });
    86 |
    87 |   if (servicePointLoading || servicesLoading || allServicesLoading || photosLoading || scheduleLoading || partnerLoading || cityLoading || regionLoading) {
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:155:30
TS2339: Property 'start' does not exist on type 'string'.
    153 |                     <TableCell>{getDayName(Number(day))}</TableCell>
    154 |                     <TableCell>
  > 155 |                       {hours.start} - {hours.end}
        |                              ^^^^^
    156 |                     </TableCell>
    157 |                   </TableRow>
    158 |                 ))}
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:155:46
TS2339: Property 'end' does not exist on type 'string'.
    153 |                     <TableCell>{getDayName(Number(day))}</TableCell>
    154 |                     <TableCell>
  > 155 |                       {hours.start} - {hours.end}
        |                                              ^^^
    156 |                     </TableCell>
    157 |                   </TableRow>
    158 |                 ))}
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:173:26
TS2339: Property 'name' does not exist on type 'Partner'.
    171 |             <CardContent>
    172 |               <Typography variant="h6" gutterBottom>
  > 173 |                 {partner.name}
        |                          ^^^^
    174 |               </Typography>
    175 |               <Typography variant="body1" paragraph>
    176 |                 {partner.description}
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:176:26
TS2339: Property 'description' does not exist on type 'Partner'.
    174 |               </Typography>
    175 |               <Typography variant="body1" paragraph>
  > 176 |                 {partner.description}
        |                          ^^^^^^^^^^^
    177 |               </Typography>
    178 |               <Typography variant="body2" color="text.secondary">
    179 |                 Телефон: {partner.phone}
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:179:35
TS2339: Property 'phone' does not exist on type 'Partner'.
    177 |               </Typography>
    178 |               <Typography variant="body2" color="text.secondary">
  > 179 |                 Телефон: {partner.phone}
        |                                   ^^^^^
    180 |               </Typography>
    181 |               <Typography variant="body2" color="text.secondary">
    182 |                 Email: {partner.email}
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:182:33
TS2339: Property 'email' does not exist on type 'Partner'.
    180 |               </Typography>
    181 |               <Typography variant="body2" color="text.secondary">
  > 182 |                 Email: {partner.email}
        |                                 ^^^^^
    183 |               </Typography>
    184 |             </CardContent>
    185 |           </Card>
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:190:8
TS18048: 'photos' is possibly 'undefined'.
    188 |       )}
    189 |
  > 190 |       {photos.length > 0 && (
        |        ^^^^^^
    191 |         <>
    192 |           <Typography variant="h6" gutterBottom>
    193 |             Фотографии:
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:196:14
TS18048: 'photos' is possibly 'undefined'.
    194 |           </Typography>
    195 |           <Grid container spacing={2} sx={{ mb: 4 }}>
  > 196 |             {photos.map((photo) => (
        |              ^^^^^^
    197 |               <Grid item xs={12} sm={6} md={4} key={photo.id}>
    198 |                 <Card>
    199 |                   <CardMedia
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:222:53
TS2339: Property 'date' does not exist on type 'Schedule[]'.
    220 |         <>
    221 |           <Typography variant="h6" gutterBottom>
  > 222 |             Расписание на {format(new Date(schedule.date), 'd MMMM yyyy', { locale: ru })}:
        |                                                     ^^^^
    223 |           </Typography>
    224 |           <TableContainer component={Paper} sx={{ mb: 4 }}>
    225 |             <Table>
ERROR in src/pages/service-points/ServicePointDetailsPage.tsx:233:19
TS2352: Conversion of type 'Schedule[]' to type 'Schedule' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'slots' is missing in type 'Schedule[]' but required in type 'Schedule'.
    231 |               </TableHead>
    232 |               <TableBody>
  > 233 |                 {(schedule as Schedule)?.slots.map((slot: TimeSlot) => (
        |                   ^^^^^^^^^^^^^^^^^^^^
    234 |                   <TableRow key={slot.id}>
    235 |                     <TableCell>
    236 |                       {format(new Date(`2000-01-01T${slot.startTime}`), 'HH:mm')} - {format(new Date(`2000-01-01T${slot.endTime}`), 'HH:mm')}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:144:58
TS2554: Expected 1-2 arguments, but got 0.
    142 |
    143 |   // RTK Query хуки
  > 144 |   const { data: partners, isLoading: partnersLoading } = useGetPartnersQuery();
        |                                                          ^^^^^^^^^^^^^^^^^^^
    145 |   const { data: regions, isLoading: regionsLoading } = useGetRegionsQuery();
    146 |   const { data: cities, isLoading: citiesLoading } = useGetCitiesQuery<CitiesQueryParams>(
    147 |     selectedRegionId ? { region_id: selectedRegionId } : undefined,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:145:56
TS2554: Expected 1-2 arguments, but got 0.
    143 |   // RTK Query хуки
    144 |   const { data: partners, isLoading: partnersLoading } = useGetPartnersQuery();
  > 145 |   const { data: regions, isLoading: regionsLoading } = useGetRegionsQuery();
        |                                                        ^^^^^^^^^^^^^^^^^^
    146 |   const { data: cities, isLoading: citiesLoading } = useGetCitiesQuery<CitiesQueryParams>(
    147 |     selectedRegionId ? { region_id: selectedRegionId } : undefined,
    148 |     { skip: !selectedRegionId }
ERROR in src/pages/service-points/ServicePointFormPage.tsx:146:11
TS2339: Property 'data' does not exist on type 'UseQueryHookResult<QueryDefinition<CityFilter, BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError>, "User" | "Booking" | "ServicePoint" | ... 10 more ... | "ClientCars", ApiResponse<...>, "api", unknown>, CitiesQueryParams>'.
    144 |   const { data: partners, isLoading: partnersLoading } = useGetPartnersQuery();
    145 |   const { data: regions, isLoading: regionsLoading } = useGetRegionsQuery();
  > 146 |   const { data: cities, isLoading: citiesLoading } = useGetCitiesQuery<CitiesQueryParams>(
        |           ^^^^
    147 |     selectedRegionId ? { region_id: selectedRegionId } : undefined,
    148 |     { skip: !selectedRegionId }
    149 |   );
ERROR in src/pages/service-points/ServicePointFormPage.tsx:146:25
TS2339: Property 'isLoading' does not exist on type 'UseQueryHookResult<QueryDefinition<CityFilter, BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError>, "User" | "Booking" | "ServicePoint" | ... 10 more ... | "ClientCars", ApiResponse<...>, "api", unknown>, CitiesQueryParams>'.
    144 |   const { data: partners, isLoading: partnersLoading } = useGetPartnersQuery();
    145 |   const { data: regions, isLoading: regionsLoading } = useGetRegionsQuery();
  > 146 |   const { data: cities, isLoading: citiesLoading } = useGetCitiesQuery<CitiesQueryParams>(
        |                         ^^^^^^^^^
    147 |     selectedRegionId ? { region_id: selectedRegionId } : undefined,
    148 |     { skip: !selectedRegionId }
    149 |   );
ERROR in src/pages/service-points/ServicePointFormPage.tsx:147:5
TS2345: Argument of type '{ region_id: number; } | undefined' is not assignable to parameter of type 'CityFilter | unique symbol'.
  Type 'undefined' is not assignable to type 'CityFilter | unique symbol'.
    145 |   const { data: regions, isLoading: regionsLoading } = useGetRegionsQuery();
    146 |   const { data: cities, isLoading: citiesLoading } = useGetCitiesQuery<CitiesQueryParams>(
  > 147 |     selectedRegionId ? { region_id: selectedRegionId } : undefined,
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    148 |     { skip: !selectedRegionId }
    149 |   );
    150 |   const { data: servicePoint, isLoading: servicePointLoading } = useGetServicePointByIdQuery(id ?? '', { skip: !id });
ERROR in src/pages/service-points/ServicePointFormPage.tsx:153:35
TS2554: Expected 1-2 arguments, but got 0.
    151 |   const [createServicePoint, { isLoading: isCreating }] = useCreateServicePointMutation();
    152 |   const [updateServicePoint, { isLoading: isUpdating }] = useUpdateServicePointMutation();
  > 153 |   const { data: servicePoints } = useGetServicePointsQuery();
        |                                   ^^^^^^^^^^^^^^^^^^^^^^^^
    154 |
    155 |   const { data: servicesData } = useGetServiceCategoriesQuery();
    156 |   const { data: scheduleData } = useGetScheduleQuery<ServicePointQueryParams>(
ERROR in src/pages/service-points/ServicePointFormPage.tsx:156:11
TS2339: Property 'data' does not exist on type 'UseQueryHookResult<QueryDefinition<{ service_point_id: string; date: string; }, BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError>, "Schedule" | "ServicePointServices", Schedule[], "scheduleApi", unknown>, ServicePointQueryParams>'.
    154 |
    155 |   const { data: servicesData } = useGetServiceCategoriesQuery();
  > 156 |   const { data: scheduleData } = useGetScheduleQuery<ServicePointQueryParams>(
        |           ^^^^
    157 |     { 
    158 |       service_point_id: id ?? '',
    159 |       date: new Date().toISOString().split('T')[0]
ERROR in src/pages/service-points/ServicePointFormPage.tsx:163:11
TS2339: Property 'data' does not exist on type 'UseQueryHookResult<QueryDefinition<string, BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError>, "Schedule" | "ServicePointServices", any, "scheduleApi", unknown>, ServicePointServicesQueryParams>'.
    161 |     { skip: !isEditMode || !id }
    162 |   );
  > 163 |   const { data: servicePointServicesData } = useGetServicePointServicesQuery<ServicePointServicesQueryParams>(
        |           ^^^^
    164 |     { service_point_id: id ?? '' },
    165 |     { skip: !isEditMode || !id }
    166 |   );
ERROR in src/pages/service-points/ServicePointFormPage.tsx:164:5
TS2345: Argument of type '{ service_point_id: string; }' is not assignable to parameter of type 'string | unique symbol'.
    162 |   );
    163 |   const { data: servicePointServicesData } = useGetServicePointServicesQuery<ServicePointServicesQueryParams>(
  > 164 |     { service_point_id: id ?? '' },
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    165 |     { skip: !isEditMode || !id }
    166 |   );
    167 |   const { data: photosData } = useGetServicePointPhotosQuery<ServicePointPhotosQueryParams>(
ERROR in src/pages/service-points/ServicePointFormPage.tsx:167:11
TS2339: Property 'data' does not exist on type 'UseQueryHookResult<QueryDefinition<string, BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError>, "User" | "Booking" | "ServicePoint" | "City" | "Region" | ... 8 more ... | "ClientCars", Photo[], "api", unknown>, ServicePointPhotosQueryParams>'.
    165 |     { skip: !isEditMode || !id }
    166 |   );
  > 167 |   const { data: photosData } = useGetServicePointPhotosQuery<ServicePointPhotosQueryParams>(
        |           ^^^^
    168 |     { service_point_id: id ?? '' },
    169 |     { skip: !isEditMode || !id }
    170 |   );
ERROR in src/pages/service-points/ServicePointFormPage.tsx:168:5
TS2345: Argument of type '{ service_point_id: string; }' is not assignable to parameter of type 'string | unique symbol'.
    166 |   );
    167 |   const { data: photosData } = useGetServicePointPhotosQuery<ServicePointPhotosQueryParams>(
  > 168 |     { service_point_id: id ?? '' },
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    169 |     { skip: !isEditMode || !id }
    170 |   );
    171 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:177:5
TS2353: Object literal may only specify known properties, and 'partner_id' does not exist in type 'ServicePointFormData'.
    175 |   const initialValues: ServicePointFormData = {
    176 |     name: servicePoint?.name || '',
  > 177 |     partner_id: servicePoint?.partner_id || (partnerId ? Number(partnerId) : 0),
        |     ^^^^^^^^^^
    178 |     description: servicePoint?.description || '',
    179 |     city_id: servicePoint?.city_id || 0,
    180 |     region_id: selectedRegionId || 0,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:178:32
TS2339: Property 'description' does not exist on type 'ServicePoint'.
    176 |     name: servicePoint?.name || '',
    177 |     partner_id: servicePoint?.partner_id || (partnerId ? Number(partnerId) : 0),
  > 178 |     description: servicePoint?.description || '',
        |                                ^^^^^^^^^^^
    179 |     city_id: servicePoint?.city_id || 0,
    180 |     region_id: selectedRegionId || 0,
    181 |     address: servicePoint?.address || '',
ERROR in src/pages/service-points/ServicePointFormPage.tsx:182:34
TS2339: Property 'contact_phone' does not exist on type 'ServicePoint'.
    180 |     region_id: selectedRegionId || 0,
    181 |     address: servicePoint?.address || '',
  > 182 |     contact_phone: servicePoint?.contact_phone || '',
        |                                  ^^^^^^^^^^^^^
    183 |     is_active: servicePoint?.is_active ?? true,
    184 |     post_count: servicePoint?.post_count || 1,
    185 |     default_slot_duration: servicePoint?.default_slot_duration || 30,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:184:31
TS2339: Property 'post_count' does not exist on type 'ServicePoint'.
    182 |     contact_phone: servicePoint?.contact_phone || '',
    183 |     is_active: servicePoint?.is_active ?? true,
  > 184 |     post_count: servicePoint?.post_count || 1,
        |                               ^^^^^^^^^^
    185 |     default_slot_duration: servicePoint?.default_slot_duration || 30,
    186 |     latitude: servicePoint?.latitude || null,
    187 |     longitude: servicePoint?.longitude || null,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:185:42
TS2339: Property 'default_slot_duration' does not exist on type 'ServicePoint'.
    183 |     is_active: servicePoint?.is_active ?? true,
    184 |     post_count: servicePoint?.post_count || 1,
  > 185 |     default_slot_duration: servicePoint?.default_slot_duration || 30,
        |                                          ^^^^^^^^^^^^^^^^^^^^^
    186 |     latitude: servicePoint?.latitude || null,
    187 |     longitude: servicePoint?.longitude || null,
    188 |     status_id: servicePoint?.status_id || 1,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:186:29
TS2339: Property 'latitude' does not exist on type 'ServicePoint'.
    184 |     post_count: servicePoint?.post_count || 1,
    185 |     default_slot_duration: servicePoint?.default_slot_duration || 30,
  > 186 |     latitude: servicePoint?.latitude || null,
        |                             ^^^^^^^^
    187 |     longitude: servicePoint?.longitude || null,
    188 |     status_id: servicePoint?.status_id || 1,
    189 |     schedule: scheduleData || [
ERROR in src/pages/service-points/ServicePointFormPage.tsx:187:30
TS2339: Property 'longitude' does not exist on type 'ServicePoint'.
    185 |     default_slot_duration: servicePoint?.default_slot_duration || 30,
    186 |     latitude: servicePoint?.latitude || null,
  > 187 |     longitude: servicePoint?.longitude || null,
        |                              ^^^^^^^^^
    188 |     status_id: servicePoint?.status_id || 1,
    189 |     schedule: scheduleData || [
    190 |       { day_of_week: 1, start_time: '09:00', end_time: '18:00', is_working_day: true },
ERROR in src/pages/service-points/ServicePointFormPage.tsx:188:30
TS2339: Property 'status_id' does not exist on type 'ServicePoint'.
    186 |     latitude: servicePoint?.latitude || null,
    187 |     longitude: servicePoint?.longitude || null,
  > 188 |     status_id: servicePoint?.status_id || 1,
        |                              ^^^^^^^^^
    189 |     schedule: scheduleData || [
    190 |       { day_of_week: 1, start_time: '09:00', end_time: '18:00', is_working_day: true },
    191 |       { day_of_week: 2, start_time: '09:00', end_time: '18:00', is_working_day: true },
ERROR in src/pages/service-points/ServicePointFormPage.tsx:199:29
TS7006: Parameter 'photo' implicitly has an 'any' type.
    197 |     ],
    198 |     services: servicePointServicesData || [],
  > 199 |     photos: photosData?.map(photo => ({
        |                             ^^^^^
    200 |       ...photo,
    201 |       is_main: photo.is_main || false
    202 |     })) || [],
ERROR in src/pages/service-points/ServicePointFormPage.tsx:214:13
TS2353: Object literal may only specify known properties, and 'data' does not exist in type '{ id: string; servicePoint: Partial<ServicePoint>; }'.
    212 |           await updateServicePoint({
    213 |             id,
  > 214 |             data: values
        |             ^^^^
    215 |           }).unwrap();
    216 |           setSuccessMessage('Точка обслуживания успешно обновлена');
    217 |         } else {
ERROR in src/pages/service-points/ServicePointFormPage.tsx:233:45
TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.
    231 |   useEffect(() => {
    232 |     if (servicePoint?.city_id && cities) {
  > 233 |       const city = cities.find((c: City) => c.id === servicePoint.city_id);
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    234 |       if (city?.regionId && city.regionId !== selectedRegionId) {
    235 |         setSelectedRegionId(city.regionId);
    236 |       }
ERROR in src/pages/service-points/ServicePointFormPage.tsx:302:62
TS2339: Property 'partner_id' does not exist on type 'FormikTouched<ServicePointFormData>'.
    300 |
    301 |               <Grid item xs={12} md={6}>
  > 302 |                 <FormControl fullWidth error={formik.touched.partner_id && Boolean(formik.errors.partner_id)}>
        |                                                              ^^^^^^^^^^
    303 |                   <InputLabel id="partner-id-label">Партнер</InputLabel>
    304 |                   <Select
    305 |                     labelId="partner-id-label"
ERROR in src/pages/service-points/ServicePointFormPage.tsx:302:98
TS2339: Property 'partner_id' does not exist on type 'FormikErrors<ServicePointFormData>'.
    300 |
    301 |               <Grid item xs={12} md={6}>
  > 302 |                 <FormControl fullWidth error={formik.touched.partner_id && Boolean(formik.errors.partner_id)}>
        |                                                                                                  ^^^^^^^^^^
    303 |                   <InputLabel id="partner-id-label">Партнер</InputLabel>
    304 |                   <Select
    305 |                     labelId="partner-id-label"
ERROR in src/pages/service-points/ServicePointFormPage.tsx:308:42
TS2339: Property 'partner_id' does not exist on type 'ServicePointFormData'.
    306 |                     id="partner_id"
    307 |                     name="partner_id"
  > 308 |                     value={formik.values.partner_id.toString()}
        |                                          ^^^^^^^^^^
    309 |                     onChange={(e: SelectChangeEvent<string>) => {
    310 |                       formik.setFieldValue('partner_id', Number(e.target.value));
    311 |                     }}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:317:32
TS2339: Property 'map' does not exist on type 'ApiResponse<Partner>'.
    315 |                   >
    316 |                     <MenuItem value="0" disabled>Выберите партнера</MenuItem>
  > 317 |                     {partners?.map((partner: Partner) => (
        |                                ^^^
    318 |                       <MenuItem key={partner.id} value={partner.id.toString()}>
    319 |                         {partner.company_name}
    320 |                       </MenuItem>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:334:40
TS2339: Property 'description' does not exist on type 'ServicePointFormData'.
    332 |                   multiline
    333 |                   rows={4}
  > 334 |                   value={formik.values.description}
        |                                        ^^^^^^^^^^^
    335 |                   onChange={formik.handleChange}
    336 |                   onBlur={formik.handleBlur}
    337 |                   error={formik.touched.description && Boolean(formik.errors.description)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:337:41
TS2339: Property 'description' does not exist on type 'FormikTouched<ServicePointFormData>'.
    335 |                   onChange={formik.handleChange}
    336 |                   onBlur={formik.handleBlur}
  > 337 |                   error={formik.touched.description && Boolean(formik.errors.description)}
        |                                         ^^^^^^^^^^^
    338 |                   helperText={formik.touched.description && formik.errors.description}
    339 |                 />
    340 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:337:78
TS2339: Property 'description' does not exist on type 'FormikErrors<ServicePointFormData>'.
    335 |                   onChange={formik.handleChange}
    336 |                   onBlur={formik.handleBlur}
  > 337 |                   error={formik.touched.description && Boolean(formik.errors.description)}
        |                                                                              ^^^^^^^^^^^
    338 |                   helperText={formik.touched.description && formik.errors.description}
    339 |                 />
    340 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:338:46
TS2339: Property 'description' does not exist on type 'FormikTouched<ServicePointFormData>'.
    336 |                   onBlur={formik.handleBlur}
    337 |                   error={formik.touched.description && Boolean(formik.errors.description)}
  > 338 |                   helperText={formik.touched.description && formik.errors.description}
        |                                              ^^^^^^^^^^^
    339 |                 />
    340 |               </Grid>
    341 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:338:75
TS2339: Property 'description' does not exist on type 'FormikErrors<ServicePointFormData>'.
    336 |                   onBlur={formik.handleBlur}
    337 |                   error={formik.touched.description && Boolean(formik.errors.description)}
  > 338 |                   helperText={formik.touched.description && formik.errors.description}
        |                                                                           ^^^^^^^^^^^
    339 |                 />
    340 |               </Grid>
    341 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:356:28
TS18048: 'formik.values.region_id' is possibly 'undefined'.
    354 |                     id="region_id"
    355 |                     name="region_id"
  > 356 |                     value={formik.values.region_id.toString()}
        |                            ^^^^^^^^^^^^^^^^^^^^^^^
    357 |                     onChange={handleRegionChange}
    358 |                     onBlur={formik.handleBlur}
    359 |                     label="Регион"
ERROR in src/pages/service-points/ServicePointFormPage.tsx:362:22
TS18048: 'regions' is possibly 'undefined'.
    360 |                   >
    361 |                     <MenuItem value="0" disabled>Выберите регион</MenuItem>
  > 362 |                     {regions.map(region => (
        |                      ^^^^^^^
    363 |                       <MenuItem key={region.id} value={region.id.toString()}>
    364 |                         {region.name}
    365 |                       </MenuItem>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:362:30
TS2339: Property 'map' does not exist on type 'ApiResponse<Region>'.
    360 |                   >
    361 |                     <MenuItem value="0" disabled>Выберите регион</MenuItem>
  > 362 |                     {regions.map(region => (
        |                              ^^^
    363 |                       <MenuItem key={region.id} value={region.id.toString()}>
    364 |                         {region.name}
    365 |                       </MenuItem>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:362:34
TS7006: Parameter 'region' implicitly has an 'any' type.
    360 |                   >
    361 |                     <MenuItem value="0" disabled>Выберите регион</MenuItem>
  > 362 |                     {regions.map(region => (
        |                                  ^^^^^^
    363 |                       <MenuItem key={region.id} value={region.id.toString()}>
    364 |                         {region.name}
    365 |                       </MenuItem>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:378:28
TS18048: 'formik.values.city_id' is possibly 'undefined'.
    376 |                     id="city_id"
    377 |                     name="city_id"
  > 378 |                     value={formik.values.city_id.toString()}
        |                            ^^^^^^^^^^^^^^^^^^^^^
    379 |                     onChange={(e: SelectChangeEvent<string>) => {
    380 |                       formik.setFieldValue('city_id', Number(e.target.value));
    381 |                     }}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:402:40
TS2339: Property 'contact_phone' does not exist on type 'ServicePointFormData'.
    400 |                   name="contact_phone"
    401 |                   label="Контактный телефон"
  > 402 |                   value={formik.values.contact_phone}
        |                                        ^^^^^^^^^^^^^
    403 |                   onChange={formik.handleChange}
    404 |                   onBlur={formik.handleBlur}
    405 |                   error={formik.touched.contact_phone && Boolean(formik.errors.contact_phone)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:405:41
TS2339: Property 'contact_phone' does not exist on type 'FormikTouched<ServicePointFormData>'.
    403 |                   onChange={formik.handleChange}
    404 |                   onBlur={formik.handleBlur}
  > 405 |                   error={formik.touched.contact_phone && Boolean(formik.errors.contact_phone)}
        |                                         ^^^^^^^^^^^^^
    406 |                   helperText={formik.touched.contact_phone && formik.errors.contact_phone}
    407 |                 />
    408 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:405:80
TS2339: Property 'contact_phone' does not exist on type 'FormikErrors<ServicePointFormData>'.
    403 |                   onChange={formik.handleChange}
    404 |                   onBlur={formik.handleBlur}
  > 405 |                   error={formik.touched.contact_phone && Boolean(formik.errors.contact_phone)}
        |                                                                                ^^^^^^^^^^^^^
    406 |                   helperText={formik.touched.contact_phone && formik.errors.contact_phone}
    407 |                 />
    408 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:406:46
TS2339: Property 'contact_phone' does not exist on type 'FormikTouched<ServicePointFormData>'.
    404 |                   onBlur={formik.handleBlur}
    405 |                   error={formik.touched.contact_phone && Boolean(formik.errors.contact_phone)}
  > 406 |                   helperText={formik.touched.contact_phone && formik.errors.contact_phone}
        |                                              ^^^^^^^^^^^^^
    407 |                 />
    408 |               </Grid>
    409 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:406:77
TS2339: Property 'contact_phone' does not exist on type 'FormikErrors<ServicePointFormData>'.
    404 |                   onBlur={formik.handleBlur}
    405 |                   error={formik.touched.contact_phone && Boolean(formik.errors.contact_phone)}
  > 406 |                   helperText={formik.touched.contact_phone && formik.errors.contact_phone}
        |                                                                             ^^^^^^^^^^^^^
    407 |                 />
    408 |               </Grid>
    409 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:431:40
TS2339: Property 'latitude' does not exist on type 'ServicePointFormData'.
    429 |                   label="Широта"
    430 |                   type="number"
  > 431 |                   value={formik.values.latitude || ''}
        |                                        ^^^^^^^^
    432 |                   onChange={formik.handleChange}
    433 |                   onBlur={formik.handleBlur}
    434 |                   error={formik.touched.latitude && Boolean(formik.errors.latitude)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:434:41
TS2339: Property 'latitude' does not exist on type 'FormikTouched<ServicePointFormData>'.
    432 |                   onChange={formik.handleChange}
    433 |                   onBlur={formik.handleBlur}
  > 434 |                   error={formik.touched.latitude && Boolean(formik.errors.latitude)}
        |                                         ^^^^^^^^
    435 |                   helperText={formik.touched.latitude && formik.errors.latitude}
    436 |                 />
    437 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:434:75
TS2339: Property 'latitude' does not exist on type 'FormikErrors<ServicePointFormData>'.
    432 |                   onChange={formik.handleChange}
    433 |                   onBlur={formik.handleBlur}
  > 434 |                   error={formik.touched.latitude && Boolean(formik.errors.latitude)}
        |                                                                           ^^^^^^^^
    435 |                   helperText={formik.touched.latitude && formik.errors.latitude}
    436 |                 />
    437 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:435:46
TS2339: Property 'latitude' does not exist on type 'FormikTouched<ServicePointFormData>'.
    433 |                   onBlur={formik.handleBlur}
    434 |                   error={formik.touched.latitude && Boolean(formik.errors.latitude)}
  > 435 |                   helperText={formik.touched.latitude && formik.errors.latitude}
        |                                              ^^^^^^^^
    436 |                 />
    437 |               </Grid>
    438 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:435:72
TS2339: Property 'latitude' does not exist on type 'FormikErrors<ServicePointFormData>'.
    433 |                   onBlur={formik.handleBlur}
    434 |                   error={formik.touched.latitude && Boolean(formik.errors.latitude)}
  > 435 |                   helperText={formik.touched.latitude && formik.errors.latitude}
        |                                                                        ^^^^^^^^
    436 |                 />
    437 |               </Grid>
    438 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:446:40
TS2339: Property 'longitude' does not exist on type 'ServicePointFormData'.
    444 |                   label="Долгота"
    445 |                   type="number"
  > 446 |                   value={formik.values.longitude || ''}
        |                                        ^^^^^^^^^
    447 |                   onChange={formik.handleChange}
    448 |                   onBlur={formik.handleBlur}
    449 |                   error={formik.touched.longitude && Boolean(formik.errors.longitude)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:449:41
TS2339: Property 'longitude' does not exist on type 'FormikTouched<ServicePointFormData>'.
    447 |                   onChange={formik.handleChange}
    448 |                   onBlur={formik.handleBlur}
  > 449 |                   error={formik.touched.longitude && Boolean(formik.errors.longitude)}
        |                                         ^^^^^^^^^
    450 |                   helperText={formik.touched.longitude && formik.errors.longitude}
    451 |                 />
    452 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:449:76
TS2339: Property 'longitude' does not exist on type 'FormikErrors<ServicePointFormData>'.
    447 |                   onChange={formik.handleChange}
    448 |                   onBlur={formik.handleBlur}
  > 449 |                   error={formik.touched.longitude && Boolean(formik.errors.longitude)}
        |                                                                            ^^^^^^^^^
    450 |                   helperText={formik.touched.longitude && formik.errors.longitude}
    451 |                 />
    452 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:450:46
TS2339: Property 'longitude' does not exist on type 'FormikTouched<ServicePointFormData>'.
    448 |                   onBlur={formik.handleBlur}
    449 |                   error={formik.touched.longitude && Boolean(formik.errors.longitude)}
  > 450 |                   helperText={formik.touched.longitude && formik.errors.longitude}
        |                                              ^^^^^^^^^
    451 |                 />
    452 |               </Grid>
    453 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:450:73
TS2339: Property 'longitude' does not exist on type 'FormikErrors<ServicePointFormData>'.
    448 |                   onBlur={formik.handleBlur}
    449 |                   error={formik.touched.longitude && Boolean(formik.errors.longitude)}
  > 450 |                   helperText={formik.touched.longitude && formik.errors.longitude}
        |                                                                         ^^^^^^^^^
    451 |                 />
    452 |               </Grid>
    453 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:462:62
TS2339: Property 'status_id' does not exist on type 'FormikTouched<ServicePointFormData>'.
    460 |
    461 |               <Grid item xs={12} md={4}>
  > 462 |                 <FormControl fullWidth error={formik.touched.status_id && Boolean(formik.errors.status_id)}>
        |                                                              ^^^^^^^^^
    463 |                   <InputLabel id="status-id-label">Статус</InputLabel>
    464 |                   <Select
    465 |                     labelId="status-id-label"
ERROR in src/pages/service-points/ServicePointFormPage.tsx:462:97
TS2339: Property 'status_id' does not exist on type 'FormikErrors<ServicePointFormData>'.
    460 |
    461 |               <Grid item xs={12} md={4}>
  > 462 |                 <FormControl fullWidth error={formik.touched.status_id && Boolean(formik.errors.status_id)}>
        |                                                                                                 ^^^^^^^^^
    463 |                   <InputLabel id="status-id-label">Статус</InputLabel>
    464 |                   <Select
    465 |                     labelId="status-id-label"
ERROR in src/pages/service-points/ServicePointFormPage.tsx:468:42
TS2339: Property 'status_id' does not exist on type 'ServicePointFormData'.
    466 |                     id="status_id"
    467 |                     name="status_id"
  > 468 |                     value={formik.values.status_id.toString()}
        |                                          ^^^^^^^^^
    469 |                     onChange={(e: SelectChangeEvent<string>) => {
    470 |                       formik.setFieldValue('status_id', Number(e.target.value));
    471 |                     }}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:491:40
TS2339: Property 'post_count' does not exist on type 'ServicePointFormData'.
    489 |                   label="Количество постов"
    490 |                   type="number"
  > 491 |                   value={formik.values.post_count}
        |                                        ^^^^^^^^^^
    492 |                   onChange={formik.handleChange}
    493 |                   onBlur={formik.handleBlur}
    494 |                   error={formik.touched.post_count && Boolean(formik.errors.post_count)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:494:41
TS2339: Property 'post_count' does not exist on type 'FormikTouched<ServicePointFormData>'.
    492 |                   onChange={formik.handleChange}
    493 |                   onBlur={formik.handleBlur}
  > 494 |                   error={formik.touched.post_count && Boolean(formik.errors.post_count)}
        |                                         ^^^^^^^^^^
    495 |                   helperText={formik.touched.post_count && formik.errors.post_count}
    496 |                 />
    497 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:494:77
TS2339: Property 'post_count' does not exist on type 'FormikErrors<ServicePointFormData>'.
    492 |                   onChange={formik.handleChange}
    493 |                   onBlur={formik.handleBlur}
  > 494 |                   error={formik.touched.post_count && Boolean(formik.errors.post_count)}
        |                                                                             ^^^^^^^^^^
    495 |                   helperText={formik.touched.post_count && formik.errors.post_count}
    496 |                 />
    497 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:495:46
TS2339: Property 'post_count' does not exist on type 'FormikTouched<ServicePointFormData>'.
    493 |                   onBlur={formik.handleBlur}
    494 |                   error={formik.touched.post_count && Boolean(formik.errors.post_count)}
  > 495 |                   helperText={formik.touched.post_count && formik.errors.post_count}
        |                                              ^^^^^^^^^^
    496 |                 />
    497 |               </Grid>
    498 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:495:74
TS2339: Property 'post_count' does not exist on type 'FormikErrors<ServicePointFormData>'.
    493 |                   onBlur={formik.handleBlur}
    494 |                   error={formik.touched.post_count && Boolean(formik.errors.post_count)}
  > 495 |                   helperText={formik.touched.post_count && formik.errors.post_count}
        |                                                                          ^^^^^^^^^^
    496 |                 />
    497 |               </Grid>
    498 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:506:40
TS2339: Property 'default_slot_duration' does not exist on type 'ServicePointFormData'.
    504 |                   label="Длительность слота (мин)"
    505 |                   type="number"
  > 506 |                   value={formik.values.default_slot_duration}
        |                                        ^^^^^^^^^^^^^^^^^^^^^
    507 |                   onChange={formik.handleChange}
    508 |                   onBlur={formik.handleBlur}
    509 |                   error={formik.touched.default_slot_duration && Boolean(formik.errors.default_slot_duration)}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:509:41
TS2339: Property 'default_slot_duration' does not exist on type 'FormikTouched<ServicePointFormData>'.
    507 |                   onChange={formik.handleChange}
    508 |                   onBlur={formik.handleBlur}
  > 509 |                   error={formik.touched.default_slot_duration && Boolean(formik.errors.default_slot_duration)}
        |                                         ^^^^^^^^^^^^^^^^^^^^^
    510 |                   helperText={formik.touched.default_slot_duration && formik.errors.default_slot_duration}
    511 |                 />
    512 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:509:88
TS2339: Property 'default_slot_duration' does not exist on type 'FormikErrors<ServicePointFormData>'.
    507 |                   onChange={formik.handleChange}
    508 |                   onBlur={formik.handleBlur}
  > 509 |                   error={formik.touched.default_slot_duration && Boolean(formik.errors.default_slot_duration)}
        |                                                                                        ^^^^^^^^^^^^^^^^^^^^^
    510 |                   helperText={formik.touched.default_slot_duration && formik.errors.default_slot_duration}
    511 |                 />
    512 |               </Grid>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:510:46
TS2339: Property 'default_slot_duration' does not exist on type 'FormikTouched<ServicePointFormData>'.
    508 |                   onBlur={formik.handleBlur}
    509 |                   error={formik.touched.default_slot_duration && Boolean(formik.errors.default_slot_duration)}
  > 510 |                   helperText={formik.touched.default_slot_duration && formik.errors.default_slot_duration}
        |                                              ^^^^^^^^^^^^^^^^^^^^^
    511 |                 />
    512 |               </Grid>
    513 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:510:85
TS2339: Property 'default_slot_duration' does not exist on type 'FormikErrors<ServicePointFormData>'.
    508 |                   onBlur={formik.handleBlur}
    509 |                   error={formik.touched.default_slot_duration && Boolean(formik.errors.default_slot_duration)}
  > 510 |                   helperText={formik.touched.default_slot_duration && formik.errors.default_slot_duration}
        |                                                                                     ^^^^^^^^^^^^^^^^^^^^^
    511 |                 />
    512 |               </Grid>
    513 |
ERROR in src/pages/service-points/ServicePointFormPage.tsx:521:30
TS2339: Property 'schedule' does not exist on type 'ServicePointFormData'.
    519 |               </Grid>
    520 |
  > 521 |               {formik.values.schedule.map((scheduleItem: WorkingHours, index: number) => (
        |                              ^^^^^^^^
    522 |                 <Grid item xs={12} md={6} key={scheduleItem.day_of_week}>
    523 |                   <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
    524 |                     <Typography variant="subtitle1" gutterBottom>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:586:30
TS2339: Property 'services' does not exist on type 'ServicePointFormData'.
    584 |               </Grid>
    585 |
  > 586 |               {formik.values.services.map((service: ServicePointService, index: number) => (
        |                              ^^^^^^^^
    587 |                 <Grid item xs={12} md={6} key={service.service_id}>
    588 |                   <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
    589 |                     <Grid container spacing={2}>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:600:44
TS2339: Property 'data' does not exist on type 'ServiceCategory[]'.
    598 |                             label="Услуга"
    599 |                           >
  > 600 |                             {servicesData?.data.map((serviceItem: ServiceCategory) => (
        |                                            ^^^^
    601 |                               <MenuItem key={serviceItem.id} value={serviceItem.id}>
    602 |                                 {serviceItem.name}
    603 |                               </MenuItem>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:665:40
TS2339: Property 'services' does not exist on type 'ServicePointFormData'.
    663 |                   onClick={() => {
    664 |                     formik.setFieldValue('services', [
  > 665 |                       ...formik.values.services,
        |                                        ^^^^^^^^
    666 |                       {
    667 |                         service_id: 0,
    668 |                         price: 0,
ERROR in src/pages/service-points/ServicePointFormPage.tsx:686:30
TS2339: Property 'photos' does not exist on type 'ServicePointFormData'.
    684 |               </Grid>
    685 |
  > 686 |               {formik.values.photos.map((photo: ServicePointPhoto, index: number) => (
        |                              ^^^^^^
    687 |                 <Grid item xs={12} md={4} key={index}>
    688 |                   <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
    689 |                     <Grid container spacing={2}>
ERROR in src/pages/service-points/ServicePointFormPage.tsx:728:51
TS2339: Property 'photos' does not exist on type 'ServicePointFormData'.
    726 |                                 onChange={(e) => {
    727 |                                   if (e.target.checked) {
  > 728 |                                     formik.values.photos.forEach((_, i) => {
        |                                                   ^^^^^^
    729 |                                       if (i !== index) {
    730 |                                         formik.setFieldValue(`photos.${i}.is_main`, false);
    731 |                                       }
ERROR in src/pages/service-points/ServicePointFormPage.tsx:728:67
TS7006: Parameter '_' implicitly has an 'any' type.
    726 |                                 onChange={(e) => {
    727 |                                   if (e.target.checked) {
  > 728 |                                     formik.values.photos.forEach((_, i) => {
        |                                                                   ^
    729 |                                       if (i !== index) {
    730 |                                         formik.setFieldValue(`photos.${i}.is_main`, false);
    731 |                                       }
ERROR in src/pages/service-points/ServicePointFormPage.tsx:728:70
TS7006: Parameter 'i' implicitly has an 'any' type.
    726 |                                 onChange={(e) => {
    727 |                                   if (e.target.checked) {
  > 728 |                                     formik.values.photos.forEach((_, i) => {
        |                                                                      ^
    729 |                                       if (i !== index) {
    730 |                                         formik.setFieldValue(`photos.${i}.is_main`, false);
    731 |                                       }
ERROR in src/pages/service-points/ServicePointFormPage.tsx:748:65
TS2339: Property 'photos' does not exist on type 'ServicePointFormData'.
    746 |                           color="error"
    747 |                           onClick={() => {
  > 748 |                             const newPhotos = [...formik.values.photos];
        |                                                                 ^^^^^^
    749 |                             newPhotos.splice(index, 1);
    750 |                             formik.setFieldValue('photos', newPhotos);
    751 |                           }}
ERROR in src/pages/service-points/ServicePointFormPage.tsx:766:40
TS2339: Property 'photos' does not exist on type 'ServicePointFormData'.
    764 |                   onClick={() => {
    765 |                     formik.setFieldValue('photos', [
  > 766 |                       ...formik.values.photos,
        |                                        ^^^^^^
    767 |                       {
    768 |                         url: '',
    769 |                         description: '',
ERROR in src/pages/service-points/ServicePointFormPage.tsx:770:48
TS2339: Property 'photos' does not exist on type 'ServicePointFormData'.
    768 |                         url: '',
    769 |                         description: '',
  > 770 |                         is_main: formik.values.photos.length === 0,
        |                                                ^^^^^^
    771 |                       },
    772 |                     ]);
    773 |                   }}
ERROR in src/pages/service-points/ServicePointPhotosPage.tsx:52:37
TS2345: Argument of type 'number' is not assignable to parameter of type 'string | unique symbol'.
    50 |     error: photosError,
    51 |     refetch: refetchPhotos
  > 52 |   } = useGetServicePointPhotosQuery(Number(id), {
       |                                     ^^^^^^^^^^
    53 |     skip: !id
    54 |   });
    55 |
ERROR in src/pages/service-points/ServicePointPhotosPage.tsx:59:34
TS2339: Property 'data' does not exist on type 'Photo[]'.
    57 |   const [deletePhoto] = useDeleteServicePointPhotoMutation();
    58 |
  > 59 |   const photos = photosResponse?.data || [];
       |                                  ^^^^
    60 |   const isLoading = photosLoading;
    61 |   const error = photosError;
    62 |
ERROR in src/pages/service-points/ServicePointPhotosPage.tsx:73:27
TS2353: Object literal may only specify known properties, and 'id' does not exist in type '{ servicePointId: string; file: File; }'.
    71 |     
    72 |     try {
  > 73 |       await uploadPhoto({ id: Number(id), photo: formData }).unwrap();
       |                           ^^
    74 |       await refetchPhotos();
    75 |     } catch (error) {
    76 |       console.error('Ошибка при загрузке фото:', error);
ERROR in src/pages/service-points/ServicePointPhotosPage.tsx:94:27
TS2322: Type 'number' is not assignable to type 'string'.
    92 |     
    93 |     try {
  > 94 |       await deletePhoto({ servicePointId: Number(id), photoId: photoToDelete }).unwrap();
       |                           ^^^^^^^^^^^^^^
    95 |       await refetchPhotos();
    96 |     } catch (error) {
    97 |       console.error('Ошибка при удалении фото:', error);
ERROR in src/pages/service-points/ServicePointPhotosPage.tsx:94:55
TS2322: Type 'number' is not assignable to type 'string'.
    92 |     
    93 |     try {
  > 94 |       await deletePhoto({ servicePointId: Number(id), photoId: photoToDelete }).unwrap();
       |                                                       ^^^^^^^
    95 |       await refetchPhotos();
    96 |     } catch (error) {
    97 |       console.error('Ошибка при удалении фото:', error);
ERROR in src/pages/service-points/ServicePointsPage.tsx:67:7
TS2322: Type 'number | undefined' is not assignable to type 'string | undefined'.
  Type 'number' is not assignable to type 'string'.
    65 |   const { data: regionsData, isLoading: regionsLoading } = useGetRegionsQuery({});
    66 |   const { data: citiesData, isLoading: citiesLoading } = useGetCitiesQuery(
  > 67 |     { region_id: selectedRegionId || undefined }, 
       |       ^^^^^^^^^
    68 |     { skip: !selectedRegionId }
    69 |   );
    70 |   const { data: servicePointsData, isLoading: servicePointsLoading, error } = useGetServicePointsQuery({
ERROR in src/pages/service-points/ServicePointsPage.tsx:71:5
TS2353: Object literal may only specify known properties, and 'search' does not exist in type 'ServicePointFilter'.
    69 |   );
    70 |   const { data: servicePointsData, isLoading: servicePointsLoading, error } = useGetServicePointsQuery({
  > 71 |     search,
       |     ^^^^^^
    72 |     city_id: selectedCityId || undefined,
    73 |     region_id: selectedRegionId || undefined,
    74 |     page: page + 1,
ERROR in src/pages/service-points/ServicePointsPage.tsx:81:47
TS2339: Property 'total' does not exist on type '{ current_page: number; total_pages: number; total_count: number; }'.
    79 |   const isLoading = servicePointsLoading || regionsLoading || citiesLoading || isDeleting;
    80 |   const servicePoints = servicePointsData?.data || [];
  > 81 |   const totalItems = servicePointsData?.meta?.total || 0;
       |                                               ^^^^^
    82 |
    83 |   // Обработчики событий
    84 |   const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
ERROR in src/pages/service-points/ServicePointsPage.tsx:118:34
TS2345: Argument of type '{ partner_id: number; id: number; }' is not assignable to parameter of type 'string'.
    116 |     if (selectedServicePoint) {
    117 |       try {
  > 118 |         await deleteServicePoint({ 
        |                                  ^^
  > 119 |           partner_id: selectedServicePoint.partner_id, 
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 120 |           id: selectedServicePoint.id 
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 121 |         }).unwrap();
        | ^^^^^^^^^^
    122 |         setDeleteDialogOpen(false);
    123 |         setSelectedServicePoint(null);
    124 |       } catch (error) {
ERROR in src/pages/service-points/ServicePointsPage.tsx:195:29
TS2339: Property 'regions' does not exist on type 'ApiResponse<Region>'.
    193 |             >
    194 |               <MenuItem value="">Все регионы</MenuItem>
  > 195 |               {regionsData?.regions?.map((region) => (
        |                             ^^^^^^^
    196 |                 <MenuItem key={region.id} value={region.id}>
    197 |                   {region.name}
    198 |                 </MenuItem>
ERROR in src/pages/service-points/ServicePointsPage.tsx:195:43
TS7006: Parameter 'region' implicitly has an 'any' type.
    193 |             >
    194 |               <MenuItem value="">Все регионы</MenuItem>
  > 195 |               {regionsData?.regions?.map((region) => (
        |                                           ^^^^^^
    196 |                 <MenuItem key={region.id} value={region.id}>
    197 |                   {region.name}
    198 |                 </MenuItem>
ERROR in src/pages/service-points/ServicePointsPage.tsx:212:28
TS2339: Property 'cities' does not exist on type 'ApiResponse<City>'.
    210 |             >
    211 |               <MenuItem value="">Все города</MenuItem>
  > 212 |               {citiesData?.cities?.map((city) => (
        |                            ^^^^^^
    213 |                 <MenuItem key={city.id} value={city.id}>
    214 |                   {city.name}
    215 |                 </MenuItem>
ERROR in src/pages/service-points/ServicePointsPage.tsx:212:41
TS7006: Parameter 'city' implicitly has an 'any' type.
    210 |             >
    211 |               <MenuItem value="">Все города</MenuItem>
  > 212 |               {citiesData?.cities?.map((city) => (
        |                                         ^^^^
    213 |                 <MenuItem key={city.id} value={city.id}>
    214 |                   {city.name}
    215 |                 </MenuItem>
ERROR in src/pages/service-points/ServicePointsPage.tsx:252:47
TS2339: Property 'contact_phone' does not exist on type 'ServicePoint'.
    250 |                   <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
    251 |                     <LocationIcon color="action" />
  > 252 |                     <Typography>{servicePoint.contact_phone}</Typography>
        |                                               ^^^^^^^^^^^^^
    253 |                   </Box>
    254 |                 </TableCell>
    255 |                 <TableCell>
ERROR in src/pages/service-points/ServicePointsPage.tsx:273:58
TS2345: Argument of type 'ServicePoint' is not assignable to parameter of type '{ id: number; name: string; partner_id: number; }'.
  Types of property 'id' are incompatible.
    Type 'string' is not assignable to type 'number'.
    271 |                     <Tooltip title="Удалить">
    272 |                       <IconButton
  > 273 |                         onClick={() => handleDeleteClick(servicePoint)}
        |                                                          ^^^^^^^^^^^^
    274 |                         size="small"
    275 |                         color="error"
    276 |                       >
ERROR in src/pages/services/ServicesPage.tsx:88:29
TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    86 |     if (window.confirm('Вы уверены, что хотите удалить эту услугу?')) {
    87 |       try {
  > 88 |         await deleteService(id).unwrap();
       |                             ^^
    89 |       } catch (error) {
    90 |         console.error('Ошибка при удалении услуги:', error);
    91 |       }
ERROR in src/pages/services/ServicesPage.tsx:138:32
TS2339: Property 'data' does not exist on type 'ServiceCategory[]'.
    136 |                 <em>Все категории</em>
    137 |               </MenuItem>
  > 138 |               {categoriesData?.data.map((category) => (
        |                                ^^^^
    139 |                 <MenuItem key={category.id} value={category.id}>
    140 |                   {category.name}
    141 |                 </MenuItem>
ERROR in src/pages/services/ServicesPage.tsx:138:42
TS7006: Parameter 'category' implicitly has an 'any' type.
    136 |                 <em>Все категории</em>
    137 |               </MenuItem>
  > 138 |               {categoriesData?.data.map((category) => (
        |                                          ^^^^^^^^
    139 |                 <MenuItem key={category.id} value={category.id}>
    140 |                   {category.name}
    141 |                 </MenuItem>
ERROR in src/pages/services/ServicesPage.tsx:180:33
TS2339: Property 'data' does not exist on type 'Service[]'.
    178 |                   </TableCell>
    179 |                 </TableRow>
  > 180 |               ) : servicesData?.data.map((service) => (
        |                                 ^^^^
    181 |                 <TableRow key={service.id}>
    182 |                   <TableCell>{service.id}</TableCell>
    183 |                   <TableCell>{service.name}</TableCell>
ERROR in src/pages/services/ServicesPage.tsx:180:43
TS7006: Parameter 'service' implicitly has an 'any' type.
    178 |                   </TableCell>
    179 |                 </TableRow>
  > 180 |               ) : servicesData?.data.map((service) => (
        |                                           ^^^^^^^
    181 |                 <TableRow key={service.id}>
    182 |                   <TableCell>{service.id}</TableCell>
    183 |                   <TableCell>{service.name}</TableCell>
ERROR in src/pages/services/ServicesPage.tsx:185:38
TS2339: Property 'data' does not exist on type 'ServiceCategory[]'.
    183 |                   <TableCell>{service.name}</TableCell>
    184 |                   <TableCell>
  > 185 |                     {categoriesData?.data.find(cat => cat.id === service.category_id)?.name}
        |                                      ^^^^
    186 |                   </TableCell>
    187 |                   <TableCell>{service.duration}</TableCell>
    188 |                   <TableCell>
ERROR in src/pages/services/ServicesPage.tsx:185:48
TS7006: Parameter 'cat' implicitly has an 'any' type.
    183 |                   <TableCell>{service.name}</TableCell>
    184 |                   <TableCell>
  > 185 |                     {categoriesData?.data.find(cat => cat.id === service.category_id)?.name}
        |                                                ^^^
    186 |                   </TableCell>
    187 |                   <TableCell>{service.duration}</TableCell>
    188 |                   <TableCell>
ERROR in src/pages/services/ServicesPage.tsx:218:32
TS2339: Property 'total' does not exist on type 'Service[]'.
    216 |           rowsPerPageOptions={[5, 10, 25]}
    217 |           component="div"
  > 218 |           count={servicesData?.total || 0}
        |                                ^^^^^
    219 |           rowsPerPage={rowsPerPage}
    220 |           page={page}
    221 |           onPageChange={handleChangePage}
ERROR in src/pages/users/UserForm.tsx:196:51
TS2322: Type '{ email_verified: boolean; phone_verified: boolean; email: string; first_name: string; last_name: string; phone?: string; role: UserRole; is_active: boolean; password?: string; password_confirmation?: string; }' is not assignable to type 'Omit<User, "id" | "created_at" | "updated_at">'.
  Types of property 'phone' are incompatible.
    Type 'string | undefined' is not assignable to type 'string'.
      Type 'undefined' is not assignable to type 'string'.
    194 |     try {
    195 |       if (isEditMode) {
  > 196 |         await updateUser({ id: userId.toString(), data: userData }).unwrap();
        |                                                   ^^^^
    197 |       } else {
    198 |         await createUser(userData).unwrap();
    199 |       }
ERROR in src/pages/users/UserForm.tsx:198:26
TS2345: Argument of type '{ email_verified: boolean; phone_verified: boolean; email: string; first_name: string; last_name: string; phone?: string; role: UserRole; is_active: boolean; password?: string; password_confirmation?: string; }' is not assignable to parameter of type 'Omit<User, "id" | "created_at" | "updated_at">'.
  Types of property 'phone' are incompatible.
    Type 'string | undefined' is not assignable to type 'string'.
      Type 'undefined' is not assignable to type 'string'.
    196 |         await updateUser({ id: userId.toString(), data: userData }).unwrap();
    197 |       } else {
  > 198 |         await createUser(userData).unwrap();
        |                          ^^^^^^^^
    199 |       }
    200 |       navigate('/users');
    201 |     } catch (error) {
ERROR in src/pages/users/UsersPage.tsx:137:9
TS2741: Property 'phone' is missing in type '{ email: string; first_name: string; last_name: string; role: string; is_active: boolean; email_verified: boolean; phone_verified: boolean; }' but required in type 'Omit<User, "id" | "created_at" | "updated_at">'.
    135 |       await updateUser({
    136 |         id: user.id,
  > 137 |         data: updateData
        |         ^^^^
    138 |       }).unwrap();
    139 |       enqueueSnackbar('Статус пользователя успешно обновлен', { variant: 'success' });
    140 |     } catch (error) {