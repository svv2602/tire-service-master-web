const axios = require('axios');

const API_BASE = 'http://localhost:8000/api/v1';

async function testServiceDeletion() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏...');
    
    try {
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
            auth: {
                login: 'admin@test.com',
                password: 'admin123'
            }
        });
        
        const token = loginResponse.data.tokens.access;
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        
        // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏...');
        const serviceData = {
            service: {
                name: `–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è ${Date.now()}`,
                description: '–£—Å–ª—É–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è',
                default_duration: 30,
                is_active: true,
                sort_order: 999,
                category_id: '3'
            }
        };
        
        const createResponse = await axios.post(`${API_BASE}/services`, serviceData, { headers });
        const serviceId = createResponse.data.id;
        console.log(`‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${serviceId}`);
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
        console.log('üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥...');
        const listResponse = await axios.get(`${API_BASE}/service_categories/3/services`, { headers });
        const foundService = listResponse.data.data.find(s => s.id == serviceId);
        
        if (foundService) {
            console.log(`‚úÖ –£—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ: ${foundService.name}`);
        } else {
            console.log('‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ');
            return;
        }
        
        // 4. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ ID: ${serviceId}...`);
        const deleteUrl = `${API_BASE}/service_categories/3/services/${serviceId}`;
        console.log(`üì§ URL —É–¥–∞–ª–µ–Ω–∏—è: ${deleteUrl}`);
        
        const deleteResponse = await axios.delete(deleteUrl, { headers });
        console.log(`‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${deleteResponse.status}`);
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...');
        const checkResponse = await axios.get(`${API_BASE}/service_categories/3/services`, { headers });
        const stillExists = checkResponse.data.data.find(s => s.id == serviceId);
        
        if (!stillExists) {
            console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —É—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        console.log('üéâ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.response?.data || error.message);
        if (error.response) {
            console.error('üì° HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('üì° –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        }
    }
}

testServiceDeletion();
