#!/usr/bin/env node

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const http = require('http');

const API_URL = 'http://localhost:8000/api/v1';
const CREDENTIALS = {
  email: 'admin@test.com',
  password: 'admin123'
};

async function makeRequest(method, endpoint, data = null, token = null) {
    return new Promise((resolve, reject) => {
        const url = new URL(endpoint, API_URL);
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...(token && { 'Authorization': `Bearer ${token}` })
            }
        };

        console.log(`üì° ${method} ${url.toString()}`);
        if (data) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
        }

        const req = http.request(url, options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                console.log(`üì• –°—Ç–∞—Ç—É—Å: ${res.statusCode} ${res.statusMessage}`);
                try {
                    const result = body ? JSON.parse(body) : {};
                    console.log('üì• –û—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2));
                    resolve({ status: res.statusCode, data: result });
                } catch (e) {
                    console.log('üì• –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', body);
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });

        req.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
            reject(err);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }

        req.end();
    });
}

async function login() {
    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const response = await makeRequest('POST', '/api/v1/auth/login', {
        auth: {
            login: CREDENTIALS.email,
            password: CREDENTIALS.password
        }
    });
    
    if (response.status === 200 && response.data.tokens && response.data.tokens.access) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        console.log('üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', response.data.tokens.access.substring(0, 20) + '...');
        return response.data.tokens.access;
    } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} - ${JSON.stringify(response.data)}`);
    }
}

async function testServiceCreation() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏\n');
    console.log('================================\n');

    try {
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const token = await login();
        console.log('');

        // 2. –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
        console.log('üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...');
        const categoriesResponse = await makeRequest('GET', '/api/v1/service_categories', null, token);
        
        if (categoriesResponse.status !== 200) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesResponse.status}`);
        }

        const categories = categoriesResponse.data.data || [];
        if (categories.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥');
        }

        const firstCategory = categories[0];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${firstCategory.name}" (ID: ${firstCategory.id})`);
        console.log('');

        // 3. –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –ë–ï–ó default_duration
        console.log('üß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –ë–ï–ó default_duration');
        const serviceDataWithoutDuration = {
            service: {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
                is_active: true,
                sort_order: 1,
                category_id: firstCategory.id
            }
        };

        const response1 = await makeRequest('POST', '/api/v1/services', serviceDataWithoutDuration, token);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ duration: ${response1.status === 201 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
        console.log('');

        // 4. –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –° default_duration
        console.log('üß™ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –° default_duration');
        const serviceDataWithDuration = {
            service: {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º',
                default_duration: 30,
                is_active: true,
                sort_order: 2,
                category_id: firstCategory.id
            }
        };

        const response2 = await makeRequest('POST', '/api/v1/services', serviceDataWithDuration, token);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å duration: ${response2.status === 201 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
        console.log('');

        // 5. –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üß™ –¢–ï–°–¢ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const minimalServiceData = {
            service: {
                name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞',
                category_id: firstCategory.id
            }
        };

        const response3 = await makeRequest('POST', '/api/v1/services', minimalServiceData, token);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${response3.status === 201 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
        console.log('');

        // 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
        const servicesResponse = await makeRequest('GET', '/api/v1/services', null, token);
        
        if (servicesResponse.status === 200) {
            const services = servicesResponse.data.data || servicesResponse.data || [];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: ${services.length}`);
            
            const testServices = services.filter(s => s.name && s.name.includes('–¢–µ—Å—Ç–æ–≤–∞—è'));
            console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥: ${testServices.length}`);
            
            testServices.forEach(service => {
                console.log(`   - ${service.name} (ID: ${service.id}, duration: ${service.default_duration || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'})`);
            });
        }

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    }
}

testServiceCreation().catch(console.error);
